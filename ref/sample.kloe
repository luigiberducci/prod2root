
C==============================================================================
C  SAMPLE
C==============================================================================
C
C  Description:
C  ------------
C Prod2ntu version for root tuple
C  Language:
C  ---------
C  KLOE Fortran
C
C  Author:
C  -------
C Elena Perez del Rio
C
C
C==============================================================================
      SUBROUTINE SAMIN
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT

$$include 'sample.inc'
$$include 'sample_talk.inc'
C
C==============================================================================
C
      write(*,*)"SAMIN"

      TRIGFLAG    = .false.
      TELEFLAG    = .false.
      C2TRGFLAG   = .false.
      TELLINAFLAG = .false.
      PIZZAFLAG   = .false.
      ECLSFLAG    = .true.
      BPOSFLAG    = .false.
      
      write(*,*)'ECLSFLAG', ECLSFLAG

C    Initialization tree for ROOT
      call inittree()


      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRI
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'k$inc:jobsta.inc'
C
C External functions
C
      INTEGER    ANPIST
C
C Local declarations
C
      INTEGER    Status, istat, fillbposcommon
C
C==============================================================================
C
C Put A_C Error Code to SUCCESS at Run_Init
C
      Status = ANPIST(ANSUCC)
      istat = fillbposcommon(nrun)
C
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMEV
C==============================================================================
C
$$IMPLICIT
$$include 'ybos$library:errcod.inc'
$$include 'c$inc:bcs.inc'
$$include 'c$inc:erlevl.inc'
$$include 'k$inc:oferco.inc'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'k$inc:bpoybs.inc'
c$$Include 'maxstructdim.inc'
$$include 'k$itls:maxstructdim.inc'
$$include 'k$itrg:maxtrgchan.inc'
$$include 'k$itls:emcstruct.inc'        ! Emc Clusters
$$include 'k$itls:evtstruct.inc'  	! Event Information
$$include 'k$itls:geanfistruct.inc'            ! Geanfi Information
$$include 'k$itls:vtxstru.inc'		        ! Charge Verticies
$$include 'k$itls:celestruct.inc'	! Calorimeter Elements
$$include 'k$itls:trkstru.inc'		        ! Tracks
$$include 'k$itls:dprs_struct.inc'             ! DPRS patterns
$$include 'k$itls:dhspstru.inc'
$$include 'k$itls:tclostruct.inc'	! Tracks-to-Clusters
$$include 'k$itls:cfhistruct.inc'       ! Calorimeter First Hit
$$include 'k$itls:qihistruct.inc'       ! QIHI common block
$$include 'k$itls:qcalstruct.inc'       ! QCAL common block
$$include 'k$itrg:telestruct.inc'
$$include 'k$itrg:pizzastruct.inc'
$$include 'k$itls:preclustruct.inc'
$$include 'k$itls:nvostru.inc'
$$include 'k$itls:eclostru.inc'
$$include 'k$itls:t0struct.inc'
$$include 'k$itls:cwrkstruct.inc'
$$include 'k$itls:tellina.inc'
$$include 'k$itls:pizzetta.inc'
$$include 'k$itrg:trgstruct.inc'
$$include 'k$itls:eclsstru.inc'
$$include 'k$itls:gdchitstru.inc'
$$include 'k$itls:bposstruct.inc'
$$include 'k$itls:trkqstru.inc'
$$include 'k$itls:dtcestruct.inc'
$$include 'k$itls:dhrestruct.inc'
$$include 'k$itls:sec2clustru.inc'
$$include 'k$itls:cspsstruct.cin'
$$include 'k$itls:cluostruct.cin'
$$include 'k$itls:cluomcstruct.cin'
$$include 'k$itls:dhitstruct.cin'
$$include 'k$itls:dedx2stru.inc'
$$INCLUDE 'K$ITLS:eleqcaltstru.inc' !QCALT
c$$INCLUDE 'K$ITLS:qcalthitstru.cin' !QCALT hit Struc
$$INCLUDE 'K$ITLS:ele2hitqcalt.cin'    ! QCALT hit structure
$$INCLUDE 'K$ITLS:CCALTNUM.INC'        ! CCALT stu dimensioner
$$INCLUDE 'K$ITLS:ccaltstru.inc'   ! CCALT Stru
$$INCLUDE 'k$itls:letestruct.cin'  !LET Stru
C$$INCLUDE 'k$itls:raw2itce.cin'  ! IT Stru
$$INCLUDE 'k$itls:itcestruct.cin'  ! IT Stru
$$INCLUDE 'k$itls:hetenum.cin'      ! HET max dim
$$INCLUDE 'k$itls:hetestru.cin'  !LET Stru
$$include 'k$itls:prod2ntu.inc'
$$INCLUDE 'k$itls:raw2dtce.cin'

$$include 'sample.inc'
$$include 'sample_talk.inc'
C
C All the declarations are moved in sample.cin
C What are the following lines? I maintain here at the moment to 
C let fix the "RunNumber" issue. 
C TODO: Move them to sample.cin
C
C NOTE1: trgwrd1/2 are used in block EVTTRG and if no other, 
C they can be removed. Now they are commented
C
      INTEGER istat, OldRunNumber
      data OldRunNumber/0/
      save OldRunNumber
      integer ind1,inddat
C      Integer trgwrd1,trgwrd2,numdhit
C      common /trgcom/trgwrd1,trgwrd2,numdhit
      Integer numdhit
      common /trgcom/numdhit
      LOGICAL mcflag_1
      INTEGER mcflag_tg
C
C=============================================================================
C Start of Code:
C=============================================================================
      IF( exptyp.eq.exofsi )then ! Simulation
         mcflag_1 = .true.
      else
         mcflag_1 = .false.
      endif

      If (mcflag_1) then
         mcflag_tg=1
      Else
         mcflag_tg=0
      EndIf
C-----------------------------------------------------------------------------
C Fill event classification information
C-----------------------------------------------------------------------------
      IF( mcflag_1 )  THEN
         istat = GETEVCL(evt%Info)
C         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
C   Moved to the Block definition
C         IF( TRIGFLAG ) THEN
C           trgwrd1 = IW( inddat+1 )
C           trgwrd2 = IW( inddat+2 )
C         ENDIF
         
      ELSE
         istat = GETTIME(timesec,timemusec)
         timesec = timesec-946080000  ! Reduce the timing
         ISTAT = BIGEST(IW,'EVCL',BNKNUM)
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')

         END IF
         ISTAT = BLOCAT(IW,'EVCL',BNKNUM,IND1,INDDAT )
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')
            

         END IF
        
         icurr = IW(INDDAT+5)
         IPos=iand(icurr,'FFFF'x)*1.e-4
         IEle=(icurr/2**16)*1.e-4
         Lumi= iw(inddat+6)*1.e-6         
      ENDIF
C-----------------------------------------------------------------------
C Fill Block Info
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN  ! TODO: Change .TRUE. with the name of block flag
         IF (mcflag_1) THEN
            istat=blocat(iw,'BRID',1,ind1,inddat)
            Evt%Info%RunNumber = iw(inddat)
            IF (Evt%Info%RunNumber.ne.OldRunNumber) THEN
               istat = fillbposcommon(Evt%Info%RunNumber)
               OldRunNumber = Evt%Info%RunNumber
            END IF
         ELSE
            Evt%Info%RunNumber = Nrun
         END IF
         Evt%Info%EventNumber = Nev
           
         NumRun = Evt%Info%RunNumber
         NumEv = Evt%Info%EventNumber
         Pileup = Evt%Info%Pileup
         IF ( Pileup < 0 .OR. Pileup > 1 ) THEN
            WRITE(*,*) 'ERROR INFO - Pileup Out of bound : ', Pileup
         END IF
         GCod = Evt%Info%GenCod
         IF ( GCod < 0 .OR. GCod > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - GCod Out of bound : ', GCod
         END IF
         PhiD = Evt%Info%PhiDecay
         IF ( PhiD < 0 .OR. PhiD > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - PhiD Out of bound : ', PhiD
         END IF
         A1Typ = Evt%Info%A1type
         IF ( A1Typ < 0 .OR. A1Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - A1Typ Out of bound : ', A1Typ
         END IF
         A2Typ = Evt%Info%A2type
         IF ( A2Typ < 0 .OR. A2Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - A2Typ Out of bound : ', A2Typ
         END IF
         A3Typ = Evt%Info%A3type
         IF ( A3Typ < 0 .OR. A3Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - A3Typ Out of bound : ', A3Typ
         END IF
         B1Typ = Evt%Info%B1type
         IF ( B1Typ < 0 .OR. B1Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - B1Typ Out of bound : ', B1Typ
         END IF
         B2Typ = Evt%Info%B2type
         IF ( B2Typ < 0 .OR. B2Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - B2Typ Out of bound : ', B2Typ
         END IF
         B3Typ = Evt%Info%B3type
         IF ( B3Typ < 0 .OR. B3Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - B3Typ Out of bound : ', B3Typ
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block BPOS
C-----------------------------------------------------------------------
      IF (BPOSFLAG) THEN
         BPx = 0.
         BPy = 0.
         BPz = 0.
         Bx = 0.
         By = 0.
         Bz = 0.
         BWidPx = 0.
         BWidPy = 0.
         BWidPz = 0.
         BSx = 0.
         BSy = 0.
         BSz = 0.
         BLumx = 0.
         BLumz = 0.
         Broots = 0.
         BrootsErr = 0.
 
         rstat = GETBPOS(Evt%Bpos)
 
         BPx = Evt%Bpos%px
         BPy = Evt%Bpos%py
         BPz = Evt%Bpos%pz
         Bx = Evt%Bpos%x
         By = Evt%Bpos%y
         Bz = Evt%Bpos%z
         BWidPx = Evt%Bpos%errpx
         BWidPy = Evt%Bpos%errpy
         BWidPz = Evt%Bpos%errpz
         BSx = Evt%Bpos%errx
         BSy = Evt%Bpos%erry
         BSz = Evt%Bpos%errz
         BLumx = Evt%Bpos%lumx
         BLumz = Evt%Bpos%lumz
         Broots = Evt%Bpos%Ene
         BrootsErr = Evt%Bpos%ErrEne
      END IF
C-----------------------------------------------------------------------
C Fill Block GDHit
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN  ! TODO: Change .TRUE. with the name of block flag
         DtceHit = 0.
         DhreHit = 0.
         DprsHit = 0.
         DtfsHit = 0.
   
         istat = BIGEST(iw,'DTCE',banknum)
         istat = BLOCAT(iw,'DTCE',banknum,ind1,inddat)
         IF (istat.ne.YESUCC) THEN
            NDtce_copy =0
         ELSE
            NDtce_copy = IW(inddat+DTCNRO)
         ENDIF
         CALL GETGDCHIT(Evt%GHit)
  
         DtceHit = NDtce_copy
         DhreHit = Evt%GHit%nhit
         DprsHit = Evt%GHit%nhpr
         DtfsHit = Evt%GHit%nhtf
      END IF
C-----------------------------------------------------------------------
C Fill Block Ecls
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN  ! TODO: Change .TRUE. with the name of block flag
         IF (ECLSFLAG) THEN
            nEcls = 0
            EclTrgw = 0
            EclFilfo = 0
            DO iecls=1,8
               EclWord(iecls) = 0
               EclStream(iecls) = 0
               EclTagNum(iecls) = 0
               EclEvType(iecls) = 0
            END DO
            
            nEcls2 = 0
            EclTrgw2 = 0
            EclFilfo2 = 0
            DO iecls2=1,8
               EclWord2(iecls2) = 0
               EclStream2(iecls2) = 0
               EclTagNum2(iecls2) = 0
               EclEvType2(iecls2) = 0
            END DO
   
            istat = GETECLS(evt%ecls)
            
            nEcls = evt%ecls%n
            IF ( nEcls < 0 .OR. nEcls > 8 ) THEN
               WRITE(*,*) 'ERROR INFO - nEcls Out of bound : ', nEcls
            END IF

            IF (nEcls > 0 .AND. nEcls <= 8) THEN
               EclTrgw = evt%ecls%trigger
               EclFilfo = evt%ecls%filfo
               DO iecls=1,necls
                  EclWord(iecls) = evt%ecls%TotWord(iecls)
                  EclStream(iecls) = evt%ecls%Stream(iecls)
                  EclTagNum(iecls) = evt%ecls%TagNum(iecls)
                  EclEvType(iecls) = evt%ecls%EvnTyp(iecls)
               END DO
            ELSE
               WRITE(*,*) 'ERROR ECLS - nEcls Index not valid: ', nEcls
            END IF
            
            nEcls2 = evt%ecls%n2
            IF ( nEcls2 < 0 .OR. nEcls2 > 8 ) THEN
               WRITE(*,*) 'ERROR INFO - nEcls2 Out of bound : ', nEcls2
            END IF
   
            IF (nEcls2 > 0 .AND. nEcls <= 8) THEN
               EclTrgw2 = evt%ecls%trigger2
               EclFilfo2 = evt%ecls%filfo2
               DO iecls2=1,necls2
                  EclWord2(iecls2) = evt%ecls%TotWord2(iecls2)
                  EclStream2(iecls2) = evt%ecls%Stream2(iecls2)
                  EclTagNum2(iecls2) = evt%ecls%TagNum2(iecls2)
                  EclEvType2(iecls2) = evt%ecls%EvnTyp2(iecls2)
               END DO
            ELSE
               WRITE(*,*) 'ERROR ECLS - nEcls2 Index not valid: ', nEcls2
            END IF
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Trig
C-----------------------------------------------------------------------
      IF (TRIGFLAG) THEN
         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
         Trgw1 = IW( inddat+1 )
         Trgw2 = IW( inddat+2 )
      END IF
C-----------------------------------------------------------------------
C Fill Block C2Trig
C-----------------------------------------------------------------------
      IF (C2TRGFLAG) THEN
         NSec = 0.
         NSec_NoClu = 0.
         NSec2Clu = 0.
         NClu2s = 0.
         DO iC2Trig=1, 100
            NNorm(iC2Trig)   = 0.
            NormAdd(iC2Trig) = 0.
            NOver(iC2Trig)   = 0.
            OverAdd(iC2Trig) = 0.
            NCosm(iC2Trig)   = 0.
            CosmAdd(iC2Trig) = 0.
         END DO

         istat = GETSEC2CLUSTRU(evt%s2clu)

         NSec = Evt%S2CLU%nsect
         NSec_NoClu = Evt%S2CLU%nsect_noclu
         NSec2Clu = Evt%S2CLU%nsect_clu
         NClu2s = Evt%S2CLU%Nclus

         IF (NClu2s > 0 .AND. NClu2s <= 100) THEN
            DO iC2Trig=1,NClu2s
               NNorm(iC2Trig)   = Evt%S2CLU%Nnorm(iC2Trig)
               NormAdd(iC2Trig) = Evt%S2CLU%NormAdd(iC2Trig)
               NOver(iC2Trig)   = Evt%S2CLU%Nover(iC2Trig)
               OverAdd(iC2Trig) = Evt%S2CLU%OverAdd(iC2Trig)
               NCosm(iC2Trig)   = Evt%S2CLU%Ncosm(iC2Trig)
               CosmAdd(iC2Trig) = Evt%S2CLU%CosmAdd(iC2Trig)
            END DO
         ELSE
            WRITE(*,*) 'ERROR C2TRIG - NClu2s Index not valid: ', NClu2s
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tellina
C-----------------------------------------------------------------------
      IF (TELLINAFLAG) THEN
         NTel = 0.
         DO iTELLINA=1, 1000
            Add_Tel(iTELLINA) = 0.
            Bitp_Tel(iTELLINA) = 0.
            Ea_Tel(iTELLINA) = 0.
            Eb_Tel(iTELLINA) = 0.
            Ta_Tel(iTELLINA) = 0.
            Tb_Tel(iTELLINA) = 0.
         END DO

         istat = GETTELLINA(Evt%Tellina) 

         NTel = Evt%Tellina%n
         IF ( NTel < 0 .OR. NTel > 1000 ) THEN
            WRITE(*,*) 'ERROR TELLINA - NTel Out of bound : ', NTel
         END IF
         IF (NTel > 0 .AND. NTel <= 1000) THEN
            DO iTELLINA=1, NTel
               Add_Tel(iTELLINA) = Evt%Tellina%add(iTELLINA)
               Bitp_Tel(iTELLINA) = Evt%Tellina%Bitp(iTELLINA)
               IF ( Bitp_Tel < 0 .OR. Bitp_Tel > 7 ) THEN
                  WRITE(*,*) 'ERROR TELLINA - Bitp_Tel Out of bound : ', Bitp_Tel
               END IF
               Ea_Tel(iTELLINA) = Evt%Tellina%Ea(iTELLINA)
               Eb_Tel(iTELLINA) = Evt%Tellina%Eb(iTELLINA)
               Ta_Tel(iTELLINA) = Evt%Tellina%Ta(iTELLINA)
               Tb_Tel(iTELLINA) = Evt%Tellina%Tb(iTELLINA)
            END DO
         ELSE
            WRITE(*,*) 'ERROR TELLINA - NTel Index not valid : ', NTel
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block pizzetta
C-----------------------------------------------------------------------
      IF (PIZZAFLAG) THEN
         NPiz = 0.
         DO iPIZZETTA=1, 1000
            Add_Piz(iPIZZETTA) = 0.
            Ea_Piz(iPIZZETTA)  = 0.
            Eb_Piz(iPIZZETTA)  = 0.
            E_Piz(iPIZZETTA)   = 0.
            Z_Piz(iPIZZETTA)   = 0.
         END DO

         istat = GETPIZZETTA(Evt%Pizzetta)

         NPiz = Evt%Pizzetta%n
         IF ( NPiz < 0 .OR. NPiz > 1000 ) THEN
            WRITE(*,*) 'ERROR PIZZETTA - NPiz Out of bound : ', NPiz
         END IF
         IF (NPiz > 0 .OR. NPiz <= 1000) THEN
            DO iPIZZETTA=1, NPiz
               Add_Piz(iPIZZETTA) = Evt%Pizzetta%Add(iPIZZETTA)
               Ea_Piz(iPIZZETTA)  = Evt%Pizzetta%Ea(iPIZZETTA)
               Eb_Piz(iPIZZETTA)  = Evt%Pizzetta%Eb(iPIZZETTA)
               E_Piz(iPIZZETTA)   = Evt%Pizzetta%E_Rec(iPIZZETTA)
               Z_Piz(iPIZZETTA)   = Evt%Pizzetta%Z_Mod(iPIZZETTA)
            END DO
         ELSE
            WRITE(*,*) 'ERROR PIZZETTA - NPiz Index not valid : ', NPiz
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Torta
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with block flag
         tSpent = 0.
         tDead = 0.
         Type = 0.
         BPhi = 0.
         EPhi = 0.
         WPhi = 0.
         BBha = 0.
         EBha = 0.
         WBha = 0.
         BCos = 0.
         ECos = 0.
         WCos = 0.
         E1W1_Dwn = 0.
         B1_Dwn = 0.
         T0d_Dwn = 0.
         VetoCos = 0.
         VetoBha = 0.
         Bdw = 0.
         Rephasing = 0.
         TDC1_Pht1 = 0.
         Dt2_T1 = 0.
         Fiducial = 0.
         T1c = 0.
         T1d = 0.
         T2d = 0.
         Tcr = 0.
         TCaf_Tcrd = 0.
         TCaf_T2d = 0.
         Moka_T2d = 0.
         DO iTORTA=1, 10
           Moka_T2Dsl(iTORTA) = 0.
         END DO

         istat = GETTRIGGER(evt%trg)

         tSpent = evt%trg%tspent
         tDead = evt%trg%tdead
         Type = evt%trg%type
         IF ( Type < 0 .OR. Type > 7 ) THEN
            WRITE(*,*) 'ERROR TORTA - Type Out of bound : ', Type
         END IF
         BPhi = evt%trg%bphi
         IF ( BPhi < 0 .OR. BPhi > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - BPhi Out of bound : ', BPhi
         END IF
         EPhi = evt%trg%ephi
         IF ( EPhi < 0 .OR. EPhi > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - EPhi Out of bound : ', EPhi
         END IF
         WPhi = evt%trg%wphi
         IF ( WPhi < 0 .OR. WPhi > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - WPhi Out of bound : ', WPhi
         END IF
         BBha = evt%trg%bbha
         IF ( BBha < 0 .OR. BBha > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - BBha Out of bound : ', BBha
         END IF
         EBha = evt%trg%ebha
         IF ( EBha < 0 .OR. EBha > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - EBha Out of bound : ', EBha
         END IF
         WBha = evt%trg%wbha
         IF ( WBha < 0 .OR. WBha > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - WBha Out of bound : ', WBha
         END IF
         BCos = evt%trg%bcos
         IF ( BCos < 0 .OR. BCos > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - BCos Out of bound : ', BCos
         END IF
         ECos = evt%trg%ecos
         IF ( ECos < 0 .OR. ECos > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - ECos Out of bound : ', ECos
         END IF
         WCos = evt%trg%wcos
         IF ( WCos < 0 .OR. WCos > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - WCos Out of bound : ', WCos
         END IF
         E1W1_Dwn = evt%trg%e1w1_dwn
         IF ( E1W1_Dwn < 0 .OR. E1W1_Dwn > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - E1W1_Dwn Out of bound : ', E1W1_Dwn
         END IF
         B1_Dwn = evt%trg%b1_dwn
         IF ( B1_Dwn < 0 .OR. B1_Dwn > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - B1_Dwn Out of bound : ', B1_Dwn
         END IF
         T0d_Dwn = evt%trg%t0d_dwn
         IF ( T0d_Dwn < 0 .OR. T0d_Dwn > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - T0d_Dwn Out of bound : ', T0d_Dwn
         END IF
         VetoCos = evt%trg%vetocos
         IF ( VetoCos < 0 .OR. VetoCos > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - VetoCos Out of bound : ', VetoCos
         END IF
         VetoBha = evt%trg%vetobha
         IF ( VetoBha < 0 .OR. VetoBha > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - VetoBha Out of bound : ', VetoBha
         END IF
         Bdw = evt%trg%bdw
         IF ( Bdw < 0 .OR. Bdw > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - Bdw Out of bound : ', Bdw
         END IF
         Rephasing = evt%trg%rephasing
         IF ( Rephasing < 0 .OR. Rephasing > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Rephasing Out of bound : ', Rephasing
         END IF
         TDC1_Pht1 = evt%trg%tdc1_pht1
         IF ( TDC1_Pht1 < 0 .OR. TDC1_Pht1 > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - TDC1_Pht1 Out of bound : ', TDC1_Pht1
         END IF
         Dt2_T1 = evt%trg%dt2_t1
         IF ( Dt2_T1 < 0 .OR. Dt2_T1 > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Dt2_T1 Out of bound : ', Dt2_T1
         END IF
         Fiducial = evt%trg%fiducial
         IF ( Fiducial < 0 .OR. Fiducial > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Fiducial Out of bound : ', Fiducial
         END IF
         T1c = evt%trg%t1c
         IF ( T1c < 0 .OR. T1c > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - T1c Out of bound : ', T1c
         END IF
         T1d = evt%trg%t1d
         IF ( T1d < 0 .OR. T1d > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - T1d Out of bound : ', T1d
         END IF
         T2d = evt%trg%t2d
         IF ( T2d < 0 .OR. T2d > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - T2d Out of bound : ', T2d
         END IF
         Tcr = evt%trg%tcr
         IF ( Tcr < 0 .OR. Tcr > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Tcr Out of bound : ', Tcr
         END IF
         TCaf_Tcrd = evt%trg%tcaf_tcrd
         TCaf_T2d = evt%trg%tcaf_t2d
         Moka_T2d = evt%trg%moka_t2d
         Moka_T2Dsl = evt%trg%moka_t2dsl
      END IF
C-----------------------------------------------------------------------
C Fill Block Tele
C-----------------------------------------------------------------------
      NTele = 0.
      DO iEVTTELE=1, 300
        Det_Trg(iEVTTELE) = 0.
        BitP(iEVTTELE) = 0.
        Sector(iEVTTELE) = 0.
        SerKind(iEVTTELE) = 0.
        Ea_Trg(iEVTTELE) = 0.
        Eb_Trg(iEVTTELE) = 0.
        Ta_Trg(iEVTTELE) = 0.
        Tb_Trg(iEVTTELE) = 0.
      END DO

      istat = GETTELESTRU(Evt%TELE)

      NTele = Evt%TELE%ntele
      IF ( NTele < 0 .OR. NTele > 300 ) THEN
         WRITE(*,*) 'ERROR TELE - NTele Out of bound : ', NTele
      END IF
      IF (NTele > 0 .AND. NTele <= 300) THEN
        DO iEVTTELE=1, NTele
           Det_Trg(iEVTTELE) = Evt%TELE%Det(iEVTTELE)
           IF ( Det_Trg(iEVTTELE) < 0 .OR. Det_Trg(iEVTTELE) > 3 ) THEN
              WRITE(*,*) 'ERROR TELE - Det_Trg[0] Out of bound : ', Det_Trg(iEVTTELE)
           END IF
           BitP(iEVTTELE) = Evt%TELE%Bitp(iEVTTELE)
           IF ( BitP(iEVTTELE) < 0 .OR. BitP(iEVTTELE) > 1100 ) THEN
              WRITE(*,*) 'ERROR TELE - BitP[1] Out of bound : ', BitP(iEVTTELE)
           END IF
           Sector(iEVTTELE) = Evt%TELE%Sector(iEVTTELE)
           IF ( Sector(iEVTTELE) < 0 .OR. Sector(iEVTTELE) > 50 ) THEN
              WRITE(*,*) 'ERROR TELE - Sector[2] Out of bound : ', Sector(iEVTTELE)
           END IF
           SerKind(iEVTTELE) = Evt%TELE%Serkind(iEVTTELE)
           IF ( SerKind(iEVTTELE) < 0 .OR. SerKind(iEVTTELE) > 3 ) THEN
              WRITE(*,*) 'ERROR TELE - SerKind[3] Out of bound : ', SerKind(iEVTTELE)
           END IF
           Ea_Trg(iEVTTELE) = Evt%TELE%Ea(iEVTTELE)
           Eb_Trg(iEVTTELE) = Evt%TELE%Eb(iEVTTELE)
           Ta_Trg(iEVTTELE) = Evt%TELE%Ta(iEVTTELE)
           Tb_Trg(iEVTTELE) = Evt%TELE%Tb(iEVTTELE)
        END DO
      ELSE
        WRITE(*,*) 'ERROR EVTTELE - NTele Index not valid : ', NTele
      END IF
C-----------------------------------------------------------------------
C Fill Block pizza
C-----------------------------------------------------------------------
      NPack = 0.
      DO iPIZZA=1, 300
        PakSect(iPIZZA) = 0.
        PakDet(iPIZZA) = 0.
        PakSerk(iPIZZA) = 0.
        Ea_Pack(iPIZZA) = 0.
        Eb_Pack(iPIZZA) = 0.
        E_Rec(iPIZZA) = 0.
        Z_mod(iPIZZA) = 0.
      END DO

      istat = PIZZA_RESET(Evt%PIZZA)
      istat = GETPIZZASTRU(Evt%PIZZA)

      NPack = Evt%PIZZA%npizza
      IF ( NPack < 0 .OR. NPack > 300 ) THEN
         WRITE(*,*) 'ERROR CLU - NPack Out of bound : ', NPack
      END IF
      IF (NPack > 0 .AND. NPack <= 300) THEN
        DO iPIZZA=1, NPack
          PakSect(iPIZZA) = Evt%PIZZA%sector(iPIZZA)
          PakDet(iPIZZA) = Evt%PIZZA%det(iPIZZA)
          PakSerk(iPIZZA) = Evt%PIZZA%serkind(iPIZZA)
          Ea_Pack(iPIZZA) = Evt%PIZZA%Ea(iPIZZA)
          Eb_Pack(iPIZZA) = Evt%PIZZA%Eb(iPIZZA)
          E_Rec(iPIZZA) = Evt%PIZZA%E_rec(iPIZZA)
          Z_mod(iPIZZA) = Evt%PIZZA%Z_mod(iPIZZA)
        END DO
      ELSE
        WRITE(*,*) 'ERROR PIZZA - NPack Index not valid : ', NPack
      END IF
C-----------------------------------------------------------------------
C Fill Block Time
C-----------------------------------------------------------------------
      istat = T0GLRD(T0Dc0,T0Hit0,T0Clu0,T0Step1,DelayCable,TBunch)
      istat = T0MCRD(TPhased_mc)
C-----------------------------------------------------------------------
C Fill Block EMC Clusters
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         NClu = 0.
         NCluMc = 0.
         DO iEVTCLU=1, 100
            EneCl(iEVTCLU) = 0.
            TCl(iEVTCLU) = 0.
            XCl(iEVTCLU) = 0.
            YCl(iEVTCLU) = 0.
            ZCl(iEVTCLU) = 0.
            XaCl(iEVTCLU) = 0.
            YaCl(iEVTCLU) = 0.
            ZaCl(iEVTCLU) = 0.
            XRmCl(iEVTCLU) = 0.
            YRmsCl(iEVTCLU) = 0.
            ZrmsCl(iEVTCLU) = 0.
            TrmsCl(iEVTCLU) = 0.
            FlagCl(iEVTCLU) = 0.
            NPar(iEVTCLU) = 0.
            PNum1(iEVTCLU) = 0.
            Pid1(iEVTCLU) = 0.
            PNum2(iEVTCLU) = 0.
            Pid2(iEVTCLU) = 0.
            PNum3(iEVTCLU) = 0.
            Pid3(iEVTCLU) = 0.
         END DO
   
         istat = GETCLUSTRU(Evt%Clu)
   
         NClu = Evt%Clu%n 
         IF ( NClu < 0 .OR. NClu > 100 ) THEN
            WRITE(*,*) 'ERROR CLU - NClu Out of bound : ', NClu
         END IF
         NCluMc = Evt%Clu%nmc
         IF ( NCluMc < 0 .OR. NCluMc > 100 ) THEN
            WRITE(*,*) 'ERROR CLU - NCluMc Out of bound : ', NCluMc
         END IF
         IF (NClu > 0 .AND. NClu <= 100) THEN
            DO iEVTCLU=1, NClu
               EneCl(iEVTCLU) = Evt%Clu%E (iEVTCLU)
               TCl(iEVTCLU) = Evt%Clu%T (iEVTCLU)
               XCl(iEVTCLU) = Evt%Clu%X (iEVTCLU)
               YCl(iEVTCLU) = Evt%Clu%Y (iEVTCLU)
               ZCl(iEVTCLU) = Evt%Clu%Z (iEVTCLU)
               XaCl(iEVTCLU) = Evt%Clu%Xa(iEVTCLU)
               YaCl(iEVTCLU) = Evt%Clu%Ya(iEVTCLU)
               ZaCl(iEVTCLU) = Evt%Clu%Za(iEVTCLU)
               XRmCl(iEVTCLU) = Evt%Clu%Xrms(iEVTCLU)
               YRmsCl(iEVTCLU) = Evt%Clu%Yrms(iEVTCLU)
               ZrmsCl(iEVTCLU) = Evt%Clu%Zrms(iEVTCLU)
               TrmsCl(iEVTCLU) = Evt%Clu%Trms(iEVTCLU)
               FlagCl(iEVTCLU) = Evt%Clu%Flag(iEVTCLU)
            END DO
         ELSE
            WRITE(*,*) 'ERROR EVTCLU - NClu Index not valid : ', NClu
         END IF
   
         IF (NCluMc > 0 .AND. NCluMc <= 100) THEN
            DO iEVTCLU=1, NCluMc
               NPar(iEVTCLU) = Evt%Clu%Npart(iEVTCLU)
               IF ( NPar(iEVTCLU) < 0 .OR. NPar(iEVTCLU) > 10 ) THEN
                  WRITE(*,*) 'ERROR EVTCLU - NPar[0] Out of bound : ', NPar(iEVTCLU)
               END IF
               PNum1(iEVTCLU) = Evt%Clu%part1(iEVTCLU)
               IF ( PNum1(iEVTCLU) < 0 .OR. PNum1(iEVTCLU) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLU - PNum1[1] Out of bound : ', PNum1(iEVTCLU)
               END IF
               Pid1(iEVTCLU) = Evt%Clu%pid1(iEVTCLU)
               IF ( Pid1(iEVTCLU) < 0 .OR. Pid1(iEVTCLU) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLU - Pid1[2] Out of bound : ', Pid1(iEVTCLU)
               END IF
               PNum2(iEVTCLU) = Evt%Clu%part2(iEVTCLU)
               IF ( PNum2(iEVTCLU) < 0 .OR. PNum2(iEVTCLU) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLU - PNum2[3] Out of bound : ', PNum2(iEVTCLU)
               END IF
               Pid2(iEVTCLU) = Evt%Clu%pid2(iEVTCLU)
               IF ( Pid2(iEVTCLU) < 0 .OR. Pid2(iEVTCLU) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLU - Pid2[4] Out of bound : ', Pid2(iEVTCLU)
               END IF
               PNum3(iEVTCLU) = Evt%Clu%part3(iEVTCLU)
               IF ( PNum3(iEVTCLU) < 0 .OR. PNum3(iEVTCLU) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLU - PNum3[5] Out of bound : ', PNum3(iEVTCLU)
               END IF
               Pid3(iEVTCLU) = Evt%Clu%pid3(iEVTCLU)
               IF ( Pid3(iEVTCLU) < 0 .OR. Pid3(iEVTCLU) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLU - Pid3[6] Out of bound : ', Pid3(iEVTCLU)
               END IF        
            END DO
         ELSE
            WRITE(*,*) 'ERROR EVTCLU - NCluMc Index not valid : ', NCluMc
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Pre-Clusters
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         NPClu = 0.
         DO iPRECLU=1, 100
           EPre(iPRECLU) = 0.
           TPre(iPRECLU) = 0.
           XPre(iPRECLU) = 0.
           YPre(iPRECLU) = 0.
           ZPre(iPRECLU) = 0.
           TAPre(iPRECLU) = 0.
           TBPre(iPRECLU) = 0.
           TARPre(iPRECLU) = 0.
           TBRPre(iPRECLU) = 0.
         END DO
   
         istat = GETPRECLUSTRU(Evt%PreClu)
   
         NPClu = Evt%PreClu%n 
         IF ( NPClu < 0 .OR. NPClu > 100 ) THEN
            WRITE(*,*) 'ERROR PRECLU - NPClu Out of bound : ', NPClu
         END IF
         IF (NPClu > 0 .AND. NPClu <= 100) THEN
           DO iPRECLU=1, NPClu
             EPre(iPRECLU) = Evt%PreClu%E (iPRECLU)
             TPre(iPRECLU) = Evt%PreClu%T (iPRECLU)
             XPre(iPRECLU) = Evt%PreClu%X (iPRECLU)
             YPre(iPRECLU) = Evt%PreClu%Y (iPRECLU)
             ZPre(iPRECLU) = Evt%PreClu%Z (iPRECLU)
             TAPre(iPRECLU) = Evt%PreClu%TA(iPRECLU)
             TBPre(iPRECLU) = Evt%PreClu%TB(iPRECLU)
             TARPre(iPRECLU) = Evt%PreClu%TrmsA(iPRECLU)
             TBRPre(iPRECLU) = Evt%PreClu%TrmsB(iPRECLU)
           END DO
         ELSE
           WRITE(*,*) 'ERROR PRECLU - NPClu Index not valid : ', NPClu
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block CWRK
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         NCHit = 0.
         DO iCWRK=1, 300
            IClu(iCWRK) = 0.
            ICel(iCWRK) = 0.
            CAdd(iCWRK) = 0.
            CmcHit(iCWRK) = 0.
            Ckine(iCWRK) = 0.
            Ene(iCWRK) = 0.
            T(iCWRK) = 0.
            X(iCWRK) = 0.
            Y(iCWRK) = 0.
            Z(iCWRK) = 0.
         END DO
   
         istat = GETCWRKSTRU(Evt%Cwrk)
   
         NCHit = Evt%CWRK%n 
         IF ( NCHit < 0 .OR. NCHit > 300 ) THEN
            WRITE(*,*) 'ERROR CLU - NCHit Out of bound : ', NCHit
         END IF
         IF (NCHit > 0 .AND. NCHit <= 300) THEN
            DO iCWRK=1, NCHit
               IClu(iCWRK) = Evt%CWRK%icl(iCWRK)
               ICel(iCWRK) = Evt%CWRK%cele(iCWRK)
               CAdd(iCWRK) = Evt%CWRK%add(iCWRK)
               CmcHit(iCWRK) = Evt%CWRK%nhit(iCWRK)
               Ckine(iCWRK) = Evt%CWRK%kine(iCWRK)
               Ene(iCWRK) = Evt%CWRK%E(iCWRK)
               T(iCWRK) = Evt%CWRK%T(iCWRK)
               X(iCWRK) = Evt%CWRK%X(iCWRK)
               Y(iCWRK) = Evt%CWRK%Y(iCWRK)
               Z(iCWRK) = Evt%CWRK%Z(iCWRK)
            END DO
         ELSE
            WRITE(*,*) 'ERROR CWRK - NCHit Index not valid : ', NCHit
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block cele
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         NCel = 0.
         NCelMc = 0.
         DO iCELE=1, 300
            ICl(iCELE) = 0.
            Det(iCELE) = 0.
            Wed(iCELE) = 0.
            Pla(iCELE) = 0.
            Col(iCELE) = 0.
            Ea(iCELE) = 0.
            Ta(iCELE) = 0.
            Eb(iCELE) = 0.
            Tb(iCELE) = 0.
            EMc(iCELE) = 0.
            TMc(iCELE) = 0.
            XMc(iCELE) = 0.
            YMc(iCELE) = 0.
            ZMc(iCELE) = 0.
            PTyp(iCELE) = 0.
            KNum(iCELE) = 0.
            NHit(iCELE) = 0.
         END DO
   
         istat = GETCELESTRU(Evt%Cele)
   
         NCel = Evt%Cele%n 
         IF ( NCel < 0 .OR. NCel > 300 ) THEN
            WRITE(*,*) 'ERROR CELE - NCel Out of bound : ', NCel
         END IF
         NCelMc = Evt%Cele%nmc
         IF ( NCelMc < 0 .OR. NCelMc > 300 ) THEN
            WRITE(*,*) 'ERROR CELE - NCelMc Out of bound : ', NCelMc
         END IF
         IF (NCel > 0 .AND. NCel <= 300) THEN
            DO iCELE=1, NCel
              ICl(iCELE) = Evt%Cele%icl(iCELE)
              Det(iCELE) = Evt%Cele%det(iCELE)
              Wed(iCELE) = Evt%Cele%wed(iCELE)
              Pla(iCELE) = Evt%Cele%pla(iCELE)
              Col(iCELE) = Evt%Cele%col(iCELE)
              Ea(iCELE) = Evt%Cele%Ea(iCELE)
              Ta(iCELE) = Evt%Cele%ta(iCELE)
              Eb(iCELE) = Evt%Cele%Eb(iCELE)
              Tb(iCELE) = Evt%Cele%tb(iCELE)
            END DO
         ELSE
            WRITE(*,*) 'ERROR CELE - NCel Index not valid : ', NCel
         END IF
   
         IF (NCelMc > 0 .AND. NCelMc <= 300) THEN
            DO iCELE=1, NCelMc
               EMc(iCELE) = Evt%Cele%Etrue(iCELE)
               TMc(iCELE) = Evt%Cele%Ttrue(iCELE)
               XMc(iCELE) = Evt%Cele%xtrue(iCELE)
               YMc(iCELE) = Evt%Cele%ytrue(iCELE)
               ZMc(iCELE) = Evt%Cele%ztrue(iCELE)
               PTyp(iCELE) = Evt%Cele%ptyp(iCELE)
               KNum(iCELE) = Evt%Cele%knum(iCELE)
               NHit(iCELE) = Evt%Cele%numpar(iCELE)
            END DO
         ELSE
            WRITE(*,*) 'ERROR CELE - NCelMc Index not valid : ', NCelMc
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dtce
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         nDTCE = 0.
         nSmall = 0.
         DO iDTCE=1, 1500
            iLayerDTCE(iDTCE) = 0.
            iWireDTCE(iDTCE) = 0.
            tDTCE(iDTCE) = 0.
         END DO
   
         CALL GETDTCESTRU(Evt%DTCE)
   
         nDTCE = Evt%DTCE%nDTCE
         IF ( nDTCE < 0 .OR. nDTCE > 1500 ) THEN
            WRITE(*,*) 'ERROR DTCE - nDTCE Out of bound : ', nDTCE
         END IF
         nSmall = Evt%DTCE%nSmall
         IF ( nSmall < 0 .OR. nSmall > 1500 ) THEN
            WRITE(*,*) 'ERROR DTCE - nSmall Out of bound : ', nSmall
         END IF
   
         IF (nDTCE > 0 .AND. nDTCE <= 1500) THEN
            DO iDTCE=1, nDTCE
               iLayerDTCE(iDTCE) = Evt%DTCE%iLayerDTCE(iDTCE)
               IF ( iLayerDTCE(iDTCE) < 1 .OR. iLayerDTCE(iDTCE) > 58 ) THEN
                  WRITE(*,*) 'ERROR DTCE - iLayerDTCE[2] Out of bound : ', iLayerDTCE(iDTCE)
               END IF
               iWireDTCE(iDTCE) = Evt%DTCE%iWireDTCE(iDTCE)
               IF ( iWireDTCE(iDTCE) < 1 .OR. iWireDTCE(iDTCE) > 378 ) THEN
                 WRITE(*,*) 'ERROR DTCE - iWireDTCE[3] Out of bound : ', iWireDTCE(iDTCE)
               END IF
               tDTCE(iDTCE) = Evt%DTCE%tDTCE(iDTCE)
            END DO
         ELSE
            WRITE(*,*) 'ERROR DTCE - nDTCE Index not valid: ', nDTCE
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dtce0
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         nDTCE0 = 0.
         DO iDTCE0=1, 1500
            iLayerDTCE0(iDTCE0) = 0.
            iWireDTCE0(iDTCE0) = 0.
            tDTCE0(iDTCE0) = 0.
         END DO
   
   C     DTCEStru is initialized in raw2dtce.cin
   
         nDTCE0 = DTCEStru%NEle
         IF ( nDTCE0 < 0 .OR. nDTCE0 > 1500 ) THEN
            WRITE(*,*) 'ERROR DTCE0 - nDTCE0 Out of bound : ', nDTCE0
         END IF
   
         IF ( nDTCE0 > 0 .AND. nDTCE0 <= 1500 ) THEN
            DO iDTCE0=1, nDTCE0
               iLayerDTCE0(iDTCE0) = DTCEStru%Lay(iDTCE0)
               IF ( iLayerDTCE0(iDTCE0) < 1 .OR. iLayerDTCE0(iDTCE0) > 58 ) THEN
                  WRITE(*,*) 'ERROR DTCE0 - iLayerDTCE0[1] Out of bound : ', iLayerDTCE0(iDTCE0)
               END IF
               iWireDTCE0(iDTCE0) = DTCEStru%Wir(iDTCE0)
               IF ( iWireDTCE0(iDTCE0) < 1 .OR. iWireDTCE0(iDTCE0) > 378 ) THEN
                  WRITE(*,*) 'ERROR DTCE0 - iWireDTCE0[2] Out of bound : ', iWireDTCE0(iDTCE0)
               END IF
               tDTCE0(iDTCE0) = DTCEStru%Time(iDTCE0)
            END DO
         ELSE
            WRITE(*,*) 'ERROR DTCE0 - nDTCE0 Index not valid: ', nDTCE0
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dchits
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         nDCHR = 0.
         nSmallDCm = 0.
         nSmallDCp = 0.
         nBigDCm = 0.
         nBigDCp = 0.
         nCellDC = 0.
         nSmallDC = 0.
   
   C     Already filled Evt%DTCE and DTCEStru in previous blocks
   
         nDCHR = DTCEStru%nDCHR
         nSmallDCm = DTCEStru%nSmallDCm
         nSmallDCp = DTCEStru%nSmallDCp
         nBigDCm = DTCEStru%nBigDCm
         nBigDCp = DTCEStru%nBigDCp
         nCellDC = Evt%DTCE%nDTCE
         nSmallDC = Evt%DTCE%nSmall
      END IF
C-----------------------------------------------------------------------
C Fill Block dhsp
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN ! TODO: Change .TRUE. with flag name
         nDHSP = 0.
         DO iDHSP=1, 500
            TrkDh(iDHSP) = 0.
            Layer(iDHSP) = 0.
            Wire(iDHSP) = 0.
            Time(iDHSP) = 0.
            DPar(iDHSP) = 0.
            Res(iDHSP) = 0.
            XDh(iDHSP) = 0.
            YDh(iDHSP) = 0.
            ZDh(iDHSP) = 0.
         END DO
   
         CALL GETDHRESTRU(Evt%DHRE) 
   
         nDHSP = Evt%DHSP%numDHSP
         IF ( nDHSP < 0 .OR. nDHSP > 1500 ) THEN
            WRITE(*,*) 'ERROR DHSP - nDHSP Out of bound : ', nDHSP
         END IF
   
         IF (nDHSP > 0 .AND. nDHSP <= 500) THEN
           DO iDHSP=1, nDHSP
              TrkDh(iDHSP) = Evt%DHSP%itrk(iDHSP)
              Layer(iDHSP) = Evt%Dhsp%layer(iDHSP)
              Wire(iDHSP) = Evt%Dhsp%wire(iDHSP)
              Time(iDHSP) = Evt%Dhsp%time(iDHSP)
              DPar(iDHSP) = Evt%Dhsp%drift(iDHSP)
              Res(iDHSP) = Evt%Dhsp%res(iDHSP)
              XDh(iDHSP) = Evt%Dhsp%x(iDHSP)
              YDh(iDHSP) = Evt%Dhsp%y(iDHSP)
              ZDh(iDHSP) = Evt%Dhsp%z(iDHSP)
           END DO
         ELSE
            WRITE(*,*) 'ERROR DHSP - nDHSP Index not valid: ', nDHSP
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkv
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN  ! TODO: Change .TRUE. with the name of block flag
         nTv = 0.
         DO iTRKV=1, 30
           iV(iTRKV) = 0.
           TrkNumV(iTRKV) = 0.
           CurV(iTRKV) = 0.
           PhiV(iTRKV) = 0.
           CoTv(iTRKV) = 0.
           PxTv(iTRKV) = 0.
           PyTv(iTRKV) = 0.
           PzTv(iTRKV) = 0.
           pModV(iTRKV) = 0.
           LenV(iTRKV) = 0.
           ChiV(iTRKV) = 0.
           PidTv(iTRKV) = 0.
           Cov11Tv(iTRKV) = 0.
           Cov12Tv(iTRKV) = 0.
           Cov13Tv(iTRKV) = 0.
           Cov22Tv(iTRKV) = 0.
           Cov23Tv(iTRKV) = 0.
           Cov33Tv(iTRKV) = 0.
         END DO

         istat = TRKV2STRU(evt%vtx,evt%trkv,evt%trk,evt%trkmc)

         nTv = Evt%Trkv%n
         IF ( nTv < 0 .OR. nTv > 30 ) THEN
            WRITE(*,*) 'ERROR TRKV - nTv Out of bound : ', nTv
         END IF

         IF (nTv > 0 .AND. nTv <= 30) THEN
            DO iTRKV=1, nTv
               iV(iTRKV) = Evt%Trkv%iv(iTRKV)
               IF ( iV(iTRKV) < 0 .OR. iV(iTRKV) > 30 ) THEN
                  WRITE(*,*) 'ERROR TRKV - iV[1] Out of bound : ', iV(iTRKV)
               END IF
               TrkNumV(iTRKV) = Evt%Trkv%trkpoi(iTRKV)
               IF ( TrkNumV(iTRKV) < 0 .OR. TrkNumV(iTRKV) > 999 ) THEN
                  WRITE(*,*) 'ERROR TRKV - TrkNumV[2] Out of bound : ', TrkNumV(iTRKV)
               END IF
                 CurV(iTRKV) = Evt%Trkv%cur(iTRKV)
                 PhiV(iTRKV) = Evt%Trkv%phi(iTRKV)
                 CoTv(iTRKV) = Evt%Trkv%cot(iTRKV)
                 PxTv(iTRKV) = Evt%Trkv%px(iTRKV)
                 PyTv(iTRKV) = Evt%Trkv%py(iTRKV)
                 PzTv(iTRKV) = Evt%Trkv%pz(iTRKV)
                 pModV(iTRKV) = Evt%Trkv%pmod(iTRKV)
                 LenV(iTRKV) = Evt%Trkv%Length(iTRKV)
                 ChiV(iTRKV) = Evt%Trkv%Chi2(iTRKV)
                 PidTv(iTRKV) = Evt%Trkv%ipid(iTRKV)
                 Cov11Tv(iTRKV) = Evt%Trkv%cov11(iTRKV)
                 Cov12Tv(iTRKV) = Evt%Trkv%cov12(iTRKV)
                 Cov13Tv(iTRKV) = Evt%Trkv%cov13(iTRKV)
                 Cov22Tv(iTRKV) = Evt%Trkv%cov22(iTRKV)
                 Cov23Tv(iTRKV) = Evt%Trkv%cov23(iTRKV)
                 Cov33Tv(iTRKV) = Evt%Trkv%cov33(iTRKV)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKV - nTv Index not valid: ', nTv
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Root
C-----------------------------------------------------------------------
      call fillntu() 	
C==============================================================================
CC End of code
C==============================================================================
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRE
C==============================================================================
C
$$IMPLICIT
C
C==============================================================================
C
      RETURN 
      END
C

C==============================================================================
      SUBROUTINE SAMHB
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'C$INC:ERLEVL.INC'
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'sample.inc'
C
C Local declarations
C
      INTEGER    Status, MinHisId, MaxHisId
C      INTEGER    NtuId ! Comment to avoid conflict with raw2dtce.cin
      LOGICAL    HisFlg
C
C==============================================================================
C
      RETURN 
      END
C
C==============================================================================
      SUBROUTINE SAMTK
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'A_C_LIBRARY:ANERROR.INC'
$$INCLUDE 'S_I$LIBRARY:NOARGINC.INC'
$$include 'sample_talk.inc'
C
C External functions
C
      INTEGER   UIDFFI, UIUSGP, UIACME, UIGTYE
C
C Local declarations
C
      INTEGER   Status, MENUF, MENUL, IGROUP
      CHARACTER Verb*40, Prompt*100
C
C==============================================================================
C
      Status=UIDFFI( 
     $     '$SAMPLE/sample.uid'
     $     ,IGROUP,MENUF,N$A,N$A,MENUL,N$A )
      Status = UIUSGP(IGROUP,N$A)
 10   Status = UIACME(MENUF,Verb,N$A) ! Display menu
C     
      if(verb.eq.'SHOW')then
	goto 10
      else if(verb.eq.'TRIG')then
      	write(Prompt,123)'TRIG'
	Status=UIGTYE(Prompt,TRIGFLAG)
	goto 10
      else if(verb.eq.'TELE')then
      	write(Prompt,123)'TELE'
	Status=UIGTYE(Prompt,TELEFLAG)
	goto 10
      else if(verb.eq.'C2TRG')then
      	write(Prompt,123)'C2TRG'
	Status=UIGTYE(Prompt,C2TRGFLAG)
	goto 10
      else if(verb.eq.'TELLINA')then
      	write(Prompt,123)'TELLINA'
	Status=UIGTYE(Prompt,TELLINAFLAG)
	goto 10
      else if(verb.eq.'PIZZA')then
      	write(Prompt,123)'PIZZA'
	Status=UIGTYE(Prompt,PIZZAFLAG)
	goto 10
      else if(verb.eq.'ECLS')then
      	write(Prompt,123)'ECLS'
	Status=UIGTYE(Prompt,ECLSFLAG)
	goto 10
      else if(verb.eq.'BPOS')then
      	write(Prompt,123)'BPOS'
	Status=UIGTYE(Prompt,BPOSFLAG)
	goto 10

      end if
C
123   FORMAT(1x,'Select ',a4,' Ntuple-block?')
C
      RETURN
      END
C     

C=============================================================================
      SUBROUTINE SAMFI
C===========================================================================
	write(*,*)'Run End routine'
      	call closetree() 

      RETURN
      END
C
C===========================================================================














