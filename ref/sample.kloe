
C==============================================================================
C  SAMPLE
C==============================================================================
C
C  Description:
C  ------------
C Prod2ntu version for root tuple
C  Language:
C  ---------
C  KLOE Fortran
C
C  Author:
C  -------
C Elena Perez del Rio
C
C
C==============================================================================
      SUBROUTINE SAMIN
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT

$$include 'sample.inc'
C
C==============================================================================
C
      write(*,*)"SAMIN"
      call inittree()
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRI
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'k$inc:jobsta.inc'
C
C External functions
C
      INTEGER    ANPIST
C
C Local declarations
C
      INTEGER    Status, istat, fillbposcommon
C
C==============================================================================
C
C Put A_C Error Code to SUCCESS at Run_Init
C
      Status = ANPIST(ANSUCC)
      istat = fibposcommon(nrun)
C
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMEV
C==============================================================================
C
$$IMPLICIT
$$include 'ybos$library:errcod.inc'
$$include 'c$inc:bcs.inc'
$$include 'c$inc:erlevl.inc'
$$include 'k$inc:oferco.inc'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'k$inc:bpoybs.inc'
c$$Include 'maxstructdim.inc'
$$include 'k$itls:maxstructdim.inc'
$$include 'k$itrg:maxtrgchan.inc'
$$include 'k$itls:emcstruct.inc'        ! Emc Clusters
$$include 'k$itls:evtstruct.inc'  	! Event Information
$$include 'k$itls:geanfistruct.inc'            ! Geanfi Information
$$include 'k$itls:vtxstru.inc'		        ! Charge Verticies
$$include 'k$itls:celestruct.inc'	! Calorimeter Elements
$$include 'k$itls:trkstru.inc'		        ! Tracks
$$include 'k$itls:dprs_struct.inc'             ! DPRS patterns
$$include 'k$itls:dhspstru.inc'
$$include 'k$itls:tclostruct.inc'	! Tracks-to-Clusters
$$include 'k$itls:cfhistruct.inc'       ! Calorimeter First Hit
$$include 'k$itls:qihistruct.inc'       ! QIHI common block
$$include 'k$itls:qcalstruct.inc'       ! QCAL common block
$$include 'k$itrg:telestruct.inc'
$$include 'k$itrg:pizzastruct.inc'
$$include 'k$itls:preclustruct.inc'
$$include 'k$itls:nvostru.inc'
$$include 'k$itls:eclostru.inc'
$$include 'k$itls:t0struct.inc'
$$include 'k$itls:cwrkstruct.inc'
$$include 'k$itls:tellina.inc'
$$include 'k$itls:pizzetta.inc'
$$include 'k$itrg:trgstruct.inc'
$$include 'k$itls:eclsstru.inc'
$$include 'k$itls:gdchitstru.inc'
$$include 'k$itls:bposstruct.inc'
$$include 'k$itls:trkqstru.inc'
$$include 'k$itls:dtcestruct.inc'
$$include 'k$itls:dhrestruct.inc'
$$include 'k$itls:sec2clustru.inc'
$$include 'k$itls:cspsstruct.cin'
$$include 'k$itls:cluostruct.cin'
$$include 'k$itls:cluomcstruct.cin'
$$include 'k$itls:dhitstruct.cin'
$$include 'k$itls:dedx2stru.inc'
$$INCLUDE 'K$ITLS:eleqcaltstru.inc' !QCALT
c$$INCLUDE 'K$ITLS:qcalthitstru.cin' !QCALT hit Struc
$$INCLUDE 'K$ITLS:ele2hitqcalt.cin'    ! QCALT hit structure
$$INCLUDE 'K$ITLS:CCALTNUM.INC'        ! CCALT stu dimensioner
$$INCLUDE 'K$ITLS:ccaltstru.inc'   ! CCALT Stru
$$INCLUDE 'k$itls:letestruct.cin'  !LET Stru
c$$INCLUDE 'k$itls:raw2itce.cin'  ! IT Stru
$$INCLUDE 'k$itls:itcestruct.cin'  ! IT Stru
$$INCLUDE 'k$itls:hetenum.cin'      ! HET max dim
$$INCLUDE 'k$itls:hetestru.cin'  !LET Stru
$$include 'k$itls:prod2ntu.inc'
$$include 'k$itls:prod2ntu_talk.inc'
C
$$include 'sample.inc'
    
C
      INTEGER istat, OldRunNumber
      data OldRunNumber/0/
      save OldRunNumber
      integer ind1,inddat
      Integer trgwrd1,trgwrd2,numdhit
      common /trgcom/trgwrd1,trgwrd2,numdhit
      LOGICAL mcflag_1
      INTEGER mcflag_tg
C
C External functions
C
      INTEGER T0GLRD, T0MCRD
      INTEGER GETCLUSTRU,GETMCSTRU,GETCELESTRU,GETEVCL,GETCLUOSTRU
      INTEGER TRKV2STRU,GETTCLOSTRU,GETCFHISTRU,BLOCAT
      INTEGER ParSet, GETQIHISTRU,GETQCALSTRU
      INTEGER GETQCAESTRU, GETDHSPSTRU
      INTEGER GETTELESTRU, GETPRECLUSTRU
      INTEGER GETPIZZASTRU, TPIE_UPK
      INTEGER pizza_reset,torta_reset,tele_reset
      Integer GET_DPRS_STRUCT,GETNVO
      Integer GETECLO,GETCLUSTRUCORR
      INTEGER BIGEST,banknum, fillbposcommon
      INTEGER GETQCALTSTRU,getqcthstru,GETCCALTSTRU,getletestru,itce_upk
      INTEGER gethetestru, hete_dump

      INTEGER    ANGIST, ANGOHS, ANGPAR, anptrg
      INTEGER GETECLS,GETTIME,GETPIZZETTA
      INTEGER GETTELLINA,GETCWRKSTRU,GETTRIGGER,TRKQ2STRU
      INTEGER Ncwrkhit,j
      REAL Rstat,getbpos
      INTEGER GETSEC2CLUSTRU
      INTEGER GETCSPSSTRU, GETCLUOMCSTRU

      INTEGER TRKVOLD2STRU, GETOLDTCLOSTRU, DHIT_RESET, DHIT_UPK
      INTEGER DEDX2STRU_GET, DEDX2STRU_RESET
      INTEGER BNKNUM
      

      INTEGER AlgoNum,StreamNum,TimeSec,TimeMusec,Ndtce,EventType
      integer icurr
      real    currpos,currele,luminosity
      COMMON /EventInfo/StreamNum,AlgoNum,
     &     TimeSec,TimeMusec,Ndtce,mcflag_tg,currpos,currele,luminosity

C
C Local declarations
C
      integer bb
      common/elena/ bb
C
C=============================================================================
C Start of Code:
C ==============

      IF( exptyp.eq.exofsi )then ! Simulation
         mcflag_1 = .true.
      else
         mcflag_1 = .false.
      endif

      If (mcflag_1) then
         mcflag_tg=1
      Else
         mcflag_tg=0
      EndIf
C-----------------------------------------------------------------------
C Fill event classification information
C-----------------------------------------------------------------------

C
	bb=nrun

C      write(*,*)'FORTRAN',bb

      IF( mcflag_1 )  THEN
         istat = GETEVCL(evt%Info)
         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
         IF( TRIGFLAG ) THEN
           trgwrd1 = IW( inddat+1 )
           trgwrd2 = IW( inddat+2 )
         ENDIF
         
      ELSE
         istat = GETTIME(timesec,timemusec)
         timesec = timesec-946080000  ! Reduce the timing
         ISTAT = BIGEST(IW,'EVCL',BNKNUM)
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('PROD2NTU_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')

         END IF
         ISTAT = BLOCAT(IW,'EVCL',BNKNUM,IND1,INDDAT )
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('PROD2NTU_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')
            

         END IF
        
         icurr = IW(INDDAT+5)
         currpos=iand(icurr,'FFFF'x)*1.e-4
         currele=(icurr/2**16)*1.e-4
         luminosity = iw(inddat+6)*1.e-6         
      ENDIF
C-----------------------------------------------------------------------
C Fill Event Infos
C-----------------------------------------------------------------------
      if(mcflag_1)then
         istat=blocat(iw,'BRID',1,ind1,inddat)
         Evt%Info%RunNumber = iw(inddat)
         if(Evt%Info%RunNumber.ne.OldRunNumber)then
            istat = fillbposcommon(Evt%Info%RunNumber)
            OldRunNumber = Evt%Info%RunNumber
         end if
      else
         Evt%Info%RunNumber   = Nrun
      end if
      Evt%Info%EventNumber = Nev
C      istat = GETECLS(evt%ecls)


CPG 240718 To fill the commom for Root
       RunNumber = Evt%Info%RunNumber
       EventNumber = Evt%Info%EventNumber
       pileup = Evt%Info%Pileup
       gcod = Evt%Info%GenCod
       phid = Evt%Info%PhiDecay
       write(*,*)"fortran ", PhiD
       a1typ = Evt%Info%A1type
       a2typ = Evt%Info%A2type
       a3typ = Evt%Info%A3type
       b1typ = Evt%Info%B1type
       b2typ = Evt%Info%B2type
       b3typ = Evt%Info%B3type

C      IF( ECLSFLAG ) THEN
        istat = GETECLS(evt%ecls)
C      ENDIF
CPG 270718 To fill the commom for Root
      necls = 0
      EclTrgw = 0
      EclFilfo = 0
      do iecls=1,8
         EclWord(iecls) = 0
         EclStream(iecls) = 0
         EclTagNum(iecls) = 0
         EclEvType(iecls) = 0
      end do

      necls = evt%ecls%n
      EclTrgw = evt%ecls%trigger
      EclFilfo = evt%ecls%filfo
      do iecls=1,necls
         EclWord(iecls) = evt%ecls%totword(iecls)
         EclStream(iecls) = evt%ecls%stream(iecls)
         EclTagNum(iecls) = evt%ecls%TagNum(iecls)
         EclEvType(iecls) = evt%ecls%EvnTyp(iecls)
      end do

      istat = T0GLRD(T0Dc0,T0Hit0,T0Clu0,T0Step1,DelayCable,TBunch)
      istat = T0MCRD(TPhased_mc)
CPG 240718 To fill the commom for Root
      Evt%T0stru%dc_step0   = T0Dc0
      Evt%T0stru%hit_step0  = T0Hit0
      Evt%T0stru%clus_step0 = T0Clu0
      Evt%T0stru%step1      = T0Step1
      Evt%T0stru%cable      = DelayCable
      Evt%T0stru%tbunch     = TBunch
      Evt%T0stru%tphased_mc = TPhased_mc

      call fillntu() 	



CC End of code
C============
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRE
C==============================================================================
C
$$IMPLICIT
C
C==============================================================================
C
      RETURN 
      END
C

C==============================================================================
      SUBROUTINE SAMHB
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'C$INC:ERLEVL.INC'
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'sample.inc'
C
C
C External functions
C
      INTEGER    ANGOHS
C
C Local declarations
C
      INTEGER    Status, MinHisId, MaxHisId
      INTEGER    NtuId
      LOGICAL    HisFlg
C
C==============================================================================
C
      RETURN 
      END
C
C==============================================================================
      SUBROUTINE SAMTK
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'A_C_LIBRARY:ANERROR.INC'
$$INCLUDE 'S_I$LIBRARY:NOARGINC.INC'
$$include 'sample.inc'
C
C External functions
C
      INTEGER   UIDFFI, UIUSGP, UIACME, UIGTYE
C
C Local declarations
C
      INTEGER   Status, MENUF, MENUL, IGROUP
      CHARACTER Verb*40, Prompt*100
C
C==============================================================================
C
      Status=UIDFFI( 
     $'$SAMPLE/sample.uid'
     $,IGROUP,MENUF,N$A,N$A,MENUL,N$A )
      Status = UIUSGP(IGROUP,N$A)
 10   Status = UIACME(MENUF,Verb,N$A) ! Display menu
C     
      if(verb.eq.'SHOW')then
         goto 10
      end if
      
      RETURN
      END
C     

C=============================================================================
      SUBROUTINE SAMFI
C===========================================================================
	write(*,*)'Run End routine'
      	call closetree() 

      RETURN
      END
C
C===========================================================================














