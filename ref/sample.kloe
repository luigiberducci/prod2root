
C==============================================================================
C  SAMPLE
C==============================================================================
C
C  Description:
C  ------------
C Prod2ntu version for root tuple
C  Language:
C  ---------
C  KLOE Fortran
C
C  Author:
C  -------
C Elena Perez del Rio
C
C
C==============================================================================
      SUBROUTINE SAMIN
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT

$$include 'sample.inc'
$$include 'sample_talk.inc'
C
C==============================================================================
C
      write(*,*)"SAMIN"

      INFOFLAG      = .FALSE.
      DATAFLAG      = .FALSE.
      BPOSFLAG      = .FALSE.
      GDHITFLAG     = .FALSE.
      ECLSFLAG      = .FALSE.
      TRIGFLAG      = .FALSE.
      C2TRGFLAG     = .FALSE.
      TELLINAFLAG   = .FALSE.
      PIZZETTAFLAG  = .FALSE.
      TORTAFLAG     = .FALSE.
      TELEFLAG      = .FALSE.
      PIZZAFLAG     = .FALSE.
      TIMEFLAG      = .FALSE.
      CLUSFLAG      = .FALSE.
      CLUMCFLAG     = .FALSE.
      PRECLUSFLAG   = .FALSE.
      CWRKFLAG      = .FALSE.
      CELEFLAG      = .FALSE.
      CELEMCFLAG    = .FALSE.
      DTCEFLAG      = .FALSE.
      DTCE0FLAG     = .FALSE.
      DCHITSFLAG    = .FALSE.
      DHREFLAG      = .FALSE.
      DHSPFLAG      = .FALSE.
      TRKVFLAG      = .FALSE.
      VTXFLAG       = .FALSE.
      TRKSFLAG      = .FALSE.
      TRKMCFLAG     = .FALSE.
      TRKVOLDFLAG   = .FALSE.
      VTXOLDFLAG    = .FALSE.
      TRKSOLDFLAG   = .FALSE.
      TRKMCOLDFLAG  = .FALSE.
      DHITFLAG      = .FALSE.
      DEDXFLAG      = .FALSE.
      DPRSFLAG      = .FALSE.
      GEANFIFLAG    = .FALSE.
      
C      write(*,*)"[SAMIN] INFOFLAG: ", INFOFLAG
C      write(*,*)"[SAMIN] BPOSFLAG: ", BPOSFLAG
C      write(*,*)" "

      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRI
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'k$inc:jobsta.inc'
C
C External functions
C
      INTEGER    ANPIST
C
C Local declarations
C
      INTEGER    Status, istat, fillbposcommon
C
C==============================================================================
C
C Put A_C Error Code to SUCCESS at Run_Init
C
      Status = ANPIST(ANSUCC)
      istat = fillbposcommon(nrun)
C
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMEV
C==============================================================================
C
$$IMPLICIT
$$include 'ybos$library:errcod.inc'
$$include 'c$inc:bcs.inc'
$$include 'c$inc:erlevl.inc'
$$include 'k$inc:oferco.inc'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'k$inc:bpoybs.inc'
c$$Include 'maxstructdim.inc'
$$include 'k$itls:maxstructdim.inc'
$$include 'k$itrg:maxtrgchan.inc'
$$include 'k$itls:emcstruct.inc'        ! Emc Clusters
$$include 'k$itls:evtstruct.inc'  	! Event Information
$$include 'k$itls:geanfistruct.inc'            ! Geanfi Information
$$include 'k$itls:vtxstru.inc'		        ! Charge Verticies
$$include 'k$itls:celestruct.inc'	! Calorimeter Elements
$$include 'k$itls:trkstru.inc'		        ! Tracks
$$include 'k$itls:dprs_struct.inc'             ! DPRS patterns
$$include 'k$itls:dhspstru.inc'
$$include 'k$itls:tclostruct.inc'	! Tracks-to-Clusters
$$include 'k$itls:cfhistruct.inc'       ! Calorimeter First Hit
$$include 'k$itls:qihistruct.inc'       ! QIHI common block
$$include 'k$itls:qcalstruct.inc'       ! QCAL common block
$$include 'k$itrg:telestruct.inc'
$$include 'k$itrg:pizzastruct.inc'
$$include 'k$itls:preclustruct.inc'
$$include 'k$itls:nvostru.inc'
$$include 'k$itls:eclostru.inc'
$$include 'k$itls:t0struct.inc'
$$include 'k$itls:cwrkstruct.inc'
$$include 'k$itls:tellina.inc'
$$include 'k$itls:pizzetta.inc'
$$include 'k$itrg:trgstruct.inc'
$$include 'k$itls:eclsstru.inc'
$$include 'k$itls:gdchitstru.inc'
$$include 'k$itls:bposstruct.inc'
$$include 'k$itls:trkqstru.inc'
$$include 'k$itls:dtcestruct.inc'
$$include 'k$itls:dhrestruct.inc'
$$include 'k$itls:sec2clustru.inc'
$$include 'k$itls:cspsstruct.cin'
$$include 'k$itls:cluostruct.cin'
$$include 'k$itls:cluomcstruct.cin'
$$include 'k$itls:dhitstruct.cin'
$$include 'k$itls:dedx2stru.inc'
$$INCLUDE 'K$ITLS:eleqcaltstru.inc'     ! QCALT
c$$INCLUDE 'K$ITLS:qcalthitstru.cin'    ! QCALT hit Struc
$$INCLUDE 'K$ITLS:ele2hitqcalt.cin'     ! QCALT hit structure
$$INCLUDE 'K$ITLS:CCALTNUM.INC'         ! CCALT stu dimensioner
$$INCLUDE 'K$ITLS:ccaltstru.inc'        ! CCALT Stru
$$INCLUDE 'k$itls:letestruct.cin'       ! LET Stru
C$$INCLUDE 'k$itls:raw2itce.cin'        ! IT Stru
$$INCLUDE 'k$itls:itcestruct.cin'       ! IT Stru
$$INCLUDE 'k$itls:hetenum.cin'          ! HET max dim
$$INCLUDE 'k$itls:hetestru.cin'         ! LET Stru
$$include 'k$itls:prod2ntu.inc'
$$INCLUDE 'k$itls:raw2dtce.cin'

$$include 'sample.inc'
$$include 'sample_talk.inc'
C
C All the declarations are moved in sample.cin
C What are the following lines? I maintain here at the moment to 
C let fix the "RunNumber" issue. 
C TODO: Move them to sample.cin
C
C NOTE1: trgwrd1/2 are used in block EVTTRG and if no other, 
C they can be removed. Now they are commented
C
      INTEGER istat, OldRunNumber
      data OldRunNumber/0/
      save OldRunNumber
      integer ind1,inddat
C      Integer trgwrd1,trgwrd2,numdhit
C      common /trgcom/trgwrd1,trgwrd2,numdhit
      Integer numdhit
      common /trgcom/numdhit
      LOGICAL mcflag_1
      INTEGER mcflag_tg
C
C=============================================================================
C Start of Code:
C=============================================================================
      IF( exptyp.eq.exofsi )then ! Simulation
         mcflag_1 = .true.
      else
         mcflag_1 = .false.
      endif

      If (mcflag_1) then
         mcflag_tg=1
      Else
         mcflag_tg=0
      EndIf
C-----------------------------------------------------------------------------
C Fill event classification information
C-----------------------------------------------------------------------------
      IF( mcflag_1 )  THEN
         istat = GETEVCL(evt%Info)
C         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
C   Moved to the Block definition
C         IF( TRIGFLAG ) THEN
C           trgwrd1 = IW( inddat+1 )
C           trgwrd2 = IW( inddat+2 )
C         ENDIF
         
      ELSE
         istat = GETTIME(timesec,timemusec)
         timesec = timesec-946080000  ! Reduce the timing
         ISTAT = BIGEST(IW,'EVCL',BNKNUM)
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')

         END IF
         ISTAT = BLOCAT(IW,'EVCL',BNKNUM,IND1,INDDAT )
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')
            

         END IF
        
         icurr = IW(INDDAT+5)
         IPos=iand(icurr,'FFFF'x)*1.e-4
         IEle=(icurr/2**16)*1.e-4
         Lumi= iw(inddat+6)*1.e-6         
      ENDIF
C-----------------------------------------------------------------------
C Fill Block Info
C-----------------------------------------------------------------------
      IF (INFOFLAG) THEN
         IF (mcflag_1) THEN
            istat=blocat(iw,'BRID',1,ind1,inddat)
            Evt%Info%RunNumber = iw(inddat)
            IF (Evt%Info%RunNumber.ne.OldRunNumber) THEN
               istat = fillbposcommon(Evt%Info%RunNumber)
               OldRunNumber = Evt%Info%RunNumber
            END IF
         ELSE
            Evt%Info%RunNumber = Nrun
         END IF
         Evt%Info%EventNumber = Nev
           
         NumRun = Evt%Info%RunNumber
         NumEv = Evt%Info%EventNumber
         Pileup = Evt%Info%Pileup
         IF ( Pileup < 0 .OR. Pileup > 1 ) THEN
            WRITE(*,*) 'ERROR INFO - Pileup Out of bound : ', Pileup
         END IF
         GCod = Evt%Info%GenCod
         IF ( GCod < 0 .OR. GCod > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - GCod Out of bound : ', GCod
         END IF
         PhiD = Evt%Info%PhiDecay
         IF ( PhiD < 0 .OR. PhiD > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - PhiD Out of bound : ', PhiD
         END IF
         A1Typ = Evt%Info%A1type
         IF ( A1Typ < 0 .OR. A1Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - A1Typ Out of bound : ', A1Typ
         END IF
         A2Typ = Evt%Info%A2type
         IF ( A2Typ < 0 .OR. A2Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - A2Typ Out of bound : ', A2Typ
         END IF
         A3Typ = Evt%Info%A3type
         IF ( A3Typ < 0 .OR. A3Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - A3Typ Out of bound : ', A3Typ
         END IF
         B1Typ = Evt%Info%B1type
         IF ( B1Typ < 0 .OR. B1Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - B1Typ Out of bound : ', B1Typ
         END IF
         B2Typ = Evt%Info%B2type
         IF ( B2Typ < 0 .OR. B2Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - B2Typ Out of bound : ', B2Typ
         END IF
         B3Typ = Evt%Info%B3type
         IF ( B3Typ < 0 .OR. B3Typ > 100 ) THEN
            WRITE(*,*) 'ERROR INFO - B3Typ Out of bound : ', B3Typ
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Data
C-----------------------------------------------------------------------
C
C   Is it moved in ECLS? Ask Elena.
C
C-----------------------------------------------------------------------
C Fill Block BPOS
C-----------------------------------------------------------------------
      IF (BPOSFLAG) THEN
         BPx = 0.
         BPy = 0.
         BPz = 0.
         Bx = 0.
         By = 0.
         Bz = 0.
         BWidPx = 0.
         BWidPy = 0.
         BWidPz = 0.
         BSx = 0.
         BSy = 0.
         BSz = 0.
         BLumx = 0.
         BLumz = 0.
         Broots = 0.
         BrootsErr = 0.
 
         rstat = GETBPOS(Evt%Bpos)
 
         BPx = Evt%Bpos%px
         BPy = Evt%Bpos%py
         BPz = Evt%Bpos%pz
         Bx = Evt%Bpos%x
         By = Evt%Bpos%y
         Bz = Evt%Bpos%z
         BWidPx = Evt%Bpos%errpx
         BWidPy = Evt%Bpos%errpy
         BWidPz = Evt%Bpos%errpz
         BSx = Evt%Bpos%errx
         BSy = Evt%Bpos%erry
         BSz = Evt%Bpos%errz
         BLumx = Evt%Bpos%lumx
         BLumz = Evt%Bpos%lumz
         Broots = Evt%Bpos%Ene
         BrootsErr = Evt%Bpos%ErrEne
      END IF
C-----------------------------------------------------------------------
C Fill Block GDHit
C-----------------------------------------------------------------------
      IF (GDHITFLAG) THEN
         DtceHit = 0.
         DhreHit = 0.
         DprsHit = 0.
         DtfsHit = 0.
   
         istat = BIGEST(iw,'DTCE',banknum)
         istat = BLOCAT(iw,'DTCE',banknum,ind1,inddat)
         IF (istat.ne.YESUCC) THEN
            NDtce_copy =0
         ELSE
            NDtce_copy = IW(inddat+DTCNRO)
         ENDIF
         CALL GETGDCHIT(Evt%GHit)
  
         DtceHit = NDtce_copy
         DhreHit = Evt%GHit%nhit
         DprsHit = Evt%GHit%nhpr
         DtfsHit = Evt%GHit%nhtf
      END IF
C-----------------------------------------------------------------------
C Fill Block Ecls
C-----------------------------------------------------------------------
      IF (ECLSFLAG) THEN
         nEcls = 0
         EclTrgw = 0
         EclFilfo = 0
         DO iecls=1,8
            EclWord(iecls) = 0
            EclStream(iecls) = 0
            EclTagNum(iecls) = 0
            EclEvType(iecls) = 0
         END DO
         
         nEcls2 = 0
         EclTrgw2 = 0
         EclFilfo2 = 0
         DO iecls2=1,8
            EclWord2(iecls2) = 0
            EclStream2(iecls2) = 0
            EclTagNum2(iecls2) = 0
            EclEvType2(iecls2) = 0
         END DO

         istat = GETECLS(evt%ecls)
         
         nEcls = evt%ecls%n
         IF ( nEcls < 0 .OR. nEcls > 8 ) THEN
            WRITE(*,*) 'ERROR INFO - nEcls Out of bound : ', nEcls
         END IF

         IF (nEcls > 0 .AND. nEcls <= 8) THEN
            EclTrgw = evt%ecls%trigger
            EclFilfo = evt%ecls%filfo
            DO iecls=1,necls
               EclWord(iecls) = evt%ecls%TotWord(iecls)
               EclStream(iecls) = evt%ecls%Stream(iecls)
               EclTagNum(iecls) = evt%ecls%TagNum(iecls)
               EclEvType(iecls) = evt%ecls%EvnTyp(iecls)
            END DO
         ELSE
            WRITE(*,*) 'ERROR ECLS - nEcls Index not valid: ', nEcls
         END IF
         
         nEcls2 = evt%ecls%n2
         IF ( nEcls2 < 0 .OR. nEcls2 > 8 ) THEN
            WRITE(*,*) 'ERROR INFO - nEcls2 Out of bound : ', nEcls2
         END IF

         IF (nEcls2 > 0 .AND. nEcls <= 8) THEN
            EclTrgw2 = evt%ecls%trigger2
            EclFilfo2 = evt%ecls%filfo2
            DO iecls2=1,necls2
               EclWord2(iecls2) = evt%ecls%TotWord2(iecls2)
               EclStream2(iecls2) = evt%ecls%Stream2(iecls2)
               EclTagNum2(iecls2) = evt%ecls%TagNum2(iecls2)
               EclEvType2(iecls2) = evt%ecls%EvnTyp2(iecls2)
            END DO
         ELSE
            WRITE(*,*) 'ERROR ECLS - nEcls2 Index not valid: ', nEcls2
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Trig
C-----------------------------------------------------------------------
      IF (TRIGFLAG) THEN
         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
         Trgw1 = IW( inddat+1 )
         Trgw2 = IW( inddat+2 )
      END IF
C-----------------------------------------------------------------------
C Fill Block C2Trig
C-----------------------------------------------------------------------
      IF (C2TRGFLAG) THEN
         NSec = 0.
         NSec_NoClu = 0.
         NSec2Clu = 0.
         NClu2s = 0.
         DO iC2Trig=1, 100
            NNorm(iC2Trig)   = 0.
            NormAdd(iC2Trig) = 0.
            NOver(iC2Trig)   = 0.
            OverAdd(iC2Trig) = 0.
            NCosm(iC2Trig)   = 0.
            CosmAdd(iC2Trig) = 0.
         END DO

         istat = GETSEC2CLUSTRU(evt%s2clu)

         NSec = Evt%S2CLU%nsect
         NSec_NoClu = Evt%S2CLU%nsect_noclu
         NSec2Clu = Evt%S2CLU%nsect_clu
         NClu2s = Evt%S2CLU%Nclus

         IF (NClu2s > 0 .AND. NClu2s <= 100) THEN
            DO iC2Trig=1,NClu2s
               NNorm(iC2Trig)   = Evt%S2CLU%Nnorm(iC2Trig)
               NormAdd(iC2Trig) = Evt%S2CLU%NormAdd(iC2Trig)
               NOver(iC2Trig)   = Evt%S2CLU%Nover(iC2Trig)
               OverAdd(iC2Trig) = Evt%S2CLU%OverAdd(iC2Trig)
               NCosm(iC2Trig)   = Evt%S2CLU%Ncosm(iC2Trig)
               CosmAdd(iC2Trig) = Evt%S2CLU%CosmAdd(iC2Trig)
            END DO
         ELSE
            WRITE(*,*) 'ERROR C2TRIG - NClu2s Index not valid: ', NClu2s
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tellina
C-----------------------------------------------------------------------
      IF (TELLINAFLAG) THEN
         NTel = 0.
         DO iTELLINA=1, 300
            Add_Tel(iTELLINA) = 0.
            Bitp_Tel(iTELLINA) = 0.
            Ea_Tel(iTELLINA) = 0.
            Eb_Tel(iTELLINA) = 0.
            Ta_Tel(iTELLINA) = 0.
            Tb_Tel(iTELLINA) = 0.
         END DO

         istat = GETTELLINA(Evt%Tellina) 
         
         NTel = Evt%Tellina%n
         IF ( NTel < 0 .OR. NTel > 300 ) THEN
            WRITE(*,*) 'ERROR TELLINA - NTel Out of bound : ', NTel
         END IF

         IF (nTel > 0 .AND. nTel <= 300) THEN
            DO iTELLINA=1, nTel
                 Add_Tel(iTELLINA) = Evt%Tellina%add(iTELLINA)
               Bitp_Tel(iTELLINA) = Evt%Tellina%Bitp(iTELLINA)
               IF ( Bitp_Tel(iTELLINA) < 0 .OR. Bitp_Tel(iTELLINA) > 1100 ) THEN
                  WRITE(*,*) 'ERROR TELLINA - Bitp_Tel[2] Out of bound : ', Bitp_Tel(iTELLINA)
               END IF
                 Ea_Tel(iTELLINA) = Evt%Tellina%Ea(iTELLINA)
                 Eb_Tel(iTELLINA) = Evt%Tellina%Eb(iTELLINA)
                 Ta_Tel(iTELLINA) = Evt%Tellina%Ta(iTELLINA)
                 Tb_Tel(iTELLINA) = Evt%Tellina%Tb(iTELLINA)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TELLINA - nTel Index not valid: ', nTel
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block pizzetta
C-----------------------------------------------------------------------
      IF (PIZZETTAFLAG) THEN
         NPiz = 0.
         DO iPIZZETTA=1, 300
            Add_Piz(iPIZZETTA) = 0.
            Ea_Piz(iPIZZETTA)  = 0.
            Eb_Piz(iPIZZETTA)  = 0.
            E_Piz(iPIZZETTA)   = 0.
            Z_Piz(iPIZZETTA)   = 0.
         END DO

         istat = GETPIZZETTA(Evt%Pizzetta)

         NPiz = Evt%Pizzetta%n
         IF ( NPiz < 0 .OR. NPiz > 300 ) THEN
            WRITE(*,*) 'ERROR PIZZETTA - NPiz Out of bound : ', NPiz
         END IF
         IF (NPiz > 0 .AND. NPiz <= 300) THEN
            DO iPIZZETTA=1, NPiz
               Add_Piz(iPIZZETTA) = Evt%Pizzetta%Add(iPIZZETTA)
               Ea_Piz(iPIZZETTA)  = Evt%Pizzetta%Ea(iPIZZETTA)
               Eb_Piz(iPIZZETTA)  = Evt%Pizzetta%Eb(iPIZZETTA)
               E_Piz(iPIZZETTA)   = Evt%Pizzetta%E_Rec(iPIZZETTA)
               Z_Piz(iPIZZETTA)   = Evt%Pizzetta%Z_Mod(iPIZZETTA)
            END DO
         ELSE
            WRITE(*,*) 'ERROR PIZZETTA - NPiz Index not valid : ', NPiz
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Torta
C-----------------------------------------------------------------------
      IF (TORTAFLAG) THEN
         tSpent = 0.
         tDead = 0.
         Type = 0.
         BPhi = 0.
         EPhi = 0.
         WPhi = 0.
         BBha = 0.
         EBha = 0.
         WBha = 0.
         BCos = 0.
         ECos = 0.
         WCos = 0.
         E1W1_Dwn = 0.
         B1_Dwn = 0.
         T0d_Dwn = 0.
         VetoCos = 0.
         VetoBha = 0.
         Bdw = 0.
         Rephasing = 0.
         TDC1_Pht1 = 0.
         Dt2_T1 = 0.
         Fiducial = 0.
         T1c = 0.
         T1d = 0.
         T2d = 0.
         Tcr = 0.
         TCaf_Tcrd = 0.
         TCaf_T2d = 0.
         Moka_T2d = 0.
         DO iTORTA=1, 10
           Moka_T2Dsl(iTORTA) = 0.
         END DO

         istat = GETTRIGGER(evt%trg)

         tSpent = evt%trg%tspent
         tDead = evt%trg%tdead
         Type = evt%trg%type
         IF ( Type < 0 .OR. Type > 7 ) THEN
            WRITE(*,*) 'ERROR TORTA - Type Out of bound : ', Type
         END IF
         BPhi = evt%trg%bphi
         IF ( BPhi < 0 .OR. BPhi > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - BPhi Out of bound : ', BPhi
         END IF
         EPhi = evt%trg%ephi
         IF ( EPhi < 0 .OR. EPhi > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - EPhi Out of bound : ', EPhi
         END IF
         WPhi = evt%trg%wphi
         IF ( WPhi < 0 .OR. WPhi > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - WPhi Out of bound : ', WPhi
         END IF
         BBha = evt%trg%bbha
         IF ( BBha < 0 .OR. BBha > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - BBha Out of bound : ', BBha
         END IF
         EBha = evt%trg%ebha
         IF ( EBha < 0 .OR. EBha > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - EBha Out of bound : ', EBha
         END IF
         WBha = evt%trg%wbha
         IF ( WBha < 0 .OR. WBha > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - WBha Out of bound : ', WBha
         END IF
         BCos = evt%trg%bcos
         IF ( BCos < 0 .OR. BCos > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - BCos Out of bound : ', BCos
         END IF
         ECos = evt%trg%ecos
         IF ( ECos < 0 .OR. ECos > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - ECos Out of bound : ', ECos
         END IF
         WCos = evt%trg%wcos
         IF ( WCos < 0 .OR. WCos > 3 ) THEN
            WRITE(*,*) 'ERROR TORTA - WCos Out of bound : ', WCos
         END IF
         E1W1_Dwn = evt%trg%e1w1_dwn
         IF ( E1W1_Dwn < 0 .OR. E1W1_Dwn > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - E1W1_Dwn Out of bound : ', E1W1_Dwn
         END IF
         B1_Dwn = evt%trg%b1_dwn
         IF ( B1_Dwn < 0 .OR. B1_Dwn > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - B1_Dwn Out of bound : ', B1_Dwn
         END IF
         T0d_Dwn = evt%trg%t0d_dwn
         IF ( T0d_Dwn < 0 .OR. T0d_Dwn > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - T0d_Dwn Out of bound : ', T0d_Dwn
         END IF
         VetoCos = evt%trg%vetocos
         IF ( VetoCos < 0 .OR. VetoCos > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - VetoCos Out of bound : ', VetoCos
         END IF
         VetoBha = evt%trg%vetobha
         IF ( VetoBha < 0 .OR. VetoBha > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - VetoBha Out of bound : ', VetoBha
         END IF
         Bdw = evt%trg%bdw
         IF ( Bdw < 0 .OR. Bdw > 1 ) THEN
            WRITE(*,*) 'ERROR TORTA - Bdw Out of bound : ', Bdw
         END IF
         Rephasing = evt%trg%rephasing
         IF ( Rephasing < 0 .OR. Rephasing > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Rephasing Out of bound : ', Rephasing
         END IF
         TDC1_Pht1 = evt%trg%tdc1_pht1
         IF ( TDC1_Pht1 < 0 .OR. TDC1_Pht1 > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - TDC1_Pht1 Out of bound : ', TDC1_Pht1
         END IF
         Dt2_T1 = evt%trg%dt2_t1
         IF ( Dt2_T1 < 0 .OR. Dt2_T1 > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Dt2_T1 Out of bound : ', Dt2_T1
         END IF
         Fiducial = evt%trg%fiducial
         IF ( Fiducial < 0 .OR. Fiducial > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Fiducial Out of bound : ', Fiducial
         END IF
         T1c = evt%trg%t1c
         IF ( T1c < 0 .OR. T1c > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - T1c Out of bound : ', T1c
         END IF
         T1d = evt%trg%t1d
         IF ( T1d < 0 .OR. T1d > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - T1d Out of bound : ', T1d
         END IF
         T2d = evt%trg%t2d
         IF ( T2d < 0 .OR. T2d > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - T2d Out of bound : ', T2d
         END IF
         Tcr = evt%trg%tcr
         IF ( Tcr < 0 .OR. Tcr > 4096 ) THEN
            WRITE(*,*) 'ERROR TORTA - Tcr Out of bound : ', Tcr
         END IF
         TCaf_Tcrd = evt%trg%tcaf_tcrd
         TCaf_T2d = evt%trg%tcaf_t2d
         Moka_T2d = evt%trg%moka_t2d
         Moka_T2Dsl = evt%trg%moka_t2dsl
      END IF
C-----------------------------------------------------------------------
C Fill Block Tele
C-----------------------------------------------------------------------
      IF (TELEFLAG) THEN
      NTele = 0.
      DO iEVTTELE=1, 300
        Det_Trg(iEVTTELE) = 0.
        BitP(iEVTTELE) = 0.
        Sector(iEVTTELE) = 0.
        SerKind(iEVTTELE) = 0.
        Ea_Trg(iEVTTELE) = 0.
        Eb_Trg(iEVTTELE) = 0.
        Ta_Trg(iEVTTELE) = 0.
        Tb_Trg(iEVTTELE) = 0.
         END DO
   
         istat = GETTELESTRU(Evt%TELE)
   
         NTele = Evt%TELE%ntele
         IF ( NTele < 0 .OR. NTele > 300 ) THEN
            WRITE(*,*) 'ERROR TELE - NTele Out of bound : ', NTele
         END IF
         IF (NTele > 0 .AND. NTele <= 300) THEN
           DO iEVTTELE=1, NTele
              Det_Trg(iEVTTELE) = Evt%TELE%Det(iEVTTELE)
              IF ( Det_Trg(iEVTTELE) < 0 .OR. Det_Trg(iEVTTELE) > 3 ) THEN
                 WRITE(*,*) 'ERROR TELE - Det_Trg[0] Out of bound : ', Det_Trg(iEVTTELE)
              END IF
              BitP(iEVTTELE) = Evt%TELE%Bitp(iEVTTELE)
              IF ( BitP(iEVTTELE) < 0 .OR. BitP(iEVTTELE) > 1100 ) THEN
                 WRITE(*,*) 'ERROR TELE - BitP[1] Out of bound : ', BitP(iEVTTELE)
              END IF
              Sector(iEVTTELE) = Evt%TELE%Sector(iEVTTELE)
              IF ( Sector(iEVTTELE) < 0 .OR. Sector(iEVTTELE) > 50 ) THEN
                 WRITE(*,*) 'ERROR TELE - Sector[2] Out of bound : ', Sector(iEVTTELE)
              END IF
              SerKind(iEVTTELE) = Evt%TELE%Serkind(iEVTTELE)
              IF ( SerKind(iEVTTELE) < 0 .OR. SerKind(iEVTTELE) > 3 ) THEN
                 WRITE(*,*) 'ERROR TELE - SerKind[3] Out of bound : ', SerKind(iEVTTELE)
              END IF
              Ea_Trg(iEVTTELE) = Evt%TELE%Ea(iEVTTELE)
              Eb_Trg(iEVTTELE) = Evt%TELE%Eb(iEVTTELE)
              Ta_Trg(iEVTTELE) = Evt%TELE%Ta(iEVTTELE)
              Tb_Trg(iEVTTELE) = Evt%TELE%Tb(iEVTTELE)
           END DO
         ELSE
           WRITE(*,*) 'ERROR EVTTELE - NTele Index not valid : ', NTele
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block pizza
C-----------------------------------------------------------------------
      IF (PIZZAFLAG) THEN
         NPack = 0.
         DO iPIZZA=1, 300
           PakSect(iPIZZA) = 0.
           PakDet(iPIZZA) = 0.
           PakSerk(iPIZZA) = 0.
           Ea_Pack(iPIZZA) = 0.
           Eb_Pack(iPIZZA) = 0.
           E_Rec(iPIZZA) = 0.
           Z_mod(iPIZZA) = 0.
         END DO
   
         istat = PIZZA_RESET(Evt%PIZZA)
         istat = GETPIZZASTRU(Evt%PIZZA)
   
         NPack = Evt%PIZZA%npizza
         IF ( NPack < 0 .OR. NPack > 300 ) THEN
            WRITE(*,*) 'ERROR CLU - NPack Out of bound : ', NPack
         END IF
         IF (NPack > 0 .AND. NPack <= 300) THEN
           DO iPIZZA=1, NPack
             PakSect(iPIZZA) = Evt%PIZZA%sector(iPIZZA)
             PakDet(iPIZZA) = Evt%PIZZA%det(iPIZZA)
             PakSerk(iPIZZA) = Evt%PIZZA%serkind(iPIZZA)
             Ea_Pack(iPIZZA) = Evt%PIZZA%Ea(iPIZZA)
             Eb_Pack(iPIZZA) = Evt%PIZZA%Eb(iPIZZA)
             E_Rec(iPIZZA) = Evt%PIZZA%E_rec(iPIZZA)
             Z_mod(iPIZZA) = Evt%PIZZA%Z_mod(iPIZZA)
           END DO
         ELSE
           WRITE(*,*) 'ERROR PIZZA - NPack Index not valid : ', NPack
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Time
C-----------------------------------------------------------------------
      IF (TIMEFLAG) THEN
         istat = T0GLRD(T0Dc0,T0Hit0,T0Clu0,T0Step1,DelayCable,TBunch)
         istat = T0MCRD(TPhased_mc)
      END IF
C-----------------------------------------------------------------------
C Fill Block Clus
C-----------------------------------------------------------------------
      IF (CLUSFLAG) THEN
         NClu = 0.
         DO iEVTCLU=1, 100
            EneCl(iEVTCLU) = 0.
            TCl(iEVTCLU) = 0.
            XCl(iEVTCLU) = 0.
            YCl(iEVTCLU) = 0.
            ZCl(iEVTCLU) = 0.
            XaCl(iEVTCLU) = 0.
            YaCl(iEVTCLU) = 0.
            ZaCl(iEVTCLU) = 0.
            XRmCl(iEVTCLU) = 0.
            YRmsCl(iEVTCLU) = 0.
            ZrmsCl(iEVTCLU) = 0.
            TrmsCl(iEVTCLU) = 0.
            FlagCl(iEVTCLU) = 0.
         END DO
   
         istat = GETCLUSTRU(Evt%Clu)
   
         NClu = Evt%Clu%n 
         IF ( NClu < 0 .OR. NClu > 100 ) THEN
            WRITE(*,*) 'ERROR CLU - NClu Out of bound : ', NClu
         END IF
         IF (NClu > 0 .AND. NClu <= 100) THEN
            DO iEVTCLU=1, NClu
               EneCl(iEVTCLU) = Evt%Clu%E (iEVTCLU)
               TCl(iEVTCLU) = Evt%Clu%T (iEVTCLU)
               XCl(iEVTCLU) = Evt%Clu%X (iEVTCLU)
               YCl(iEVTCLU) = Evt%Clu%Y (iEVTCLU)
               ZCl(iEVTCLU) = Evt%Clu%Z (iEVTCLU)
               XaCl(iEVTCLU) = Evt%Clu%Xa(iEVTCLU)
               YaCl(iEVTCLU) = Evt%Clu%Ya(iEVTCLU)
               ZaCl(iEVTCLU) = Evt%Clu%Za(iEVTCLU)
               XRmCl(iEVTCLU) = Evt%Clu%Xrms(iEVTCLU)
               YRmsCl(iEVTCLU) = Evt%Clu%Yrms(iEVTCLU)
               ZrmsCl(iEVTCLU) = Evt%Clu%Zrms(iEVTCLU)
               TrmsCl(iEVTCLU) = Evt%Clu%Trms(iEVTCLU)
               FlagCl(iEVTCLU) = Evt%Clu%Flag(iEVTCLU)
            END DO
         ELSE
            WRITE(*,*) 'ERROR EVTCLU - NClu Index not valid : ', NClu
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block CluMC
C-----------------------------------------------------------------------
      IF (CLUMCFLAG) THEN
         NCluMc = 0.
         DO iEVTCLUMC=1, 100
            NPar(iEVTCLUMC) = 0.
            PNum1(iEVTCLUMC) = 0.
            Pid1(iEVTCLUMC) = 0.
            PNum2(iEVTCLUMC) = 0.
            Pid2(iEVTCLUMC) = 0.
            PNum3(iEVTCLUMC) = 0.
            Pid3(iEVTCLUMC) = 0.
         END DO
  
C        Already filled Evt%Clu in previous blocks

         NCluMc = Evt%Clu%nmc
         IF ( NCluMc < 0 .OR. NCluMc > 100 ) THEN
            WRITE(*,*) 'ERROR CLU - NCluMc Out of bound : ', NCluMc
         END IF
         IF (NCluMc > 0 .AND. NCluMc <= 100) THEN
            DO iEVTCLUMC=1, NCluMc
               NPar(iEVTCLUMC) = Evt%Clu%Npart(iEVTCLUMC)
               IF ( NPar(iEVTCLUMC) < 0 .OR. NPar(iEVTCLUMC) > 10 ) THEN
                  WRITE(*,*) 'ERROR EVTCLUMC - NPar[0] Out of bound : ', NPar(iEVTCLUMC)
               END IF
               PNum1(iEVTCLUMC) = Evt%Clu%part1(iEVTCLUMC)
               IF ( PNum1(iEVTCLUMC) < 0 .OR. PNum1(iEVTCLUMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLUMC - PNum1[1] Out of bound : ', PNum1(iEVTCLUMC)
               END IF
               Pid1(iEVTCLUMC) = Evt%Clu%pid1(iEVTCLUMC)
               IF ( Pid1(iEVTCLUMC) < 0 .OR. Pid1(iEVTCLUMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLUMC - Pid1[2] Out of bound : ', Pid1(iEVTCLUMC)
               END IF
               PNum2(iEVTCLUMC) = Evt%Clu%part2(iEVTCLUMC)
               IF ( PNum2(iEVTCLUMC) < 0 .OR. PNum2(iEVTCLUMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLUMC - PNum2[3] Out of bound : ', PNum2(iEVTCLUMC)
               END IF
               Pid2(iEVTCLUMC) = Evt%Clu%pid2(iEVTCLUMC)
               IF ( Pid2(iEVTCLUMC) < 0 .OR. Pid2(iEVTCLUMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLUMC - Pid2[4] Out of bound : ', Pid2(iEVTCLUMC)
               END IF
               PNum3(iEVTCLUMC) = Evt%Clu%part3(iEVTCLUMC)
               IF ( PNum3(iEVTCLUMC) < 0 .OR. PNum3(iEVTCLUMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLUMC - PNum3[5] Out of bound : ', PNum3(iEVTCLUMC)
               END IF
               Pid3(iEVTCLUMC) = Evt%Clu%pid3(iEVTCLUMC)
               IF ( Pid3(iEVTCLUMC) < 0 .OR. Pid3(iEVTCLUMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR EVTCLUMC - Pid3[6] Out of bound : ', Pid3(iEVTCLUMC)
               END IF
            END DO
         ELSE
            WRITE(*,*) 'ERROR EVTCLUMC - NCluMc Index not valid : ', NCluMc
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Pre-Clusters
C-----------------------------------------------------------------------
      IF (PRECLUSFLAG) THEN
         NPClu = 0.
         DO iPRECLU=1, 100
           EPre(iPRECLU) = 0.
           TPre(iPRECLU) = 0.
           XPre(iPRECLU) = 0.
           YPre(iPRECLU) = 0.
           ZPre(iPRECLU) = 0.
           TAPre(iPRECLU) = 0.
           TBPre(iPRECLU) = 0.
           TARPre(iPRECLU) = 0.
           TBRPre(iPRECLU) = 0.
         END DO
   
         istat = GETPRECLUSTRU(Evt%PreClu)
   
         NPClu = Evt%PreClu%n 
         IF ( NPClu < 0 .OR. NPClu > 100 ) THEN
            WRITE(*,*) 'ERROR PRECLU - NPClu Out of bound : ', NPClu
         END IF
         IF (NPClu > 0 .AND. NPClu <= 100) THEN
           DO iPRECLU=1, NPClu
             EPre(iPRECLU) = Evt%PreClu%E (iPRECLU)
             TPre(iPRECLU) = Evt%PreClu%T (iPRECLU)
             XPre(iPRECLU) = Evt%PreClu%X (iPRECLU)
             YPre(iPRECLU) = Evt%PreClu%Y (iPRECLU)
             ZPre(iPRECLU) = Evt%PreClu%Z (iPRECLU)
             TAPre(iPRECLU) = Evt%PreClu%TA(iPRECLU)
             TBPre(iPRECLU) = Evt%PreClu%TB(iPRECLU)
             TARPre(iPRECLU) = Evt%PreClu%TrmsA(iPRECLU)
             TBRPre(iPRECLU) = Evt%PreClu%TrmsB(iPRECLU)
           END DO
         ELSE
           WRITE(*,*) 'ERROR PRECLU - NPClu Index not valid : ', NPClu
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block CWRK
C-----------------------------------------------------------------------
      IF (CWRKFLAG) THEN
         NCHit = 0.
         DO iCWRK=1, 2000
            IClu(iCWRK) = 0.
            ICel(iCWRK) = 0.
            CAdd(iCWRK) = 0.
            CmcHit(iCWRK) = 0.
            Ckine(iCWRK) = 0.
            Ene(iCWRK) = 0.
            T(iCWRK) = 0.
            X(iCWRK) = 0.
            Y(iCWRK) = 0.
            Z(iCWRK) = 0.
         END DO
   
         istat = GETCWRKSTRU(Evt%Cwrk)
   
         NCHit = Evt%CWRK%n 
         IF ( NCHit < 0 .OR. NCHit > 2000 ) THEN
            WRITE(*,*) 'ERROR CLU - NCHit Out of bound : ', NCHit
         END IF
         IF (NCHit > 0 .AND. NCHit <= 2000) THEN
            DO iCWRK=1, NCHit
               IClu(iCWRK) = Evt%CWRK%icl(iCWRK)
               ICel(iCWRK) = Evt%CWRK%cele(iCWRK)
               CAdd(iCWRK) = Evt%CWRK%add(iCWRK)
               CmcHit(iCWRK) = Evt%CWRK%nhit(iCWRK)
               Ckine(iCWRK) = Evt%CWRK%kine(iCWRK)
               Ene(iCWRK) = Evt%CWRK%E(iCWRK)
               T(iCWRK) = Evt%CWRK%T(iCWRK)
               X(iCWRK) = Evt%CWRK%X(iCWRK)
               Y(iCWRK) = Evt%CWRK%Y(iCWRK)
               Z(iCWRK) = Evt%CWRK%Z(iCWRK)
            END DO
         ELSE
            WRITE(*,*) 'ERROR CWRK - NCHit Index not valid : ', NCHit
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block cele
C-----------------------------------------------------------------------
      IF (CELEFLAG) THEN
         NCel = 0.
         NCelMc = 0.
         DO iCELE=1, 2000
            ICl(iCELE) = 0.
            Det(iCELE) = 0.
            Wed(iCELE) = 0.
            Pla(iCELE) = 0.
            Col(iCELE) = 0.
            Ea(iCELE) = 0.
            Ta(iCELE) = 0.
            Eb(iCELE) = 0.
            Tb(iCELE) = 0.
            EMc(iCELE) = 0.
            TMc(iCELE) = 0.
            XMc(iCELE) = 0.
            YMc(iCELE) = 0.
            ZMc(iCELE) = 0.
            PTyp(iCELE) = 0.
            KNum(iCELE) = 0.
            NHit(iCELE) = 0.
         END DO
   
         istat = GETCELESTRU(Evt%Cele)
   
         NCel = Evt%Cele%n 
         IF ( NCel < 0 .OR. NCel > 2000 ) THEN
            WRITE(*,*) 'ERROR CELE - NCel Out of bound : ', NCel
         END IF
         NCelMc = Evt%Cele%nmc
         IF ( NCelMc < 0 .OR. NCelMc > 2000 ) THEN
            WRITE(*,*) 'ERROR CELE - NCelMc Out of bound : ', NCelMc
         END IF
         IF ( NCel > 0 .AND. NCel <= 2000 ) THEN
            DO iCELE=1, NCel
              ICl(iCELE) = Evt%Cele%icl(iCELE)
              Det(iCELE) = Evt%Cele%det(iCELE)
              Wed(iCELE) = Evt%Cele%wed(iCELE)
              Pla(iCELE) = Evt%Cele%pla(iCELE)
              Col(iCELE) = Evt%Cele%col(iCELE)
              Ea(iCELE) = Evt%Cele%Ea(iCELE)
              Ta(iCELE) = Evt%Cele%ta(iCELE)
              Eb(iCELE) = Evt%Cele%Eb(iCELE)
              Tb(iCELE) = Evt%Cele%tb(iCELE)
            END DO
         ELSE
            WRITE(*,*) 'ERROR CELE - NCel Index not valid : ', NCel
         END IF
   
         IF (NCelMc > 0 .AND. NCelMc <= 2000) THEN
            DO iCELE=1, NCelMc
               EMc(iCELE) = Evt%Cele%Etrue(iCELE)
               TMc(iCELE) = Evt%Cele%Ttrue(iCELE)
               XMc(iCELE) = Evt%Cele%xtrue(iCELE)
               YMc(iCELE) = Evt%Cele%ytrue(iCELE)
               ZMc(iCELE) = Evt%Cele%ztrue(iCELE)
               PTyp(iCELE) = Evt%Cele%ptyp(iCELE)
               KNum(iCELE) = Evt%Cele%knum(iCELE)
               NHit(iCELE) = Evt%Cele%numpar(iCELE)
            END DO
         ELSE
            WRITE(*,*) 'ERROR CELE - NCelMc Index not valid : ', NCelMc
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block CeleMC
C-----------------------------------------------------------------------
      IF (CELEMCFLAG) THEN
         NCel = 0.
         DO iCELEMC=1, 2000
            EMc(iCELEMC) = 0.
            TMc(iCELEMC) = 0.
            XMc(iCELEMC) = 0.
            YMc(iCELEMC) = 0.
            ZMc(iCELEMC) = 0.
            PTyp(iCELEMC) = 0.
            KNum(iCELEMC) = 0.
            NHit(iCELEMC) = 0.
         END DO
   
C        Already filled Evt%Cele in previous blocks
   
         NCelMc = Evt%Cele%nmc
         IF ( NCelMc < 0 .OR. NCelMc > 2000 ) THEN
            WRITE(*,*) 'ERROR CELEMC - NCelMc Out of bound : ', NCelMc
         END IF
   
         IF (NCelMc > 0 .AND. NCelMc <= 2000) THEN
            DO iCELEMC=1, NCelMc
               EMc(iCELEMC) = Evt%Cele%Etrue(iCELEMC)
               TMc(iCELEMC) = Evt%Cele%Ttrue(iCELEMC)
               XMc(iCELEMC) = Evt%Cele%xtrue(iCELEMC)
               YMc(iCELEMC) = Evt%Cele%ytrue(iCELEMC)
               ZMc(iCELEMC) = Evt%Cele%ztrue(iCELEMC)
               PTyp(iCELEMC) = Evt%Cele%ptyp(iCELEMC)
               KNum(iCELEMC) = Evt%Cele%knum(iCELEMC)
               NHit(iCELEMC) = Evt%Cele%numpar(iCELEMC)
            END DO
         ELSE
            WRITE(*,*) 'ERROR CELEMC - NCelMc Index not valid : ', NCelMc
         END IF
      END IF

C-----------------------------------------------------------------------
C Fill Block dtce
C-----------------------------------------------------------------------
      IF (DTCEFLAG) THEN
         nDTCE = 0.
         nSmall = 0.
         DO iDTCE=1, 1500
            iLayerDTCE(iDTCE) = 0.
            iWireDTCE(iDTCE) = 0.
            tDTCE(iDTCE) = 0.
         END DO
   
         CALL GETDTCESTRU(Evt%DTCE)
   
         nDTCE = Evt%DTCE%nDTCE
         IF ( nDTCE < 0 .OR. nDTCE > 1500 ) THEN
            WRITE(*,*) 'ERROR DTCE - nDTCE Out of bound : ', nDTCE
         END IF
         nSmall = Evt%DTCE%nSmall
         IF ( nSmall < 0 .OR. nSmall > 1500 ) THEN
            WRITE(*,*) 'ERROR DTCE - nSmall Out of bound : ', nSmall
         END IF
   
         IF (nDTCE > 0 .AND. nDTCE <= 1500) THEN
            DO iDTCE=1, nDTCE
               iLayerDTCE(iDTCE) = Evt%DTCE%iLayerDTCE(iDTCE)
               IF ( iLayerDTCE(iDTCE) < 1 .OR. iLayerDTCE(iDTCE) > 58 ) THEN
                  WRITE(*,*) 'ERROR DTCE - iLayerDTCE[2] Out of bound : ', iLayerDTCE(iDTCE)
               END IF
               iWireDTCE(iDTCE) = Evt%DTCE%iWireDTCE(iDTCE)
               IF ( iWireDTCE(iDTCE) < 1 .OR. iWireDTCE(iDTCE) > 378 ) THEN
                 WRITE(*,*) 'ERROR DTCE - iWireDTCE[3] Out of bound : ', iWireDTCE(iDTCE)
               END IF
               tDTCE(iDTCE) = Evt%DTCE%tDTCE(iDTCE)
            END DO
         ELSE
            WRITE(*,*) 'ERROR DTCE - nDTCE Index not valid: ', nDTCE
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dtce0
C-----------------------------------------------------------------------
      IF (DTCE0FLAG) THEN
         nDTCE0 = 0.
         DO iDTCE0=1, 1500
            iLayerDTCE0(iDTCE0) = 0.
            iWireDTCE0(iDTCE0) = 0.
            tDTCE0(iDTCE0) = 0.
         END DO
   
C        DTCEStru is initialized in raw2dtce.cin
   
         nDTCE0 = DTCEStru%NEle
         IF ( nDTCE0 < 0 .OR. nDTCE0 > 1500 ) THEN
            WRITE(*,*) 'ERROR DTCE0 - nDTCE0 Out of bound : ', nDTCE0
         END IF
   
         IF ( nDTCE0 > 0 .AND. nDTCE0 <= 1500 ) THEN
            DO iDTCE0=1, nDTCE0
               iLayerDTCE0(iDTCE0) = DTCEStru%Lay(iDTCE0)
               IF ( iLayerDTCE0(iDTCE0) < 1 .OR. iLayerDTCE0(iDTCE0) > 58 ) THEN
                  WRITE(*,*) 'ERROR DTCE0 - iLayerDTCE0[1] Out of bound : ', iLayerDTCE0(iDTCE0)
               END IF
               iWireDTCE0(iDTCE0) = DTCEStru%Wir(iDTCE0)
               IF ( iWireDTCE0(iDTCE0) < 1 .OR. iWireDTCE0(iDTCE0) > 378 ) THEN
                  WRITE(*,*) 'ERROR DTCE0 - iWireDTCE0[2] Out of bound : ', iWireDTCE0(iDTCE0)
               END IF
               tDTCE0(iDTCE0) = DTCEStru%Time(iDTCE0)
            END DO
         ELSE
            WRITE(*,*) 'ERROR DTCE0 - nDTCE0 Index not valid: ', nDTCE0
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dchits
C-----------------------------------------------------------------------
      IF (DCHITSFLAG) THEN ! TODO: Change .TRUE. with flag name
         nDCHR = 0.
         nSmallDCm = 0.
         nSmallDCp = 0.
         nBigDCm = 0.
         nBigDCp = 0.
         nCellDC = 0.
         nSmallDC = 0.
   
C        Already filled Evt%DTCE and DTCEStru in previous blocks
   
         nDCHR = DTCEStru%nDCHR
         nSmallDCm = DTCEStru%nSmallDCm
         nSmallDCp = DTCEStru%nSmallDCp
         nBigDCm = DTCEStru%nBigDCm
         nBigDCp = DTCEStru%nBigDCp
         nCellDC = Evt%DTCE%nDTCE
         nSmallDC = Evt%DTCE%nSmall
      END IF
C-----------------------------------------------------------------------
C Fill Block dhre
C-----------------------------------------------------------------------
      IF (.TRUE.) THEN
         nDHRE = 0.
         DO iDHRE=1, 1500
           iLayerDHRE(iDHRE) = 0.
           iWireDHRE(iDHRE) = 0.
           iTrkDHRE(iDHRE) = 0.
           rDHRE(iDHRE) = 0.
           eDHRE(iDHRE) = 0.
         END DO

         CALL GETDHRESTRU(Evt%DHRE) 

         nDHRE = Evt%DHRE%nDHRE
         IF ( nDHRE < 0 .OR. nDHRE > 1500 ) THEN
            WRITE(*,*) 'ERROR DHRE - nDHRE Out of bound : ', nDHRE
         END IF

         IF (nDHRE > 0 .AND. nDHRE <= 1500) THEN
            DO iDHRE=1, nDHRE
               iLayerDHRE(iDHRE) = Evt%DHRE%iLayerDHRE(iDHRE)
               IF ( iLayerDHRE(iDHRE) < 1 .OR. iLayerDHRE(iDHRE) > 58 ) THEN
                  WRITE(*,*) 'ERROR DHRE - iLayerDHRE[1] Out of bound : ', iLayerDHRE(iDHRE)
               END IF
               iWireDHRE(iDHRE) = Evt%DHRE%iWireDHRE(iDHRE)
               IF ( iWireDHRE(iDHRE) < 1 .OR. iWireDHRE(iDHRE) > 378 ) THEN
                  WRITE(*,*) 'ERROR DHRE - iWireDHRE[2] Out of bound : ', iWireDHRE(iDHRE)
               END IF
                 iTrkDHRE(iDHRE) = Evt%DHRE%iTrkDHRE(iDHRE)
                 rDHRE(iDHRE) = Evt%DHRE%rDHRE(iDHRE)
                 eDHRE(iDHRE) = Evt%DHRE%eDHRE(iDHRE)
           END DO
         ELSE
            WRITE(*,*) 'ERROR DHRE - nDHRE Index not valid: ', nDHRE
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dhsp
C-----------------------------------------------------------------------
      IF (DHSPFLAG) THEN ! TODO: Change .TRUE. with flag name
         nDHSP = 0.
         DO iDHSP=1, 500
            TrkDh(iDHSP) = 0.
            Layer(iDHSP) = 0.
            Wire(iDHSP) = 0.
            Time(iDHSP) = 0.
            DPar(iDHSP) = 0.
            Res(iDHSP) = 0.
            XDh(iDHSP) = 0.
            YDh(iDHSP) = 0.
            ZDh(iDHSP) = 0.
         END DO
   
         istat =  GETDHSPSTRU(evt%trk%n,evt%dhsp)
   
         nDHSP = Evt%DHSP%numDHSP
         IF ( nDHSP < 0 .OR. nDHSP > 500 ) THEN
            WRITE(*,*) 'ERROR DHSP - nDHSP Out of bound : ', nDHSP
         END IF
   
         IF (nDHSP > 0 .AND. nDHSP <= 500) THEN
           DO iDHSP=1, nDHSP
              TrkDh(iDHSP) = Evt%DHSP%itrk(iDHSP)
              Layer(iDHSP) = Evt%Dhsp%layer(iDHSP)
              Wire(iDHSP) = Evt%Dhsp%wire(iDHSP)
              Time(iDHSP) = Evt%Dhsp%time(iDHSP)
              DPar(iDHSP) = Evt%Dhsp%drift(iDHSP)
              Res(iDHSP) = Evt%Dhsp%res(iDHSP)
              XDh(iDHSP) = Evt%Dhsp%x(iDHSP)
              YDh(iDHSP) = Evt%Dhsp%y(iDHSP)
              ZDh(iDHSP) = Evt%Dhsp%z(iDHSP)
           END DO
         ELSE
            WRITE(*,*) 'ERROR DHSP - nDHSP Index not valid: ', nDHSP
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkv
C-----------------------------------------------------------------------
      IF (TRKVFLAG) THEN
         nTv = 0.
         DO iTRKV=1, 30
           iV(iTRKV) = 0.
           TrkNumV(iTRKV) = 0.
           CurV(iTRKV) = 0.
           PhiV(iTRKV) = 0.
           CoTv(iTRKV) = 0.
           PxTv(iTRKV) = 0.
           PyTv(iTRKV) = 0.
           PzTv(iTRKV) = 0.
           pModV(iTRKV) = 0.
           LenV(iTRKV) = 0.
           ChiV(iTRKV) = 0.
           PidTv(iTRKV) = 0.
           Cov11Tv(iTRKV) = 0.
           Cov12Tv(iTRKV) = 0.
           Cov13Tv(iTRKV) = 0.
           Cov22Tv(iTRKV) = 0.
           Cov23Tv(iTRKV) = 0.
           Cov33Tv(iTRKV) = 0.
         END DO

         istat = TRKV2STRU(evt%vtx,evt%trkv,evt%trk,evt%trkmc)

         nTv = Evt%Trkv%n
         IF ( nTv < 0 .OR. nTv > 30 ) THEN
            WRITE(*,*) 'ERROR TRKV - nTv Out of bound : ', nTv
         END IF

         IF (nTv > 0 .AND. nTv <= 30) THEN
            DO iTRKV=1, nTv
               iV(iTRKV) = Evt%Trkv%iv(iTRKV)
               IF ( iV(iTRKV) < 0 .OR. iV(iTRKV) > 30 ) THEN
                  WRITE(*,*) 'ERROR TRKV - iV[1] Out of bound : ', iV(iTRKV)
               END IF
               TrkNumV(iTRKV) = Evt%Trkv%trkpoi(iTRKV)
               IF ( TrkNumV(iTRKV) < 0 .OR. TrkNumV(iTRKV) > 999 ) THEN
                  WRITE(*,*) 'ERROR TRKV - TrkNumV[2] Out of bound : ', TrkNumV(iTRKV)
               END IF
                 CurV(iTRKV) = Evt%Trkv%cur(iTRKV)
                 PhiV(iTRKV) = Evt%Trkv%phi(iTRKV)
                 CoTv(iTRKV) = Evt%Trkv%cot(iTRKV)
                 PxTv(iTRKV) = Evt%Trkv%px(iTRKV)
                 PyTv(iTRKV) = Evt%Trkv%py(iTRKV)
                 PzTv(iTRKV) = Evt%Trkv%pz(iTRKV)
                 pModV(iTRKV) = Evt%Trkv%pmod(iTRKV)
                 LenV(iTRKV) = Evt%Trkv%Length(iTRKV)
                 ChiV(iTRKV) = Evt%Trkv%Chi2(iTRKV)
                 PidTv(iTRKV) = Evt%Trkv%ipid(iTRKV)
                 Cov11Tv(iTRKV) = Evt%Trkv%cov11(iTRKV)
                 Cov12Tv(iTRKV) = Evt%Trkv%cov12(iTRKV)
                 Cov13Tv(iTRKV) = Evt%Trkv%cov13(iTRKV)
                 Cov22Tv(iTRKV) = Evt%Trkv%cov22(iTRKV)
                 Cov23Tv(iTRKV) = Evt%Trkv%cov23(iTRKV)
                 Cov33Tv(iTRKV) = Evt%Trkv%cov33(iTRKV)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKV - nTv Index not valid: ', nTv
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Vertices
C-----------------------------------------------------------------------
      IF (VTXFLAG) THEN
         nV = 0.
         DO iVTX=1, 10
           Vetx(iVTX) = 0.
           xV(iVTX) = 0.
           yV(iVTX) = 0.
           zV(iVTX) = 0.
           ChiVtx(iVTX) = 0.
           QuaLv(iVTX) = 0.
           FitiDv(iVTX) = 0.
           VTXCov1(iVTX) = 0.
           VTXCov2(iVTX) = 0.
           VTXCov3(iVTX) = 0.
           VTXCov4(iVTX) = 0.
           VTXCov5(iVTX) = 0.
           VTXCov6(iVTX) = 0.
         END DO

C         Already filled Evt%Vtx by the get function called in the previous block

         nV = Evt%vtx%n
         IF ( nV < 0 .OR. nV > 10 ) THEN
            WRITE(*,*) 'ERROR VTX - nV Out of bound : ', nV
         END IF

         IF (nV > 0 .AND. nV <= 10) THEN
            DO iVTX=1, nV
               Vetx(iVTX) = Evt%Vtx%Ntrk(iVTX)
               IF ( Vetx(iVTX) < 0 .OR. Vetx(iVTX) > 10 ) THEN
                  WRITE(*,*) 'ERROR VTX - Vetx[1] Out of bound : ', Vetx(iVTX)
               END IF
                 xV(iVTX) = Evt%Vtx%X(iVTX)
                 yV(iVTX) = Evt%Vtx%Y(iVTX)
                 zV(iVTX) = Evt%Vtx%Z(iVTX)
                 ChiVtx(iVTX) = Evt%Vtx%Chi2(iVTX)
                 QuaLv(iVTX) = Evt%Vtx%Qual(iVTX)
                 FitiDv(iVTX) = Evt%Vtx%Fitid(iVTX)
                 VTXCov1(iVTX) = Evt%Vtx%Cov1(iVTX)
                 VTXCov2(iVTX) = Evt%Vtx%Cov2(iVTX)
                 VTXCov3(iVTX) = Evt%Vtx%Cov3(iVTX)
                 VTXCov4(iVTX) = Evt%Vtx%Cov4(iVTX)
                 VTXCov5(iVTX) = Evt%Vtx%Cov5(iVTX)
                 VTXCov6(iVTX) = Evt%Vtx%Cov6(iVTX)
           END DO
         ELSE
            WRITE(*,*) 'ERROR VTX - nV Index not valid: ', nV
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trks
C-----------------------------------------------------------------------
      IF (TRKSFLAG) THEN
         nT = 0.
         DO iTRKS=1, 100
           TrkInd(iTRKS) = 0.
           TrkVer(iTRKS) = 0.
           Cur(iTRKS) = 0.
           Phi(iTRKS) = 0.
           Cot(iTRKS) = 0.
           Pxt(iTRKS) = 0.
           Pyt(iTRKS) = 0.
           Pzt(iTRKS) = 0.
           PMod(iTRKS) = 0.
           Len(iTRKS) = 0.
           xFirst(iTRKS) = 0.
           yFirst(iTRKS) = 0.
           zFirst(iTRKS) = 0.
           CurLa(iTRKS) = 0.
           PhiLa(iTRKS) = 0.
           CotLa(iTRKS) = 0.
           PxtLa(iTRKS) = 0.
           PytLa(iTRKS) = 0.
           PztLa(iTRKS) = 0.
           PModLa(iTRKS) = 0.
           SPca(iTRKS) = 0.
           SZeta(iTRKS) = 0.
           SCurV(iTRKS) = 0.
           SCotG(iTRKS) = 0.
           SPhi(iTRKS) = 0.
           xLast(iTRKS) = 0.
           yLast(iTRKS) = 0.
           zLast(iTRKS) = 0.
           xPca2(iTRKS) = 0.
           yPca2(iTRKS) = 0.
           zPca2(iTRKS) = 0.
           QTrk2(iTRKS) = 0.
           CotPca2(iTRKS) = 0.
           PhiPca2(iTRKS) = 0.
           nPrHit(iTRKS) = 0.
           nFitHit(iTRKS) = 0.
           nMskInk(iTRKS) = 0.
           Chi2Fit(iTRKS) = 0.
           Chi2Ms(iTRKS) = 0.
         END DO

C         Already filled Evt%Trk by the get function called in the previous block

         nT = Evt%Trk%n
         IF ( nT < 0 .OR. nT > 100 ) THEN
            WRITE(*,*) 'ERROR TRKS - nT Out of bound : ', nT
         END IF

         IF (nT > 0 .AND. nT <= 100) THEN
            DO iTRKS=1, nT
                 TrkInd(iTRKS) = Evt%Trk%trkind(iTRKS)
                 TrkVer(iTRKS) = Evt%Trk%version(iTRKS)
                 Cur(iTRKS) = Evt%Trk%cur(iTRKS)
                 Phi(iTRKS) = Evt%Trk%phi(iTRKS)
                 Cot(iTRKS) = Evt%Trk%cot(iTRKS)
                 Pxt(iTRKS) = Evt%Trk%px(iTRKS)
                 Pyt(iTRKS) = Evt%Trk%py(iTRKS)
                 Pzt(iTRKS) = Evt%Trk%pz(iTRKS)
                 PMod(iTRKS) = Evt%Trk%pmod(iTRKS)
                 Len(iTRKS) = Evt%Trk%length(iTRKS)
                 xFirst(iTRKS) = Evt%Trk%x(iTRKS)
                 yFirst(iTRKS) = Evt%Trk%y(iTRKS)
                 zFirst(iTRKS) = Evt%Trk%z(iTRKS)
                 CurLa(iTRKS) = Evt%Trk%curlast(iTRKS)
                 PhiLa(iTRKS) = Evt%Trk%philast(iTRKS)
                 CotLa(iTRKS) = Evt%Trk%cotlast(iTRKS)
                 PxtLa(iTRKS) = Evt%Trk%pxlast(iTRKS)
                 PytLa(iTRKS) = Evt%Trk%pylast(iTRKS)
                 PztLa(iTRKS) = Evt%Trk%pzlast(iTRKS)
                 PModLa(iTRKS) = Evt%Trk%pmodlast(iTRKS)
                 SPca(iTRKS) = Evt%Trk%SigPCA(iTRKS)
                 SZeta(iTRKS) = Evt%Trk%SigZeta(iTRKS)
                 SCurV(iTRKS) = Evt%Trk%SigCurv(iTRKS)
                 SCotG(iTRKS) = Evt%Trk%SigCot(iTRKS)
                 SPhi(iTRKS) = Evt%Trk%SigPhi(iTRKS)
                 xLast(iTRKS) = Evt%Trk%xlast(iTRKS)
                 yLast(iTRKS) = Evt%Trk%ylast(iTRKS)
                 zLast(iTRKS) = Evt%Trk%zlast(iTRKS)
                 xPca2(iTRKS) = Evt%Trk%xpca(iTRKS)
                 yPca2(iTRKS) = Evt%Trk%ypca(iTRKS)
                 zPca2(iTRKS) = Evt%Trk%zpca(iTRKS)
                 QTrk2(iTRKS) = Evt%Trk%qtrk(iTRKS)
                 CotPca2(iTRKS) = Evt%Trk%cotpca(iTRKS)
                 PhiPca2(iTRKS) = Evt%Trk%phipca(iTRKS)
                 nPrHit(iTRKS) = Evt%Trk%NumPRhit(iTRKS)
                 nFitHit(iTRKS) = Evt%Trk%NumFitHit(iTRKS)
                 nMskInk(iTRKS) = Evt%Trk%nmskink(iTRKS)
                 Chi2Fit(iTRKS) = Evt%Trk%chi2fit(iTRKS)
                 Chi2Ms(iTRKS) = Evt%Trk%chi2ms(iTRKS)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKS - nT Index not valid: ', nT
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkmc
C-----------------------------------------------------------------------
      IF (TRKMCFLAG) THEN
         nTfMC = 0.
         DO iTRKMC=1, 100
           NConTr(iTRKMC) = 0.
           TrkIne1(iTRKMC) = 0.
           TrType1(iTRKMC) = 0.
           TrHits1(iTRKMC) = 0.
           TrkIne2(iTRKMC) = 0.
           TrType2(iTRKMC) = 0.
           TrHits2(iTRKMC) = 0.
           TrkIn3(iTRKMC) = 0.
           TrType3(iTRKMC) = 0.
           TrHits3(iTRKMC) = 0.
           xFMC(iTRKMC) = 0.
           yFMC(iTRKMC) = 0.
           zFMC(iTRKMC) = 0.
           PxFMC(iTRKMC) = 0.
           PyFMC(iTRKMC) = 0.
           PzFMC(iTRKMC) = 0.
           xLMC(iTRKMC) = 0.
           yLMC(iTRKMC) = 0.
           zLMC(iTRKMC) = 0.
           PxLMC(iTRKMC) = 0.
           PyLMC(iTRKMC) = 0.
           PzLMC(iTRKMC) = 0.
           xFMC2(iTRKMC) = 0.
           yFMC2(iTRKMC) = 0.
           zFMC2(iTRKMC) = 0.
           PxFMC2(iTRKMC) = 0.
           PyFMC2(iTRKMC) = 0.
           PzFMC2(iTRKMC) = 0.
           xLMC2(iTRKMC) = 0.
           yLMC2(iTRKMC) = 0.
           zLMC2(iTRKMC) = 0.
           PxLMC2(iTRKMC) = 0.
           PyLMC2(iTRKMC) = 0.
           PzLMC2(iTRKMC) = 0.
         END DO

C         Already filled Evt%Trk by the get function called in the previous block

         nTfMC = Evt%TrkMC%n
         IF ( nTfMC < 0 .OR. nTfMC > 100 ) THEN
            WRITE(*,*) 'ERROR TRKMC - nTfMC Out of bound : ', nTfMC
         END IF

         IF (nTfMC > 0 .AND. nTfMC <= 100) THEN
            DO iTRKMC=1, nTfMC
               NConTr(iTRKMC) = Evt%TrkMC%ncontr(iTRKMC)
               IF ( NConTr(iTRKMC) < 0 .OR. NConTr(iTRKMC) > 10 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - NConTr[1] Out of bound : ', NConTr(iTRKMC)
               END IF
               TrkIne1(iTRKMC) = Evt%TrkMC%kine1(iTRKMC)
               IF ( TrkIne1(iTRKMC) < 0 .OR. TrkIne1(iTRKMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrkIne1[2] Out of bound : ', TrkIne1(iTRKMC)
               END IF
               TrType1(iTRKMC) = Evt%TrkMC%type1(iTRKMC)
               IF ( TrType1(iTRKMC) < 0 .OR. TrType1(iTRKMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrType1[3] Out of bound : ', TrType1(iTRKMC)
               END IF
               TrHits1(iTRKMC) = Evt%TrkMC%hits1(iTRKMC)
               IF ( TrHits1(iTRKMC) < 0 .OR. TrHits1(iTRKMC) > 1000 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrHits1[4] Out of bound : ', TrHits1(iTRKMC)
               END IF
               TrkIne2(iTRKMC) = Evt%TrkMC%kine2(iTRKMC)
               IF ( TrkIne2(iTRKMC) < 0 .OR. TrkIne2(iTRKMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrkIne2[5] Out of bound : ', TrkIne2(iTRKMC)
               END IF
               TrType2(iTRKMC) = Evt%TrkMC%type2(iTRKMC)
               IF ( TrType2(iTRKMC) < 0 .OR. TrType2(iTRKMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrType2[6] Out of bound : ', TrType2(iTRKMC)
               END IF
               TrHits2(iTRKMC) = Evt%TrkMC%hits2(iTRKMC)
               IF ( TrHits2(iTRKMC) < 0 .OR. TrHits2(iTRKMC) > 1000 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrHits2[7] Out of bound : ', TrHits2(iTRKMC)
               END IF
               TrkIn3(iTRKMC) = Evt%TrkMC%kine3(iTRKMC)
               IF ( TrkIn3(iTRKMC) < 0 .OR. TrkIn3(iTRKMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrkIn3[8] Out of bound : ', TrkIn3(iTRKMC)
               END IF
               TrType3(iTRKMC) = Evt%TrkMC%type3(iTRKMC)
               IF ( TrType3(iTRKMC) < 0 .OR. TrType3(iTRKMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrType3[9] Out of bound : ', TrType3(iTRKMC)
               END IF
               TrHits3(iTRKMC) = Evt%TrkMC%hits3(iTRKMC)
               IF ( TrHits3(iTRKMC) < 0 .OR. TrHits3(iTRKMC) > 1000 ) THEN
                  WRITE(*,*) 'ERROR TRKMC - TrHits3[10] Out of bound : ', TrHits3(iTRKMC)
               END IF
                 xFMC(iTRKMC) = Evt%TrkMC%xfirst(iTRKMC)
                 yFMC(iTRKMC) = Evt%TrkMC%yfirst(iTRKMC)
                 zFMC(iTRKMC) = Evt%TrkMC%zfirst(iTRKMC)
                 PxFMC(iTRKMC) = Evt%TrkMC%pxfirst(iTRKMC)
                 PyFMC(iTRKMC) = Evt%TrkMC%pyfirst(iTRKMC)
                 PzFMC(iTRKMC) = Evt%TrkMC%pzfirst(iTRKMC)
                 xLMC(iTRKMC) = Evt%TrkMC%xlast(iTRKMC)
                 yLMC(iTRKMC) = Evt%TrkMC%ylast(iTRKMC)
                 zLMC(iTRKMC) = Evt%TrkMC%zlast(iTRKMC)
                 PxLMC(iTRKMC) = Evt%TrkMC%pxlast(iTRKMC)
                 PyLMC(iTRKMC) = Evt%TrkMC%pylast(iTRKMC)
                 PzLMC(iTRKMC) = Evt%TrkMC%pzlast(iTRKMC)
                 xFMC2(iTRKMC) = Evt%TrkMC%xmcfirst(iTRKMC)
                 yFMC2(iTRKMC) = Evt%TrkMC%ymcfirst(iTRKMC)
                 zFMC2(iTRKMC) = Evt%TrkMC%zmcfirst(iTRKMC)
                 PxFMC2(iTRKMC) = Evt%TrkMC%pxmcfirst(iTRKMC)
                 PyFMC2(iTRKMC) = Evt%TrkMC%pymcfirst(iTRKMC)
                 PzFMC2(iTRKMC) = Evt%TrkMC%pzmcfirst(iTRKMC)
                 xLMC2(iTRKMC) = Evt%TrkMC%xmclast(iTRKMC)
                 yLMC2(iTRKMC) = Evt%TrkMC%ymclast(iTRKMC)
                 zLMC2(iTRKMC) = Evt%TrkMC%zmclast(iTRKMC)
                 PxLMC2(iTRKMC) = Evt%TrkMC%pxmclast(iTRKMC)
                 PyLMC2(iTRKMC) = Evt%TrkMC%pymclast(iTRKMC)
                 PzLMC2(iTRKMC) = Evt%TrkMC%pzmclast(iTRKMC)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKMC - nTfMC Index not valid: ', nTfMC
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkvold
C-----------------------------------------------------------------------
      IF (TRKVOLDFLAG) THEN
         nTVOld = 0.
         DO iTRKVOLD=1, 30
           iVOld(iTRKVOLD) = 0.
           TrkNumVOld(iTRKVOLD) = 0.
           CurVOld(iTRKVOLD) = 0.
           PhiVOld(iTRKVOLD) = 0.
           CotVOld(iTRKVOLD) = 0.
           PxTVOld(iTRKVOLD) = 0.
           PyTVOld(iTRKVOLD) = 0.
           PzTVOld(iTRKVOLD) = 0.
           PModVOld(iTRKVOLD) = 0.
           LenVOld(iTRKVOLD) = 0.
           ChiVOld(iTRKVOLD) = 0.
           PidTVOld(iTRKVOLD) = 0.
           Cov11TVOld(iTRKVOLD) = 0.
           Cov12TVOld(iTRKVOLD) = 0.
           Cov13TVOld(iTRKVOLD) = 0.
           Cov22TVOld(iTRKVOLD) = 0.
           Cov23TVOld(iTRKVOLD) = 0.
           Cov33TVOld(iTRKVOLD) = 0.
         END DO

         istat = TRKVOLD2STRU(evt%vtxold,evt%trkvold,evt%trkold
     1                                           ,evt%trkmcold)

         nTVOld = Evt%TrkvOld%n
         IF ( nTVOld < 0 .OR. nTVOld > 30 ) THEN
            WRITE(*,*) 'ERROR TRKVOLD - nTVOld Out of bound : ', nTVOld
         END IF

         IF (nTVOld > 0 .AND. nTVOld <= 30) THEN
            DO iTRKVOLD=1, nTVOld
               iVOld(iTRKVOLD) = Evt%TrkvOld%iv(iTRKVOLD)
               IF ( iVOld(iTRKVOLD) < 0 .OR. iVOld(iTRKVOLD) > 30 ) THEN
                  WRITE(*,*) 'ERROR TRKVOLD - iVOld[1] Out of bound : ', iVOld(iTRKVOLD)
               END IF
               TrkNumVOld(iTRKVOLD) = Evt%Trkvold%trkpoi(iTRKVOLD)
               IF ( TrkNumVOld(iTRKVOLD) < 0 .OR. TrkNumVOld(iTRKVOLD) > 999 ) THEN
                  WRITE(*,*) 'ERROR TRKVOLD - TrkNumVOld[2] Out of bound : ', TrkNumVOld(iTRKVOLD)
               END IF
                 CurVOld(iTRKVOLD) = Evt%Trkvold%cur(iTRKVOLD)
                 PhiVOld(iTRKVOLD) = Evt%Trkvold%phi(iTRKVOLD)
                 CotVOld(iTRKVOLD) = Evt%Trkvold%cot(iTRKVOLD)
                 PxTVOld(iTRKVOLD) = Evt%Trkvold%px(iTRKVOLD)
                 PyTVOld(iTRKVOLD) = Evt%Trkvold%py(iTRKVOLD)
                 PzTVOld(iTRKVOLD) = Evt%Trkvold%pz(iTRKVOLD)
                 PModVOld(iTRKVOLD) = Evt%Trkvold%pmod(iTRKVOLD)
                 LenVOld(iTRKVOLD) = Evt%Trkvold%Length(iTRKVOLD)
                 ChiVOld(iTRKVOLD) = Evt%Trkvold%Chi2(iTRKVOLD)
                 PidTVOld(iTRKVOLD) = Evt%Trkvold%ipid(iTRKVOLD)
                 Cov11TVOld(iTRKVOLD) = Evt%Trkvold%cov11(iTRKVOLD)
                 Cov12TVOld(iTRKVOLD) = Evt%Trkvold%cov12(iTRKVOLD)
                 Cov13TVOld(iTRKVOLD) = Evt%Trkvold%cov13(iTRKVOLD)
                 Cov22TVOld(iTRKVOLD) = Evt%Trkvold%cov22(iTRKVOLD)
                 Cov23TVOld(iTRKVOLD) = Evt%Trkvold%cov23(iTRKVOLD)
                 Cov33TVOld(iTRKVOLD) = Evt%Trkvold%cov33(iTRKVOLD)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKVOLD - nTVOld Index not valid: ', nTVOld
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block vtxold
C-----------------------------------------------------------------------
      IF (VTXOLDFLAG) THEN
         nVOld = 0.
         DO iVTXOLD=1, 10
           VtxOld(iVTXOLD) = 0.
           xVOld(iVTXOLD) = 0.
           yVOld(iVTXOLD) = 0.
           ZVOld(iVTXOLD) = 0.
           ChiVTxOld(iVTXOLD) = 0.
           QuaLVOld(iVTXOLD) = 0.
           FitIdVOld(iVTXOLD) = 0.
           VtxCov1Old(iVTXOLD) = 0.
           VtxCov2Old(iVTXOLD) = 0.
           VtxCov3Old(iVTXOLD) = 0.
           VtxCov4Old(iVTXOLD) = 0.
           VtxCov5Old(iVTXOLD) = 0.
           VtxCov6Old(iVTXOLD) = 0.
         END DO

C         Already filled Evt%Trk by the get function called in the previous block

         nVOld = Evt%vtxold%n
         IF ( nVOld < 0 .OR. nVOld > 10 ) THEN
            WRITE(*,*) 'ERROR VTXOLD - nVOld Out of bound : ', nVOld
         END IF

         IF (nVOld > 0 .AND. nVOld <= 10) THEN
            DO iVTXOLD=1, nVOld
               VtxOld(iVTXOLD) = Evt%Vtxold%Ntrk(iVTXOLD)
               IF ( VtxOld(iVTXOLD) < 0 .OR. VtxOld(iVTXOLD) > 10 ) THEN
                  WRITE(*,*) 'ERROR VTXOLD - VtxOld[1] Out of bound : ',
     1                                                   VtxOld(iVTXOLD)
               END IF
                 xVOld(iVTXOLD) = Evt%Vtxold%X(iVTXOLD)
                 yVOld(iVTXOLD) = Evt%Vtxold%Y(iVTXOLD)
                 ZVOld(iVTXOLD) = Evt%Vtxold%Z(iVTXOLD)
                 ChiVTxOld(iVTXOLD) = Evt%Vtxold%Chi2(iVTXOLD)
                 QuaLVOld(iVTXOLD) = Evt%Vtxold%Qual(iVTXOLD)
                 FitIdVOld(iVTXOLD) = Evt%Vtxold%Fitid(iVTXOLD)
                 VtxCov1Old(iVTXOLD) = Evt%Vtxold%Cov1(iVTXOLD)
                 VtxCov2Old(iVTXOLD) = Evt%Vtxold%Cov2(iVTXOLD)
                 VtxCov3Old(iVTXOLD) = Evt%Vtxold%Cov3(iVTXOLD)
                 VtxCov4Old(iVTXOLD) = Evt%Vtxold%Cov4(iVTXOLD)
                 VtxCov5Old(iVTXOLD) = Evt%Vtxold%Cov5(iVTXOLD)
                 VtxCov6Old(iVTXOLD) = Evt%Vtxold%Cov6(iVTXOLD)
           END DO
         ELSE
            WRITE(*,*) 'ERROR VTXOLD - nVOld Index not valid: ', nVOld
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkold
C-----------------------------------------------------------------------
      IF (TRKSOLDFLAG) THEN
         nTOld = 0.
         DO iTRKOLD=1, 100
           TrkIndOld(iTRKOLD) = 0.
           TrkVerOld(iTRKOLD) = 0.
           CurOld(iTRKOLD) = 0.
           PhiOld(iTRKOLD) = 0.
           CotOld(iTRKOLD) = 0.
           PxTOld(iTRKOLD) = 0.
           PyTOld(iTRKOLD) = 0.
           PzTOld(iTRKOLD) = 0.
           PModOld(iTRKOLD) = 0.
           LenOld(iTRKOLD) = 0.
           xFirstOld(iTRKOLD) = 0.
           yFirstOld(iTRKOLD) = 0.
           zFirstOld(iTRKOLD) = 0.
           CurLaOld(iTRKOLD) = 0.
           PhiLaOld(iTRKOLD) = 0.
           CotLaOld(iTRKOLD) = 0.
           PxTLaOld(iTRKOLD) = 0.
           PyTLaOld(iTRKOLD) = 0.
           PzTLaOld(iTRKOLD) = 0.
           PModLaOld(iTRKOLD) = 0.
           SPcaOld(iTRKOLD) = 0.
           SZetaOld(iTRKOLD) = 0.
           SCurVOld(iTRKOLD) = 0.
           SCotGOld(iTRKOLD) = 0.
           SPhiOld(iTRKOLD) = 0.
           xLastOld(iTRKOLD) = 0.
           yLastOld(iTRKOLD) = 0.
           zLastOld(iTRKOLD) = 0.
           xPca2Old(iTRKOLD) = 0.
           yPca2Old(iTRKOLD) = 0.
           zPca2Old(iTRKOLD) = 0.
           QTrk2Old(iTRKOLD) = 0.
           CotPca2Old(iTRKOLD) = 0.
           PhiPca2Old(iTRKOLD) = 0.
           nPrhiTOld(iTRKOLD) = 0.
           nFifthITOld(iTRKOLD) = 0.
           nMskInkOld(iTRKOLD) = 0.
           Chi2FitOld(iTRKOLD) = 0.
           Chi2MSOld(iTRKOLD) = 0.
         END DO

C         Already filled Evt%TrkOld by the get function called in the previous block

         nTOld = Evt%Trkold%n
         IF ( nTOld < 0 .OR. nTOld > 100 ) THEN
            WRITE(*,*) 'ERROR TRKOLD - nTOld Out of bound : ', nTOld
         END IF

         IF (nTOld > 0 .AND. nTOld <= 100) THEN
            DO iTRKOLD=1, nTOld
                 TrkIndOld(iTRKOLD) = Evt%Trkold%trkind(iTRKOLD)
                 TrkVerOld(iTRKOLD) = Evt%Trkold%version(iTRKOLD)
                 CurOld(iTRKOLD) = Evt%Trkold%cur(iTRKOLD)
                 PhiOld(iTRKOLD) = Evt%Trkold%phi(iTRKOLD)
                 CotOld(iTRKOLD) = Evt%Trkold%cot(iTRKOLD)
                 PxTOld(iTRKOLD) = Evt%Trkold%px(iTRKOLD)
                 PyTOld(iTRKOLD) = Evt%Trkold%py(iTRKOLD)
                 PzTOld(iTRKOLD) = Evt%Trkold%pz(iTRKOLD)
                 PModOld(iTRKOLD) = Evt%Trkold%pmod(iTRKOLD)
                 LenOld(iTRKOLD) = Evt%Trkold%length(iTRKOLD)
                 xFirstOld(iTRKOLD) = Evt%Trkold%x(iTRKOLD)
                 yFirstOld(iTRKOLD) = Evt%Trkold%y(iTRKOLD)
                 zFirstOld(iTRKOLD) = Evt%Trkold%z(iTRKOLD)
                 CurLaOld(iTRKOLD) = Evt%Trkold%curlast(iTRKOLD)
                 PhiLaOld(iTRKOLD) = Evt%Trkold%philast(iTRKOLD)
                 CotLaOld(iTRKOLD) = Evt%Trkold%cotlast(iTRKOLD)
                 PxTLaOld(iTRKOLD) = Evt%Trkold%pxlast(iTRKOLD)
                 PyTLaOld(iTRKOLD) = Evt%Trkold%pylast(iTRKOLD)
                 PzTLaOld(iTRKOLD) = Evt%Trkold%pzlast(iTRKOLD)
                 PModLaOld(iTRKOLD) = Evt%Trkold%pmodlast(iTRKOLD)
                 SPcaOld(iTRKOLD) = Evt%Trkold%SigPCA(iTRKOLD)
                 SZetaOld(iTRKOLD) = Evt%Trkold%SigZeta(iTRKOLD)
                 SCurVOld(iTRKOLD) = Evt%Trkold%SigCurv(iTRKOLD)
                 SCotGOld(iTRKOLD) = Evt%Trkold%SigCot(iTRKOLD)
                 SPhiOld(iTRKOLD) = Evt%Trkold%SigPhi(iTRKOLD)
                 xLastOld(iTRKOLD) = Evt%Trkold%xlast(iTRKOLD)
                 yLastOld(iTRKOLD) = Evt%Trkold%ylast(iTRKOLD)
                 zLastOld(iTRKOLD) = Evt%Trkold%zlast(iTRKOLD)
                 xPca2Old(iTRKOLD) = Evt%Trkold%xpca(iTRKOLD)
                 yPca2Old(iTRKOLD) = Evt%Trkold%ypca(iTRKOLD)
                 zPca2Old(iTRKOLD) = Evt%Trkold%zpca(iTRKOLD)
                 QTrk2Old(iTRKOLD) = Evt%Trkold%qtrk(iTRKOLD)
                 CotPca2Old(iTRKOLD) = Evt%Trkold%cotpca(iTRKOLD)
                 PhiPca2Old(iTRKOLD) = Evt%Trkold%phipca(iTRKOLD)
                 nPrhiTOld(iTRKOLD) = Evt%Trkold%NumPRhit(iTRKOLD)
                 nFifthITOld(iTRKOLD) = Evt%Trkold%NumFitHit(iTRKOLD)
                 nMskInkOld(iTRKOLD) = Evt%Trkold%nmskink(iTRKOLD)
                 Chi2FitOld(iTRKOLD) = Evt%Trkold%chi2fit(iTRKOLD)
                 Chi2MSOld(iTRKOLD) = Evt%Trkold%chi2ms(iTRKOLD)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKOLD - nTOld Index not valid: ', nTOld
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkmcold
C-----------------------------------------------------------------------
      IF (TRKMCOLDFLAG) THEN
         nTfMCOld = 0.
         DO iTRKMCOLD=1, 100
           nContrOld(iTRKMCOLD) = 0.
           TrkIne1Old(iTRKMCOLD) = 0.
           TrType1Old(iTRKMCOLD) = 0.
           TrHits1Old(iTRKMCOLD) = 0.
           TrkIne2Old(iTRKMCOLD) = 0.
           TrType2Old(iTRKMCOLD) = 0.
           TrHits2Old(iTRKMCOLD) = 0.
           TrkIne3Old(iTRKMCOLD) = 0.
           TrType3Old(iTRKMCOLD) = 0.
           TrHits3Old(iTRKMCOLD) = 0.
           xFMCOld(iTRKMCOLD) = 0.
           yFMCOld(iTRKMCOLD) = 0.
           zFMCOld(iTRKMCOLD) = 0.
           PxFMCOld(iTRKMCOLD) = 0.
           PyFMCOld(iTRKMCOLD) = 0.
           PzFMCOld(iTRKMCOLD) = 0.
           xLMCOld(iTRKMCOLD) = 0.
           yLMCOld(iTRKMCOLD) = 0.
           zLMCOld(iTRKMCOLD) = 0.
           PxLMCOld(iTRKMCOLD) = 0.
           PyLMCOld(iTRKMCOLD) = 0.
           PzLMCOld(iTRKMCOLD) = 0.
           xFMC2Old(iTRKMCOLD) = 0.
           yFMC2Old(iTRKMCOLD) = 0.
           zFMC2Old(iTRKMCOLD) = 0.
           PxFMC2Old(iTRKMCOLD) = 0.
           PyFMC2Old(iTRKMCOLD) = 0.
           PzFMC2Old(iTRKMCOLD) = 0.
           xLMC2Old(iTRKMCOLD) = 0.
           yLMC2Old(iTRKMCOLD) = 0.
           zLMC2Old(iTRKMCOLD) = 0.
           PxLMC2Old(iTRKMCOLD) = 0.
           PyLMC2Old(iTRKMCOLD) = 0.
           PzLMC2Old(iTRKMCOLD) = 0.
         END DO

C         Already filled Evt%TrkMCOld by the get function called in the previous block

         nTfMCOld = Evt%Trkmcold%n
         IF ( nTfMCOld < 0 .OR. nTfMCOld > 100 ) THEN
            WRITE(*,*) 'ERROR TRKMCOLD - nTfMCOld Out of bound : ', nTfMCOld
         END IF

         IF (nTfMCOld > 0 .AND. nTfMCOld <= 100) THEN
            DO iTRKMCOLD=1, nTfMCOld
               nContrOld(iTRKMCOLD) = Evt%Trkmcold%ncontr(iTRKMCOLD)
               IF ( nContrOld(iTRKMCOLD) < 0 .OR. nContrOld(iTRKMCOLD) > 10 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - nContrOld[1] Out of bound : ', nContrOld(iTRKMCOLD)
               END IF
               TrkIne1Old(iTRKMCOLD) = Evt%Trkmcold%kine1(iTRKMCOLD)
               IF ( TrkIne1Old(iTRKMCOLD) < 0 .OR. TrkIne1Old(iTRKMCOLD) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrkIne1Old[2] Out of bound : ', TrkIne1Old(iTRKMCOLD)
               END IF
               TrType1Old(iTRKMCOLD) = Evt%Trkmcold%type1(iTRKMCOLD)
               IF ( TrType1Old(iTRKMCOLD) < 0 .OR. TrType1Old(iTRKMCOLD) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrType1Old[3] Out of bound : ', TrType1Old(iTRKMCOLD)
               END IF
               TrHits1Old(iTRKMCOLD) = Evt%Trkmcold%hits1(iTRKMCOLD)
               IF ( TrHits1Old(iTRKMCOLD) < 0 .OR. TrHits1Old(iTRKMCOLD) > 1000 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrHits1Old[4] Out of bound : ', TrHits1Old(iTRKMCOLD)
               END IF
               TrkIne2Old(iTRKMCOLD) = Evt%Trkmcold%kine2(iTRKMCOLD)
               IF ( TrkIne2Old(iTRKMCOLD) < 0 .OR. TrkIne2Old(iTRKMCOLD) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrkIne2Old[5] Out of bound : ', TrkIne2Old(iTRKMCOLD)
               END IF
               TrType2Old(iTRKMCOLD) = Evt%Trkmcold%type2(iTRKMCOLD)
               IF ( TrType2Old(iTRKMCOLD) < 0 .OR. TrType2Old(iTRKMCOLD) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrType2Old[6] Out of bound : ', TrType2Old(iTRKMCOLD)
               END IF
               TrHits2Old(iTRKMCOLD) = Evt%Trkmcold%hits2(iTRKMCOLD)
               IF ( TrHits2Old(iTRKMCOLD) < 0 .OR. TrHits2Old(iTRKMCOLD) > 1000 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrHits2Old[7] Out of bound : ', TrHits2Old(iTRKMCOLD)
               END IF
               TrkIne3Old(iTRKMCOLD) = Evt%Trkmcold%kine3(iTRKMCOLD)
               IF ( TrkIne3Old(iTRKMCOLD) < 0 .OR. TrkIne3Old(iTRKMCOLD) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrkIne3Old[8] Out of bound : ', TrkIne3Old(iTRKMCOLD)
               END IF
               TrType3Old(iTRKMCOLD) = Evt%Trkmcold%type3(iTRKMCOLD)
               IF ( TrType3Old(iTRKMCOLD) < 0 .OR. TrType3Old(iTRKMCOLD) > 100 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrType3Old[9] Out of bound : ', TrType3Old(iTRKMCOLD)
               END IF
               TrHits3Old(iTRKMCOLD) = Evt%Trkmcold%hits3(iTRKMCOLD)
               IF ( TrHits3Old(iTRKMCOLD) < 0 .OR. TrHits3Old(iTRKMCOLD) > 1000 ) THEN
                  WRITE(*,*) 'ERROR TRKMCOLD - TrHits3Old[10] Out of bound : ', TrHits3Old(iTRKMCOLD)
               END IF
                 xFMCOld(iTRKMCOLD) = Evt%Trkmcold%xfirst(iTRKMCOLD)
                 yFMCOld(iTRKMCOLD) = Evt%Trkmcold%yfirst(iTRKMCOLD)
                 zFMCOld(iTRKMCOLD) = Evt%Trkmcold%zfirst(iTRKMCOLD)
                 PxFMCOld(iTRKMCOLD) = Evt%Trkmcold%pxfirst(iTRKMCOLD)
                 PyFMCOld(iTRKMCOLD) = Evt%Trkmcold%pyfirst(iTRKMCOLD)
                 PzFMCOld(iTRKMCOLD) = Evt%Trkmcold%pzfirst(iTRKMCOLD)
                 xLMCOld(iTRKMCOLD) = Evt%Trkmcold%xlast(iTRKMCOLD)
                 yLMCOld(iTRKMCOLD) = Evt%Trkmcold%ylast(iTRKMCOLD)
                 zLMCOld(iTRKMCOLD) = Evt%Trkmcold%zlast(iTRKMCOLD)
                 PxLMCOld(iTRKMCOLD) = Evt%Trkmcold%pxlast(iTRKMCOLD)
                 PyLMCOld(iTRKMCOLD) = Evt%Trkmcold%pylast(iTRKMCOLD)
                 PzLMCOld(iTRKMCOLD) = Evt%Trkmcold%pzlast(iTRKMCOLD)
                 xFMC2Old(iTRKMCOLD) = Evt%Trkmcold%xmcfirst(iTRKMCOLD)
                 yFMC2Old(iTRKMCOLD) = Evt%Trkmcold%ymcfirst(iTRKMCOLD)
                 zFMC2Old(iTRKMCOLD) = Evt%Trkmcold%zmcfirst(iTRKMCOLD)
                 PxFMC2Old(iTRKMCOLD) = Evt%Trkmcold%pxmcfirst(iTRKMCOLD)
                 PyFMC2Old(iTRKMCOLD) = Evt%Trkmcold%pymcfirst(iTRKMCOLD)
                 PzFMC2Old(iTRKMCOLD) = Evt%Trkmcold%pzmcfirst(iTRKMCOLD)
                 xLMC2Old(iTRKMCOLD) = Evt%Trkmcold%xmclast(iTRKMCOLD)
                 yLMC2Old(iTRKMCOLD) = Evt%Trkmcold%ymclast(iTRKMCOLD)
                 zLMC2Old(iTRKMCOLD) = Evt%Trkmcold%zmclast(iTRKMCOLD)
                 PxLMC2Old(iTRKMCOLD) = Evt%Trkmcold%pxmclast(iTRKMCOLD)
                 PyLMC2Old(iTRKMCOLD) = Evt%Trkmcold%pymclast(iTRKMCOLD)
                 PzLMC2Old(iTRKMCOLD) = Evt%Trkmcold%pzmclast(iTRKMCOLD)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKMCOLD - nTfMCOld Index not valid: ', nTfMCOld
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dhit
C-----------------------------------------------------------------------
      IF (DHITFLAG) THEN
         nDHIT = 0.
         DO iDHIT=1, 2500
           DHPid(iDHIT) = 0.
           DHKin(iDHIT) = 0.
           DHAdd(iDHIT) = 0.
           DHx(iDHIT) = 0.
           DHy(iDHIT) = 0.
           DHz(iDHIT) = 0.
           DHPx(iDHIT) = 0.
           DHPy(iDHIT) = 0.
           DHPz(iDHIT) = 0.
           DHt(iDHIT) = 0.
           DHDedx(iDHIT) = 0.
           DHTLen(iDHIT) = 0.
           DHDTime(iDHIT) = 0.
           DHDFromW(iDHIT) = 0.
           DHFlag(iDHIT) = 0.
         END DO
         
         istat = DHIT_UPK(evt%dhit)
         
         nDHIT = Evt%DHIT%n
         IF ( nDHIT < 0 .OR. nDHIT > 2500 ) THEN
            WRITE(*,*) 'ERROR DHIT - nDHIT Out of bound : ', nDHIT
         END IF

         IF (nDHIT > 0 .AND. nDHIT <= 2500) THEN
            DO iDHIT=1, nDHIT
                 DHPid(iDHIT) = Evt%DHIT%pid(iDHIT)
                 DHKin(iDHIT) = Evt%DHIT%kinum(iDHIT)
                 DHAdd(iDHIT) = Evt%DHIT%celadr(iDHIT)
                 DHx(iDHIT) = Evt%DHIT%x(iDHIT)
                 DHy(iDHIT) = Evt%DHIT%y(iDHIT)
                 DHz(iDHIT) = Evt%DHIT%z(iDHIT)
                 DHPx(iDHIT) = Evt%DHIT%px(iDHIT)
                 DHPy(iDHIT) = Evt%DHIT%py(iDHIT)
                 DHPz(iDHIT) = Evt%DHIT%pz(iDHIT)
                 DHt(iDHIT) = Evt%DHIT%time(iDHIT)
                 DHDedx(iDHIT) = Evt%DHIT%dedx(iDHIT)
                 DHTLen(iDHIT) = Evt%DHIT%tlen(iDHIT)
                 DHDTime(iDHIT) = Evt%DHIT%dtime(iDHIT)
                 DHDFromW(iDHIT) = Evt%DHIT%dfromw(iDHIT)
                 DHFlag(iDHIT) = Evt%DHIT%flag(iDHIT)
           END DO
         ELSE
            WRITE(*,*) 'ERROR DHIT - nDHIT Index not valid: ', nDHIT
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dedx
C-----------------------------------------------------------------------
      IF (DEDXFLAG) THEN
         nDEDx = 0.
         DO iiDEDX=1, 20
            nADC(iiDEDX) = 0.
            IDEDx(iiDEDX) = 0.
            DO jjDEDX=1, 100
               ADCLayer(jjDEDX,iiDEDX) = 0.
               ADCWi1(jjDEDX,iiDEDX) = 0.
               ADCWi2(jjDEDX,iiDEDX) = 0.
               ADCLen(jjDEDX,iiDEDX) = 0.
               ADCLeff(jjDEDX,iiDEDX) = 0.
               ADCTim1(jjDEDX,iiDEDX) = 0.
               ADCTim2(jjDEDX,iiDEDX) = 0.
               ADCCharge(jjDEDX,iiDEDX) = 0.
            END DO
         END DO

         istat = DEDX2STRU_Reset(Evt%DEDX2STRU)
         istat = DEDX2STRU_GET(Evt%DEDX2STRU)

         nDEDx = Evt%DEDX2STRU%numdedx
         IF ( nDEDx < 0 .OR. nDEDx > 20 ) THEN
            WRITE(*,*) 'ERROR DEDX - nDEDx Out of bound : ', nDEDx
         END IF

         IF (nDEDx > 0 .AND. nDEDx <= 20) THEN
           DO iiDEDX=1, nDEDx
              nADC(iiDEDX) = Evt%DEDX2STRU%numeroadc(iiDEDX)
              IDEDx(iiDEDX) = Evt%DEDX2STRU%indicededx(iiDEDX)
              DO jjDEDX=1, 100
                 ADCLayer(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%lay(jjDEDX,iiDEDX)
                 ADCWi1(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%wir1(jjDEDX,iiDEDX)
                 ADCWi2(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%wir2(jjDEDX,iiDEDX)
                 ADCLen(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%step(jjDEDX,iiDEDX)
                 ADCLeff(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%effs(jjDEDX,iiDEDX)
                 ADCTim1(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%tim1(jjDEDX,iiDEDX)
                 ADCTim2(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%tim2(jjDEDX,iiDEDX)
                 ADCCharge(jjDEDX,iiDEDX) = 
     1                         Evt%DEDX2STRU%carica(jjDEDX,iiDEDX)
              END DO
           END DO
         ELSE
            WRITE(*,*) 'ERROR DEDX - nDEDx Index not valid: ', nDEDx
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block dprs
C-----------------------------------------------------------------------
      IF (DPRSFLAG) THEN
         nDPRS = 0.
         DO iiDPRS=1, 200
           nView(iiDPRS) = 0.
           iDPRS(iiDPRS) = 0.
           DPRSVer(iiDPRS) = 0.
           nPos(iiDPRS) = 0.
           nNeg(iiDPRS) = 0.
           xPCA(iiDPRS) = 0.
           yPCA(iiDPRS) = 0.
           zPCA(iiDPRS) = 0.
           xLst(iiDPRS) = 0.
           yLst(iiDPRS) = 0.
           zLst(iiDPRS) = 0.
           CurP(iiDPRS) = 0.
           PhiP(iiDPRS) = 0.
           CotP(iiDPRS) = 0.
           Qual(iiDPRS) = 0.
           iPFl(iiDPRS) = 0.
           PrKine(iiDPRS) = 0.
           PrKHit(iiDPRS) = 0.
         END DO

         istat = GET_DPRS_STRUCT(Evt%DPRS%NDPRS)

         nDPRS =  Evt%DPRS%NDPRS
         IF ( nDPRS < 0 .OR. nDPRS > 200 ) THEN
            WRITE(*,*) 'ERROR DPRS - nDPRS Out of bound : ', nDPRS
         END IF

         IF (nDPRS > 0 .AND. nDPRS <= 200) THEN
            DO iiDPRS=1, nDPRS
               nView(iiDPRS) =  Evt%DPRS%NVIEW(iiDPRS)
               iDPRS(iiDPRS) =  Evt%DPRS%IDPRS(iiDPRS)
               DPRSVer(iiDPRS) =  Evt%DPRS%VERS(iiDPRS)
               nPos(iiDPRS) =  Evt%DPRS%NPOS(iiDPRS)
               nNeg(iiDPRS) =  Evt%DPRS%NNEG(iiDPRS)
               xPCA(iiDPRS) =  Evt%DPRS%XPCA(iiDPRS)
               yPCA(iiDPRS) =  Evt%DPRS%YPCA(iiDPRS)
               zPCA(iiDPRS) =  Evt%DPRS%ZPCA(iiDPRS)
               xLst(iiDPRS) =  Evt%DPRS%XLST(iiDPRS)
               yLst(iiDPRS) =  Evt%DPRS%YLST(iiDPRS)
               zLst(iiDPRS) =  Evt%DPRS%ZLST(iiDPRS)
               CurP(iiDPRS) =  Evt%DPRS%CURP(iiDPRS)
               PhiP(iiDPRS) =  Evt%DPRS%PHIP(iiDPRS)
               CotP(iiDPRS) =  Evt%DPRS%COTP(iiDPRS)
               Qual(iiDPRS) =  Evt%DPRS%QUAL(iiDPRS)
               iPFl(iiDPRS) =  Evt%DPRS%IPFL(iiDPRS)
               PrKine(iiDPRS) =  Evt%DPRS%KINE(iiDPRS)
               PrKHit(iiDPRS) =  Evt%DPRS%NHKINE(iiDPRS)
            END DO
         ELSE
            WRITE(*,*) 'ERROR DPRS - nDPRS Index not valid: ', nDPRS
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block mc
C-----------------------------------------------------------------------
      IF (GEANFIFLAG) THEN
         nTMC = 0.
         nVtxMC = 0.
         DO iMC=1, 50
           Kine(iMC) = 0.
           PidMC(iMC) = 0.
           VirMom(iMC) = 0.
           PxMC(iMC) = 0.
           PyMC(iMC) = 0.
           PzMC(iMC) = 0.
           xCv(iMC) = 0.
           yCv(iMC) = 0.
           zCv(iMC) = 0.
           TOfCv(iMC) = 0.
           TheMC(iMC) = 0.
           PhiMC(iMC) = 0.
           VtxMC(iMC) = 0.
           nDchMC(iMC) = 0.
           xFhMC(iMC) = 0.
           yFhMC(iMC) = 0.
           zFhMC(iMC) = 0.
           PxFhMC(iMC) = 0.
           PyFhMC(iMC) = 0.
           PzFhMC(iMC) = 0.
           xLhMC(iMC) = 0.
           yLhMC(iMC) = 0.
           zLhMC(iMC) = 0.
           PxLhMC(iMC) = 0.
           PyLhMC(iMC) = 0.
           PzLhMC(iMC) = 0.
         END DO
         DO iMC=1, 30
           KinMom(iMC) = 0.
           Mother(iMC) = 0.
           xVMC(iMC) = 0.
           yVMC(iMC) = 0.
           zVMC(iMC) = 0.
           TOfVMC(iMC) = 0.
           nTvTx(iMC) = 0.
         END DO

         istat = GETMCSTRU(Evt%MC)

         nTMC = Evt%MC%ntrk
         IF ( nTMC < 0 .OR. nTMC > 50 ) THEN
            WRITE(*,*) 'ERROR MC - nTMC Out of bound : ', nTMC
         END IF

         IF (nTMC > 0 .AND. nTMC <= 50) THEN
            DO iMC=1, nTMC
               Kine(iMC) = Evt%MC%kin(iMC)
               IF ( Kine(iMC) < 0 .OR. Kine(iMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR MC - Kine[1] Out of bound : ', Kine(iMC)
               END IF
               PidMC(iMC) = Evt%MC%pid(iMC)
               IF ( PidMC(iMC) < 0 .OR. PidMC(iMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR MC - PidMC[2] Out of bound : ', PidMC(iMC)
               END IF
               VirMom(iMC) = Evt%MC%virmom(iMC)
               IF ( VirMom(iMC) < 0 .OR. VirMom(iMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR MC - VirMom[3] Out of bound : ', VirMom(iMC)
               END IF
               PxMC(iMC) = Evt%MC%px(iMC)
               PyMC(iMC) = Evt%MC%py(iMC)
               PzMC(iMC) = Evt%MC%pz(iMC)
               xCv(iMC) = Evt%MC%xcv(iMC)
               yCv(iMC) = Evt%MC%ycv(iMC)
               zCv(iMC) = Evt%MC%zcv(iMC)
               TOfCv(iMC) = Evt%MC%tofcv(iMC)
               TheMC(iMC) = Evt%MC%theta(iMC)
               PhiMC(iMC) = Evt%MC%phi(iMC)
               VtxMC(iMC) = Evt%MC%Indv(iMC)
               IF ( VtxMC(iMC) < 0 .OR. VtxMC(iMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR MC - VtxMC[13] Out of bound : ', VtxMC(iMC)
               END IF
               nDchMC(iMC) = Evt%MC%ndchmc(iMC)
               xFhMC(iMC) = Evt%MC%xfhmc(iMC)
               yFhMC(iMC) = Evt%MC%yfhmc(iMC)
               zFhMC(iMC) = Evt%MC%zfhmc(iMC)
               PxFhMC(iMC) = Evt%MC%pxfhmc(iMC)
               PyFhMC(iMC) = Evt%MC%pyfhmc(iMC)
               PzFhMC(iMC) = Evt%MC%pzfhmc(iMC)
               xLhMC(iMC) = Evt%MC%xlhmc(iMC)
               yLhMC(iMC) = Evt%MC%ylhmc(iMC)
               zLhMC(iMC) = Evt%MC%zlhmc(iMC)
               PxLhMC(iMC) = Evt%MC%pxlhmc(iMC)
               PyLhMC(iMC) = Evt%MC%pylhmc(iMC)
               PzLhMC(iMC) = Evt%MC%pzlhmc(iMC)
            END DO
         ELSE
            WRITE(*,*) 'ERROR MC - nTMC Index not valid: ', nTMC
         END IF

         nVtxMC = Evt%MC%numvtx
         IF ( nVtxMC < 0 .OR. nVtxMC > 30 ) THEN
            WRITE(*,*) 'ERROR MC - nVtxMC Out of bound : ', nVtxMC
         END IF
         IF (nVtxMC > 0 .AND. nVtxMC <= 50) THEN
            DO iMC=1, nVtxMC
               KinMom(iMC) = Evt%MC%kinmom(iMC)
               IF ( KinMom(iMC) < 0 .OR. KinMom(iMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR MC - KinMom[28] Out of bound : ', KinMom(iMC)
               END IF
               Mother(iMC) = Evt%MC%mother(iMC)
               IF ( Mother(iMC) < 0 .OR. Mother(iMC) > 100 ) THEN
                  WRITE(*,*) 'ERROR MC - Mother[29] Out of bound : ', Mother(iMC)
               END IF
               xVMC(iMC) = Evt%MC%xv(iMC)
               yVMC(iMC) = Evt%MC%yv(iMC)
               zVMC(iMC) = Evt%MC%zv(iMC)
               TOfVMC(iMC) = Evt%MC%tof(iMC)
               nTvTx(iMC) = Evt%MC%trkvtx(iMC)
            END DO
         ELSE
            WRITE(*,*) 'ERROR MC - nVtxMC Index not valid: ', nVtxMC
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tclo
C-----------------------------------------------------------------------
      IF (TCLOFLAG) THEN
         nTcl = 0.
         DO iTCLO=1, 40
           AssTr(iTCLO) = 0.
           AssCl(iTCLO) = 0.
           VerVer(iTCLO) = 0.
           xExt(iTCLO) = 0.
           yExt(iTCLO) = 0.
           zExt(iTCLO) = 0.
           AssLenG(iTCLO) = 0.
           AssChi(iTCLO) = 0.
           ExtPx(iTCLO) = 0.
           ExtPy(iTCLO) = 0.
           ExtPz(iTCLO) = 0.
         END DO

         istat =  GETTCLOSTRU(evt%tclo)

         nTcl = Evt%Tclo%nt
         IF ( nTcl < 0 .OR. nTcl > 40 ) THEN
            WRITE(*,*) 'ERROR TCLO - nTcl Out of bound : ', nTcl
         END IF

         IF (nTcl > 0 .AND. nTcl <= 40) THEN
            DO iTCLO=1, nTcl
               AssTr(iTCLO) = Evt%Tclo%trknum(iTCLO)
               IF ( AssTr(iTCLO) < 0 .OR. AssTr(iTCLO) > 999 ) THEN
                  WRITE(*,*) 'ERROR TCLO - AssTr[1] Out of bound : ', AssTr(iTCLO)
               END IF
               AssCl(iTCLO) = Evt%Tclo%clunum(iTCLO)
               IF ( AssCl(iTCLO) < 0 .OR. AssCl(iTCLO) > 100 ) THEN
                  WRITE(*,*) 'ERROR TCLO - AssCl[2] Out of bound : ', AssCl(iTCLO)
               END IF
                 VerVer(iTCLO) = Evt%Tclo%verver(iTCLO)
                 xExt(iTCLO) = Evt%Tclo%xext(iTCLO)
                 yExt(iTCLO) = Evt%Tclo%yext(iTCLO)
                 zExt(iTCLO) = Evt%Tclo%zext(iTCLO)
                 AssLenG(iTCLO) = Evt%Tclo%leng(iTCLO)
                 AssChi(iTCLO) = Evt%Tclo%chi(iTCLO)
                 ExtPx(iTCLO) = Evt%Tclo%px(iTCLO)
                 ExtPy(iTCLO) = Evt%Tclo%py(iTCLO)
                 ExtPz(iTCLO) = Evt%Tclo%pz(iTCLO)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TCLO - nTcl Index not valid: ', nTcl
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tclold
C-----------------------------------------------------------------------
      IF (TCLOLDFLAG) THEN
         nTclOld = 0.
         DO iTCLOLD=1, 40
           AssTrOld(iTCLOLD) = 0.
           AssClOld(iTCLOLD) = 0.
           VerVerOld(iTCLOLD) = 0.
           xExtOld(iTCLOLD) = 0.
           yExtOld(iTCLOLD) = 0.
           zExtOld(iTCLOLD) = 0.
           AssLenGOld(iTCLOLD) = 0.
           AssChiOld(iTCLOLD) = 0.
           ExtPxOld(iTCLOLD) = 0.
           ExtPyOld(iTCLOLD) = 0.
           ExtPzOld(iTCLOLD) = 0.
         END DO

         istat =  GETOLDTCLOSTRU(evt%tclold)

         nTclOld = Evt%Tclold%nt
         IF ( nTclOld < 0 .OR. nTclOld > 40 ) THEN
            WRITE(*,*) 'ERROR TCLOLD - nTclOld Out of bound : ', nTclOld
         END IF

         IF (nTclOld > 0 .AND. nTclOld <= 40) THEN
            DO iTCLOLD=1, nTclOld
               AssTrOld(iTCLOLD) = Evt%Tclold%trknum(iTCLOLD)
               IF ( AssTrOld(iTCLOLD) < 0 .OR. AssTrOld(iTCLOLD) > 999 ) THEN
                  WRITE(*,*) 'ERROR TCLOLD - AssTrOld[1] Out of bound : ', AssTrOld(iTCLOLD)
               END IF
               AssClOld(iTCLOLD) = Evt%Tclold%clunum(iTCLOLD)
               IF ( AssClOld(iTCLOLD) < 0 .OR. AssClOld(iTCLOLD) > 100 ) THEN
                  WRITE(*,*) 'ERROR TCLOLD - AssClOld[2] Out of bound : ', AssClOld(iTCLOLD)
               END IF
                 VerVerOld(iTCLOLD) = Evt%Tclold%verver(iTCLOLD)
                 xExtOld(iTCLOLD) = Evt%Tclold%xext(iTCLOLD)
                 yExtOld(iTCLOLD) = Evt%Tclold%yext(iTCLOLD)
                 zExtOld(iTCLOLD) = Evt%Tclold%zext(iTCLOLD)
                 AssLenGOld(iTCLOLD) = Evt%Tclold%leng(iTCLOLD)
                 AssChiOld(iTCLOLD) = Evt%Tclold%chi(iTCLOLD)
                 ExtPxOld(iTCLOLD) = Evt%Tclold%px(iTCLOLD)
                 ExtPyOld(iTCLOLD) = Evt%Tclold%py(iTCLOLD)
                 ExtPzOld(iTCLOLD) = Evt%Tclold%pz(iTCLOLD)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TCLOLD - nTclOld Index not valid: ', nTclOld
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block cfhi
C-----------------------------------------------------------------------
      IF (CFHIFLAG) THEN
         nFhi = 0.
         DO iCFHI=1, 300
           PidFhi(iCFHI) = 0.
           KinFhi(iCFHI) = 0.
           CelFhi(iCFHI) = 0.
           FlgFhi(iCFHI) = 0.
           xFhi(iCFHI) = 0.
           yFhi(iCFHI) = 0.
           zFhi(iCFHI) = 0.
           PxFhi(iCFHI) = 0.
           PyFhi(iCFHI) = 0.
           PzFhi(iCFHI) = 0.
           TofFhi(iCFHI) = 0.
           TLenFhi(iCFHI) = 0.
         END DO

         istat = GETCFHISTRU(evt%cfhi)

         nFhi = Evt%CFHI%n
         IF ( nFhi < 0 .OR. nFhi > 300 ) THEN
            WRITE(*,*) 'ERROR CFHI - nFhi Out of bound : ', nFhi
         END IF

         IF (nFhi > 0 .AND. nFhi <= 300) THEN
            DO iCFHI=1, nFhi
               PidFhi(iCFHI) = Evt%CFHI%pid(iCFHI)
               IF ( PidFhi(iCFHI) < 0 .OR. PidFhi(iCFHI) > 100 ) THEN
                  WRITE(*,*) 'ERROR CFHI - PidFhi[1] Out of bound : ', PidFhi(iCFHI)
               END IF
               KinFhi(iCFHI) = Evt%CFHI%kinum(iCFHI)
               IF ( KinFhi(iCFHI) < 0 .OR. KinFhi(iCFHI) > 100 ) THEN
                  WRITE(*,*) 'ERROR CFHI - KinFhi[2] Out of bound : ', KinFhi(iCFHI)
               END IF
               CelFhi(iCFHI) = Evt%CFHI%celadr(iCFHI)
               IF ( CelFhi(iCFHI) < 0 .OR. CelFhi(iCFHI) > 4880 ) THEN
                  WRITE(*,*) 'ERROR CFHI - CelFhi[3] Out of bound : ', CelFhi(iCFHI)
               END IF
               FlgFhi(iCFHI) = Evt%CFHI%convfl(iCFHI)
               IF ( FlgFhi(iCFHI) < 0 .OR. FlgFhi(iCFHI) > 1 ) THEN
                  WRITE(*,*) 'ERROR CFHI - FlgFhi[4] Out of bound : ', FlgFhi(iCFHI)
               END IF
                 xFhi(iCFHI) = Evt%CFHI%x(iCFHI)
                 yFhi(iCFHI) = Evt%CFHI%y(iCFHI)
                 zFhi(iCFHI) = Evt%CFHI%z(iCFHI)
                 PxFhi(iCFHI) = Evt%CFHI%px(iCFHI)
                 PyFhi(iCFHI) = Evt%CFHI%py(iCFHI)
                 PzFhi(iCFHI) = Evt%CFHI%pz(iCFHI)
                 TofFhi(iCFHI) = Evt%CFHI%tof(iCFHI)
                 TLenFhi(iCFHI) = Evt%CFHI%tlen(iCFHI)
           END DO
         ELSE
            WRITE(*,*) 'ERROR CFHI - nFhi Index not valid: ', nFhi
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qihi
C-----------------------------------------------------------------------
      IF (QIHIFLAG) THEN
         nQIHI = 0.
         DO iQIHI=1, 1000
           PidQIHI(iQIHI) = 0.
           AddQIHI(iQIHI) = 0.
           KinQIHI(iQIHI) = 0.
           xQIHI(iQIHI) = 0.
           yQIHI(iQIHI) = 0.
           zQIHI(iQIHI) = 0.
           PxQIHI(iQIHI) = 0.
           PyQIHI(iQIHI) = 0.
           PzQIHI(iQIHI) = 0.
           TofQIHI(iQIHI) = 0.
           EneQIHI(iQIHI) = 0.
           TLenQIHI(iQIHI) = 0.
         END DO

C        
C        TODO: Notice that in prod2ntu, this function was commented. Why?
C
         istat = GETQIHISTRU(evt%qhit)

         nQIHI = Evt%QHIT%n
         IF ( nQIHI < 0 .OR. nQIHI > 1000 ) THEN
            WRITE(*,*) 'ERROR QIHI - nQIHI Out of bound : ', nQIHI
         END IF

         IF (nQIHI > 0 .AND. nQIHI <= 1000) THEN
            DO iQIHI=1, nQIHI
                 PidQIHI(iQIHI) = Evt%QHIT%pty(iQIHI)
                 AddQIHI(iQIHI) = Evt%QHIT%add(iQIHI)
                 KinQIHI(iQIHI) = Evt%QHIT%kine(iQIHI)
                 xQIHI(iQIHI) = Evt%QHIT%x(iQIHI)
                 yQIHI(iQIHI) = Evt%QHIT%Y(iQIHI)
                 zQIHI(iQIHI) = Evt%QHIT%z(iQIHI)
                 PxQIHI(iQIHI) = Evt%QHIT%px(iQIHI)
                 PyQIHI(iQIHI) = Evt%QHIT%px(iQIHI)
                 PzQIHI(iQIHI) = Evt%QHIT%pz(iQIHI)
                 TofQIHI(iQIHI) = Evt%QHIT%tof(iQIHI)
                 EneQIHI(iQIHI) = Evt%QHIT%ene(iQIHI)
                 TLenQIHI(iQIHI) = Evt%QHIT%trl(iQIHI)
           END DO
         ELSE
            WRITE(*,*) 'ERROR QIHI - nQIHI Index not valid: ', nQIHI
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block trkq
C-----------------------------------------------------------------------
      IF (TRKQFLAG) THEN
         nTrkQ = 0.
         FlagQt = 0.
         DO iTRKQ=1, 100
           DO jTRKQ=1,2
             DetQt(iTRKQ,jTRKQ) = 0.
             WedQt(iTRKQ,jTRKQ) = 0.
             xQt(iTRKQ,jTRKQ) = 0.
             yQt(iTRKQ,jTRKQ) = 0.
             zQt(iTRKQ,jTRKQ) = 0.
           END DO
           ItrQt(iTRKQ) = 0.
         END DO

         istat = TRKQ2STRU( evt%trk, evt%trkq )

         nTrkQ = Evt%TRKQ%n
         IF ( nTrkQ < 0 .OR. nTrkQ > 100 ) THEN
            WRITE(*,*) 'ERROR TRKQ - nTrkQ Out of bound : ', nTrkQ
         END IF
         FlagQt = Evt%TRKQ%flagqt

         IF (nTrkQ > 0 .AND. nTrkQ <= 100) THEN
           DO iTRKQ=1, nTrkQ
             DO jTRKQ=1, 2 
               DetQt(iTRKQ,jTRKQ) = Evt%TRKQ%det(iTRKQ,jTRKQ)
               WedQt(iTRKQ,jTRKQ) = Evt%TRKQ%wed(iTRKQ,jTRKQ)
               xQt(iTRKQ,jTRKQ)   = Evt%TRKQ%xi(iTRKQ,jTRKQ)
               yQt(iTRKQ,jTRKQ)   = Evt%TRKQ%yi(iTRKQ,jTRKQ)
               zQt(iTRKQ,jTRKQ)   = Evt%TRKQ%zi(iTRKQ,jTRKQ)
             END DO
             ItrQt(iTRKQ) = Evt%TRKQ%itrk(iTRKQ)
           END DO
         ELSE
            WRITE(*,*) 'ERROR TRKQ - nTrkQ Index not valid: ', nTrkQ
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qele
C-----------------------------------------------------------------------
      IF (QELEFLAG) THEN
         nQELE = 0.
         DO iQELE=1, 32
           QWed(iQELE) = 0.
           QDet(iQELE) = 0.
           QEne(iQELE) = 0.
           QTim(iQELE) = 0.
         END DO

         istat = GETQCAESTRU(Evt%Qele)

         nQELE = Evt%QELE%n
         IF ( nQELE < 0 .OR. nQELE > 32 ) THEN
            WRITE(*,*) 'ERROR QELE - nQELE Out of bound : ', nQELE
         END IF

         IF (nQELE > 0 .AND. nQELE <= 32) THEN
            DO iQELE=1, nQELE
                 QWed(iQELE) = Evt%QELE%wed(iQELE)
                 QDet(iQELE) = Evt%QELE%det(iQELE)
                 QEne(iQELE) = Evt%QELE%e(iQELE)
                 QTim(iQELE) = Evt%QELE%t(iQELE)
           END DO
         ELSE
            WRITE(*,*) 'ERROR QELE - nQELE Index not valid: ', nQELE
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block qcal
C-----------------------------------------------------------------------
      IF (QCALFLAG) THEN
         nQCal = 0.
         DO iQCAL=1, 32
           xQCal(iQCAL) = 0.
           yQCal(iQCAL) = 0.
           zQCal(iQCAL) = 0.
           EQCal(iQCAL) = 0.
           TQCal(iQCAL) = 0.
         END DO

         istat = GETQCALSTRU(evt%qcal)

         nQCal = Evt%Qcal%n
         IF ( nQCal < 0 .OR. nQCal > 32 ) THEN
            WRITE(*,*) 'ERROR QCAL - nQCal Out of bound : ', nQCal
         END IF

         IF (nQCal > 0 .AND. nQCal <= 32) THEN
            DO iQCAL=1, nQCal
                 xQCal(iQCAL) = Evt%Qcal%x(iQCAL)
                 yQCal(iQCAL) = Evt%Qcal%y(iQCAL)
                 zQCal(iQCAL) = Evt%Qcal%z(iQCAL)
                 EQCal(iQCAL) = Evt%Qcal%ene(iQCAL)
                 TQCal(iQCAL) = Evt%Qcal%t(iQCAL)
           END DO
         ELSE
            WRITE(*,*) 'ERROR QCAL - nQCal Index not valid: ', nQCal
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block knvo
C-----------------------------------------------------------------------
      IF (KNVOFLAG) THEN
         nKNVO = 0.
         DO iKNVO=1, 40
           iKNVO(iKNVO) = 0.
           PxKNVO(iKNVO) = 0.
           PyKNVO(iKNVO) = 0.
           PzKNVO(iKNVO) = 0.
           PidKNVO(iKNVO) = 0.
           BankKNVO(iKNVO) = 0.
           nVnvKNVO(iKNVO) = 0.
         END DO

         istat = GETNVO(evt%knvo,evt%vnvo,evt%vnvb,evt%invo)

         nKNVO = Evt%KNVO%n
         IF ( nKNVO < 0 .OR. nKNVO > 40 ) THEN
            WRITE(*,*) 'ERROR KNVO - nKNVO Out of bound : ', nKNVO
         END IF

         IF (nKNVO > 0 .AND. nKNVO <= 40) THEN
            DO iKNVO=1, nKNVO
                 iKNVO(iKNVO) = Evt%KNVO%iknvo(iKNVO)
                 PxKNVO(iKNVO) = Evt%KNVO%px(iKNVO)
                 PyKNVO(iKNVO) = Evt%KNVO%py(iKNVO)
                 PzKNVO(iKNVO) = Evt%KNVO%pz(iKNVO)
                 PidKNVO(iKNVO) = Evt%KNVO%pid(iKNVO)
                 BankKNVO(iKNVO) = Evt%KNVO%bank(iKNVO)
                 nVnvKNVO(iKNVO) = Evt%KNVO%vlinked(iKNVO)
           END DO
         ELSE
            WRITE(*,*) 'ERROR KNVO - nKNVO Index not valid: ', nKNVO
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block vnvo
C-----------------------------------------------------------------------
      IF (VNVOFLAG) THEN
         nVNVO = 0.
         DO iVNVO=1, 40
           iVNVO(iVNVO) = 0.
           VxVNVO(iVNVO) = 0.
           VyVNVO(iVNVO) = 0.
           VzVNVO(iVNVO) = 0.
           KorIVNVO(iVNVO) = 0.
           DvfsVNVO(iVNVO) = 0.
           nBnkVNVO(iVNVO) = 0.
           fBnkVNVO(iVNVO) = 0.
         END DO

C        Already filled Evt%VNVO in previous blocks

         nVNVO = Evt%VNVO%n
         IF ( nVNVO < 0 .OR. nVNVO > 40 ) THEN
            WRITE(*,*) 'ERROR VNVO - nVNVO Out of bound : ', nVNVO
         END IF

         IF (nVNVO > 0 .AND. nVNVO <= 40) THEN
            DO iVNVO=1, nVNVO
                 iVNVO(iVNVO) = Evt%VNVO%ivnvo(iVNVO)
                 VxVNVO(iVNVO) = Evt%VNVO%vx(iVNVO)
                 VyVNVO(iVNVO) = Evt%VNVO%vy(iVNVO)
                 VzVNVO(iVNVO) = Evt%VNVO%vz(iVNVO)
                 KorIVNVO(iVNVO) = Evt%VNVO%kori(iVNVO)
                 DvfsVNVO(iVNVO) = Evt%VNVO%idvfs(iVNVO)
                 nBnkVNVO(iVNVO) = Evt%VNVO%nknv(iVNVO)
                 fBnkVNVO(iVNVO) = Evt%VNVO%fknv(iVNVO)
           END DO
         ELSE
            WRITE(*,*) 'ERROR VNVO - nVNVO Index not valid: ', nVNVO
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block vnvb
C-----------------------------------------------------------------------
      IF (VNVBFLAG) THEN
         nBnksVNVO = 0.
         DO iVNVB=1, 40
           iBank(iVNVB) = 0.
         END DO

C        Already filled Evt%VNVB in previous blocks

         nBnksVNVO = Evt%VNVB%n
         IF ( nBnksVNVO < 0 .OR. nBnksVNVO > 40 ) THEN
            WRITE(*,*) 'ERROR VNVB - nBnksVNVO Out of bound : ', nBnksVNVO
         END IF

         IF (nBnksVNVO > 0 .AND. nBnksVNVO <= 40) THEN
            DO iVNVB=1, nBnksVNVO
                 iBank(iVNVB) = Evt%VNVB%ibank(iVNVB)
           END DO
         ELSE
            WRITE(*,*) 'ERROR VNVB - nBnksVNVO Index not valid: ', nBnksVNVO
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Root
C-----------------------------------------------------------------------
      call fillntu() 	
C==============================================================================
CC End of code
C==============================================================================
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRE
C==============================================================================
C
$$IMPLICIT
C
C==============================================================================
C
      RETURN 
      END
C

C==============================================================================
      SUBROUTINE SAMHB
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'C$INC:ERLEVL.INC'
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'sample.inc'
$$include 'sample_talk.cin'
C
C Local declarations
C
      INTEGER    Status, MinHisId, MaxHisId
C      INTEGER    NtuId ! Comment to avoid conflict with raw2dtce.cin
      LOGICAL    HisFlg
C
C==============================================================================
C
C    Initialization tree for ROOT
      write(*,*)'bposflag hb', BPOSFLAG

      call inittree()

      RETURN 
      END
C
C==============================================================================
      SUBROUTINE SAMTK
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'A_C_LIBRARY:ANERROR.INC'
$$INCLUDE 'S_I$LIBRARY:NOARGINC.INC'
$$include 'sample_talk.inc'
C
C External functions
C
 C
      INTEGER   UIDFFI, UIUSGP, UIACME
      INTEGER   UIGTYE, UIGTRE, UIGTIN

C
C Local declarations
C
      INTEGER   Status, MENUF, MENUL, IGROUP
      CHARACTER*3 flag
      CHARACTER Verb*40, Prompt*100
C
C==============================================================================
C
      Status=UIDFFI( 
     $     '$SAMPLE/sample.uid'
     $     ,IGROUP,MENUF,N$A,N$A,MENUL,N$A )
      Status = UIUSGP(IGROUP,N$A)
 10   Status = UIACME(MENUF,Verb,N$A) ! Display menu
C     

C      write(*,*)"[TALKTO_INIT] INFOFLAG: ", INFOFLAG
C      write(*,*)"[TALKTO_INIT] BPOSFLAG: ", BPOSFLAG
C      write(*,*)" "

      if(verb.eq.'SHOW')then
	    goto 10
      else if(verb.eq.'INFO')then
      	write(Prompt,123)'INFO'
    	Status=UIGTYE(Prompt,INFOFLAG)
    	goto 10
      else if(verb.eq.'DATA')then
      	write(Prompt,123)'DATA'
    	Status=UIGTYE(Prompt,DATAFLAG)
    	goto 10
      else if(verb.eq.'BPOS')then
      	write(Prompt,123)'BPOS'
    	Status=UIGTYE(Prompt,BPOSFLAG)
    	goto 10
      else if(verb.eq.'GDHIT')then
      	write(Prompt,123)'GDHIT'
    	Status=UIGTYE(Prompt,GDHITFLAG)
    	goto 10
      else if(verb.eq.'ECLS')then
      	write(Prompt,123)'ECLS'
	    Status=UIGTYE(Prompt,ECLSFLAG)
    	goto 10
      else if(verb.eq.'TRIG')then
      	write(Prompt,123)'TRIG'
	    Status=UIGTYE(Prompt,TRIGFLAG)
    	goto 10
      else if(verb.eq.'C2TRG')then
      	write(Prompt,123)'C2TRG'
	    Status=UIGTYE(Prompt,C2TRGFLAG)
    	goto 10
      else if(verb.eq.'TELLINA')then
      	write(Prompt,123)'TELLINA'
	    Status=UIGTYE(Prompt,TELLINAFLAG)
    	goto 10
      else if(verb.eq.'PIZZETTA')then
      	write(Prompt,123)'PIZZETTA'
	    Status=UIGTYE(Prompt,PIZZETTAFLAG)
    	goto 10
      else if(verb.eq.'TORTA')then
      	write(Prompt,123)'TORTA'
	    Status=UIGTYE(Prompt,TORTAFLAG)
    	goto 10
      else if(verb.eq.'TELE')then
      	write(Prompt,123)'TELE'
	    Status=UIGTYE(Prompt,TELEFLAG)
	    goto 10
      else if(verb.eq.'PIZZA')then
      	write(Prompt,123)'PIZZA'
	    Status=UIGTYE(Prompt,PIZZAFLAG)
    	goto 10
      else if(verb.eq.'TIME')then
      	write(Prompt,123)'TIME'
	    Status=UIGTYE(Prompt,TIMEFLAG)
    	goto 10
      else if(verb.eq.'CLUS')then
      	write(Prompt,123)'CLUS'
	    Status=UIGTYE(Prompt,CLUSFLAG)
    	goto 10
      else if(verb.eq.'CLUMC')then
      	write(Prompt,123)'CLUMC'
	    Status=UIGTYE(Prompt,CLUMCFLAG)
    	goto 10
      else if(verb.eq.'PRECLUS')then
      	write(Prompt,123)'PRECLUS'
	    Status=UIGTYE(Prompt,PRECLUSFLAG)
    	goto 10
      else if(verb.eq.'CWRK')then
      	write(Prompt,123)'CWRK'
	    Status=UIGTYE(Prompt,CWRKFLAG)
    	goto 10
      else if(verb.eq.'CELE')then
      	write(Prompt,123)'CELE'
	    Status=UIGTYE(Prompt,CELEFLAG)
    	goto 10
      else if(verb.eq.'CELMC')then
      	write(Prompt,123)'CELMC'
	    Status=UIGTYE(Prompt,CELEMCFLAG)
    	goto 10
      else if(verb.eq.'DTCE')then
      	write(Prompt,123)'DTCE'
	    Status=UIGTYE(Prompt,DTCEFLAG)
    	goto 10
      else if(verb.eq.'DTC0')then
      	write(Prompt,123)'DTC0'
	    Status=UIGTYE(Prompt,DTCE0FLAG)
    	goto 10
      else if(verb.eq.'DCHITS')then
      	write(Prompt,123)'DCHITS'
	    Status=UIGTYE(Prompt,DCHITSFLAG)
    	goto 10
      else if(verb.eq.'DHRE')then
      	write(Prompt,123)'DHRE'
	    Status=UIGTYE(Prompt,DHREFLAG)
    	goto 10
      else if(verb.eq.'DHSP')then
      	write(Prompt,123)'DHSP'
	    Status=UIGTYE(Prompt,DHSPFLAG)
    	goto 10
      else if(verb.eq.'TRV')then
      	write(Prompt,123)'TRKV'
	    Status=UIGTYE(Prompt,TRKVFLAG)
    	goto 10
      else if(verb.eq.'VTX')then
      	write(Prompt,123)'VTX'
	    Status=UIGTYE(Prompt,VTXFLAG)
    	goto 10
      else if(verb.eq.'TRS')then
      	write(Prompt,123)'TRKS'
	    Status=UIGTYE(Prompt,TRKSFLAG)
    	goto 10
      else if(verb.eq.'TRMC')then
      	write(Prompt,123)'TRMC'
	    Status=UIGTYE(Prompt,TRKMCFLAG)
    	goto 10
      else if(verb.eq.'TRKVO')then
      	write(Prompt,123)'TRKVO'
	    Status=UIGTYE(Prompt,TRKVOLDFLAG)
    	goto 10
      else if(verb.eq.'VTO')then
      	write(Prompt,123)'VTO'
	    Status=UIGTYE(Prompt,VTXOLDFLAG)
    	goto 10
      else if(verb.eq.'TRKSO')then
      	write(Prompt,123)'TRKSO'
	    Status=UIGTYE(Prompt,TRKSOLDFLAG)
    	goto 10
      else if(verb.eq.'TRKMCO')then
      	write(Prompt,123)'TRKMCO'
	    Status=UIGTYE(Prompt,TRKMCOLDFLAG)
    	goto 10
      else if(verb.eq.'DHIT')then
      	write(Prompt,123)'DHIT'
	    Status=UIGTYE(Prompt,DHITFLAG)
    	goto 10
      else if(verb.eq.'DEDX')then
      	write(Prompt,123)'DEDX'
	    Status=UIGTYE(Prompt,DEDXFLAG)
    	goto 10
      else if(verb.eq.'DPRS')then
      	write(Prompt,123)'DPRS'
	    Status=UIGTYE(Prompt,DPRSFLAG)
    	goto 10
      else if(verb.eq.'GEANFI')then
      	write(Prompt,123)'GEANFI'
	    Status=UIGTYE(Prompt,GEANFIFLAG)
    	goto 10
      else if(verb.eq.'TCLO')then
      	write(Prompt,123)'TCLO'
	    Status=UIGTYE(Prompt,TCLOFLAG)
    	goto 10
      else if(verb.eq.'TCOLD')then
      	write(Prompt,123)'TCOLD'
	    Status=UIGTYE(Prompt,TCLOLDFLAG)
    	goto 10
      else if(verb.eq.'CFHI')then
      	write(Prompt,123)'CFHI'
	    Status=UIGTYE(Prompt,CFHIFLAG)
    	goto 10
      else if(verb.eq.'QIHI')then
      	write(Prompt,123)'QIHI'
	    Status=UIGTYE(Prompt,QIHIFLAG)
    	goto 10
      else if(verb.eq.'TRKQ')then
      	write(Prompt,123)'TRKQ'
	    Status=UIGTYE(Prompt,TRKQFLAG)
    	goto 10
      else if(verb.eq.'QELE')then
      	write(Prompt,123)'QELE'
	    Status=UIGTYE(Prompt,QELEFLAG)
    	goto 10
      else if(verb.eq.'QCAL')then
      	write(Prompt,123)'QCAL'
	    Status=UIGTYE(Prompt,QCALFLAG)
    	goto 10
      else if(verb.eq.'KNVO')then
      	write(Prompt,123)'KNVO'
	    Status=UIGTYE(Prompt,KNVOFLAG)
    	goto 10
      else if(verb.eq.'VNVO')then
      	write(Prompt,123)'VNVO'
	    Status=UIGTYE(Prompt,VNVOFLAG)
    	goto 10
      else if(verb.eq.'VNVB')then
      	write(Prompt,123)'VNVB'
	    Status=UIGTYE(Prompt,VNVBFLAG)
    	goto 10
      end if
C
123   FORMAT(1x,'Select ',a4,' Ntuple-block?')
C

C      write(*,*)"[TALKTO_END] INFOFLAG: ", INFOFLAG
C      write(*,*)"[TALKTO_END] BPOSFLAG: ", BPOSFLAG
C      write(*,*)" "

      RETURN
      END
C     

C=============================================================================
      SUBROUTINE SAMFI
C===========================================================================
	  write(*,*)'Run End routine'
      call closetree() 

      RETURN
      END
C
C===========================================================================
