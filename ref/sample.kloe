
C==============================================================================
C  SAMPLE
C==============================================================================
C
C  Description:
C  ------------
C Prod2ntu version for root tuple
C  Language:
C  ---------
C  KLOE Fortran
C
C  Author:
C  -------
C Elena Perez del Rio
C
C
C==============================================================================
      SUBROUTINE SAMIN
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT

$$include 'sample.inc'
$$include 'sample_talk.inc'
C
C==============================================================================
C
      write(*,*)"SAMIN"

      TRIGFLAG    = .false.
      TELEFLAG    = .false.
      C2TRGFLAG   = .false.
      TELLINAFLAG = .false.
      PIZZAFLAG   = .false.
      ECLSFLAG    = .true.
      BPOSFLAG    = .false.
      
      write(*,*)'ECLSFLAG', ECLSFLAG

C    Initialization tree for ROOT
      call inittree()


      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRI
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'k$inc:jobsta.inc'
C
C External functions
C
      INTEGER    ANPIST
C
C Local declarations
C
      INTEGER    Status, istat, fillbposcommon
C
C==============================================================================
C
C Put A_C Error Code to SUCCESS at Run_Init
C
      Status = ANPIST(ANSUCC)
      istat = fillbposcommon(nrun)
C
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMEV
C==============================================================================
C
$$IMPLICIT
$$include 'ybos$library:errcod.inc'
$$include 'c$inc:bcs.inc'
$$include 'c$inc:erlevl.inc'
$$include 'k$inc:oferco.inc'
$$include 'k$inc:jobsta.inc'
$$include 'k$inc:runtyp.inc'
$$include 'k$inc:bpoybs.inc'
c$$Include 'maxstructdim.inc'
$$include 'k$itls:maxstructdim.inc'
$$include 'k$itrg:maxtrgchan.inc'
$$include 'k$itls:emcstruct.inc'        ! Emc Clusters
$$include 'k$itls:evtstruct.inc'  	! Event Information
$$include 'k$itls:geanfistruct.inc'            ! Geanfi Information
$$include 'k$itls:vtxstru.inc'		        ! Charge Verticies
$$include 'k$itls:celestruct.inc'	! Calorimeter Elements
$$include 'k$itls:trkstru.inc'		        ! Tracks
$$include 'k$itls:dprs_struct.inc'             ! DPRS patterns
$$include 'k$itls:dhspstru.inc'
$$include 'k$itls:tclostruct.inc'	! Tracks-to-Clusters
$$include 'k$itls:cfhistruct.inc'       ! Calorimeter First Hit
$$include 'k$itls:qihistruct.inc'       ! QIHI common block
$$include 'k$itls:qcalstruct.inc'       ! QCAL common block
$$include 'k$itrg:telestruct.inc'
$$include 'k$itrg:pizzastruct.inc'
$$include 'k$itls:preclustruct.inc'
$$include 'k$itls:nvostru.inc'
$$include 'k$itls:eclostru.inc'
$$include 'k$itls:t0struct.inc'
$$include 'k$itls:cwrkstruct.inc'
$$include 'k$itls:tellina.inc'
$$include 'k$itls:pizzetta.inc'
$$include 'k$itrg:trgstruct.inc'
$$include 'k$itls:eclsstru.inc'
$$include 'k$itls:gdchitstru.inc'
$$include 'k$itls:bposstruct.inc'
$$include 'k$itls:trkqstru.inc'
$$include 'k$itls:dtcestruct.inc'
$$include 'k$itls:dhrestruct.inc'
$$include 'k$itls:sec2clustru.inc'
$$include 'k$itls:cspsstruct.cin'
$$include 'k$itls:cluostruct.cin'
$$include 'k$itls:cluomcstruct.cin'
$$include 'k$itls:dhitstruct.cin'
$$include 'k$itls:dedx2stru.inc'
$$INCLUDE 'K$ITLS:eleqcaltstru.inc' !QCALT
c$$INCLUDE 'K$ITLS:qcalthitstru.cin' !QCALT hit Struc
$$INCLUDE 'K$ITLS:ele2hitqcalt.cin'    ! QCALT hit structure
$$INCLUDE 'K$ITLS:CCALTNUM.INC'        ! CCALT stu dimensioner
$$INCLUDE 'K$ITLS:ccaltstru.inc'   ! CCALT Stru
$$INCLUDE 'k$itls:letestruct.cin'  !LET Stru
C$$INCLUDE 'k$itls:raw2itce.cin'  ! IT Stru
$$INCLUDE 'k$itls:itcestruct.cin'  ! IT Stru
$$INCLUDE 'k$itls:hetenum.cin'      ! HET max dim
$$INCLUDE 'k$itls:hetestru.cin'  !LET Stru
$$include 'k$itls:prod2ntu.inc'
$$INCLUDE 'k$itls:raw2dtce.cin'

$$include 'sample.inc'
$$include 'sample_talk.inc'
C
C All the declarations are moved in sample.cin
C What are the following lines? I maintain here at the moment to 
C let fix the "RunNumber" issue. 
C TODO: Move them to sample.cin
C
C NOTE1: trgwrd1/2 are used in block EVTTRG and if no other you, 
C they can be removed. Now they are commented
C
      INTEGER istat, OldRunNumber
      data OldRunNumber/0/
      save OldRunNumber
      integer ind1,inddat
C      Integer trgwrd1,trgwrd2,numdhit
C      common /trgcom/trgwrd1,trgwrd2,numdhit
      Integer numdhit
      common /trgcom/numdhit
      LOGICAL mcflag_1
      INTEGER mcflag_tg
C
C=============================================================================
C Start of Code:
C=============================================================================
      IF( exptyp.eq.exofsi )then ! Simulation
         mcflag_1 = .true.
      else
         mcflag_1 = .false.
      endif

      If (mcflag_1) then
         mcflag_tg=1
      Else
         mcflag_tg=0
      EndIf
C-----------------------------------------------------------------------------
C Fill event classification information
C-----------------------------------------------------------------------------
      IF( mcflag_1 )  THEN
         istat = GETEVCL(evt%Info)
C         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
C   Moved to the Block definition
C         IF( TRIGFLAG ) THEN
C           trgwrd1 = IW( inddat+1 )
C           trgwrd2 = IW( inddat+2 )
C         ENDIF
         
      ELSE
         istat = GETTIME(timesec,timemusec)
         timesec = timesec-946080000  ! Reduce the timing
         ISTAT = BIGEST(IW,'EVCL',BNKNUM)
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')

         END IF
         ISTAT = BLOCAT(IW,'EVCL',BNKNUM,IND1,INDDAT )
         IF( ISTAT.ne.YESUCC ) THEN
            Call ERLOGR ('SAME_EV',ERWARN,0,ISTAT,
     &           'No EVCL bank found')
            

         END IF
        
         icurr = IW(INDDAT+5)
         IPos=iand(icurr,'FFFF'x)*1.e-4
         IEle=(icurr/2**16)*1.e-4
         Lumi= iw(inddat+6)*1.e-6         
      ENDIF
C-----------------------------------------------------------------------
C Fill Block evtinfo
C-----------------------------------------------------------------------
      IF(mcflag_1)THEN
         istat=blocat(iw,'BRID',1,ind1,inddat)
         Evt%Info%RunNumber = iw(inddat)
         IF(Evt%Info%RunNumber.ne.OldRunNumber)THEN
            istat = fillbposcommon(Evt%Info%RunNumber)
            OldRunNumber = Evt%Info%RunNumber
         END IF
      ELSE
         Evt%Info%RunNumber = Nrun
      END IF
      Evt%Info%EventNumber = Nev
        
      NumRun = Evt%Info%RunNumber
      NumEv = Evt%Info%EventNumber
      Pileup = Evt%Info%Pileup
      GCod = Evt%Info%GenCod
      PhiD = Evt%Info%PhiDecay
      A1Typ = Evt%Info%A1type
      A2Typ = Evt%Info%A2type
      A3Typ = Evt%Info%A3type
      B1Typ = Evt%Info%B1type
      B2Typ = Evt%Info%B2type
      B3Typ = Evt%Info%B3type

C-----------------------------------------------------------------------
C Fill Block evtecls 
C-----------------------------------------------------------------------
      IF (ECLSFLAG) THEN
         nEcls = 0
         EclTrgw = 0
         EclFilfo = 0
         DO iecls=1,8
            EclWord(iecls) = 0
            EclStream(iecls) = 0
            EclTagNum(iecls) = 0
            EclEvType(iecls) = 0
         END DO
         
         nEcls2 = 0
         EclTrgw2 = 0
         EclFilfo2 = 0
         DO iecls2=1,8
            EclWord2(iecls2) = 0
            EclStream2(iecls2) = 0
            EclTagNum2(iecls2) = 0
            EclEvType2(iecls2) = 0
         END DO

         istat = GETECLS(evt%ecls)
         
         necls = evt%ecls%n
         IF (nEcls > 0 .OR. nEcls <= 8) THEN
            EclTrgw = evt%ecls%trigger
            EclFilfo = evt%ecls%filfo
            DO iecls=1,necls
               EclWord(iecls) = evt%ecls%TotWord(iecls)
               EclStream(iecls) = evt%ecls%Stream(iecls)
               EclTagNum(iecls) = evt%ecls%TagNum(iecls)
               EclEvType(iecls) = evt%ecls%EvnTyp(iecls)
            END DO
         ELSE
            WRITE(*,*) 'ERROR EVTC2TRIG - NClu2s Out of bound : ', NClu2s
         END IF
         
         nEcls2 = evt%ecls%n2

         IF (nEcls2 > 0 .OR. nEcls <= 8) THEN
            EclTrgw2 = evt%ecls%trigger2
            EclFilfo2 = evt%ecls%filfo2
            DO iecls2=1,necls2
               EclWord2(iecls2) = evt%ecls%TotWord2(iecls2)
               EclStream2(iecls2) = evt%ecls%Stream2(iecls2)
               EclTagNum2(iecls2) = evt%ecls%TagNum2(iecls2)
               EclEvType2(iecls2) = evt%ecls%EvnTyp2(iecls2)
            END DO
         ELSE
            WRITE(*,*) 'ERROR EVTC2TRIG - NClu2s Out of bound : ', NClu2s
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block evtbpos
C-----------------------------------------------------------------------
      if(BPOSFLAG)then
         BPx = 0.
         BPy = 0.
         BPz = 0.
         Bx = 0.
         By = 0.
         Bz = 0.
         BWidPx = 0.
         BWidPy = 0.
         BWidPz = 0.
         BSx = 0.
         BSy = 0.
         BSz = 0.
         BLumx = 0.
         BLumz = 0.
         Broots = 0.
         BrootsErr = 0.

         rstat = GETBPOS(Evt%Bpos)

         BPx = Evt%Bpos%px
         BPy = Evt%Bpos%py
         BPz = Evt%Bpos%pz
         Bx = Evt%Bpos%x
         By = Evt%Bpos%y
         Bz = Evt%Bpos%z
         BWidPx = Evt%Bpos%errpx
         BWidPy = Evt%Bpos%errpy
         BWidPz = Evt%Bpos%errpz
         BSx = Evt%Bpos%errx
         BSy = Evt%Bpos%erry
         BSz = Evt%Bpos%errz
         BLumx = Evt%Bpos%lumx
         BLumz = Evt%Bpos%lumz
         Broots = Evt%Bpos%Ene
         BrootsErr = Evt%Bpos%ErrEne
      end if
C-----------------------------------------------------------------------
C Fill Block evtgdhit
C-----------------------------------------------------------------------
      DtceHit = 0.
      DhreHit = 0.
      DprsHit = 0.
      DtfsHit = 0.

      istat = BIGEST(iw,'DTCE',banknum)
      istat = BLOCAT(iw,'DTCE',banknum,ind1,inddat)
      IF( istat.ne.YESUCC ) THEN
        NDtce_copy =0
      ELSE
        NDtce_copy = IW(inddat+DTCNRO)
      ENDIF
      CALL GETGDCHIT(Evt%GHit)

      DtceHit = NDtce_copy
      DhreHit = Evt%GHit%nhit
      DprsHit = Evt%GHit%nhpr
      DtfsHit = Evt%GHit%nhtf
C-----------------------------------------------------------------------
C Fill Block evttrig
C-----------------------------------------------------------------------
      if(TRIGFLAG)then
         istat = BLOCAT(iw,'EVCL',1,ind1,inddat)
         Trgw1 = IW( inddat+1 )
         Trgw2 = IW( inddat+2 )
      end if
C-----------------------------------------------------------------------
C Fill Block evtc2trig
C-----------------------------------------------------------------------
      IF (C2TRGFLAG) THEN
         NSec = 0.
         NSec_NoClu = 0.
         NSec2Clu = 0.
         NClu2s = 0.
         DO iC2Trig=1,100
            NNorm(iC2Trig)   = 0.
            NormAdd(iC2Trig) = 0.
            NOver(iC2Trig)   = 0.
            OverAdd(iC2Trig) = 0.
            NCosm(iC2Trig)   = 0.
            CosmAdd(iC2Trig) = 0.
         END DO

         istat = GETSEC2CLUSTRU(evt%s2clu)

         NSec = Evt%S2CLU%nsect
         NSec_NoClu = Evt%S2CLU%nsect_noclu
         NSec2Clu = Evt%S2CLU%nsect_clu
         NClu2s = Evt%S2CLU%Nclus

         IF (NClu2s > 0 .OR. NClu2s <= 100) THEN
            DO iC2Trig=1,NClu2s
               NNorm(iC2Trig)   = Evt%S2CLU%Nnorm(iC2Trig)
               NormAdd(iC2Trig) = Evt%S2CLU%NormAdd(iC2Trig)
               NOver(iC2Trig)   = Evt%S2CLU%Nover(iC2Trig)
               OverAdd(iC2Trig) = Evt%S2CLU%OverAdd(iC2Trig)
               NCosm(iC2Trig)   = Evt%S2CLU%Ncosm(iC2Trig)
               CosmAdd(iC2Trig) = Evt%S2CLU%CosmAdd(iC2Trig)
            END DO
         ELSE
            WRITE(*,*) 'ERROR EVTC2TRIG - NClu2s Out of bound : ', NClu2s
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block tellina
C-----------------------------------------------------------------------
      IF (TELLINAFLAG) THEN
         NTel = 0.
         DO iTELLINA=1, 1000
            Add_Tel(iTELLINA) = 0.
            Bitp_Tel(iTELLINA) = 0.
            Ea_Tel(iTELLINA) = 0.
            Eb_Tel(iTELLINA) = 0.
            Ta_Tel(iTELLINA) = 0.
            Tb_Tel(iTELLINA) = 0.
         END DO

         istat = GETTELLINA(Evt%Tellina) 

         NTel = Evt%Tellina%n
         IF (NTel > 0 .OR. NTel <= 1000) THEN
            DO iTELLINA=1, NTel
               Add_Tel(iTELLINA) = Evt%Tellina%add(iTELLINA)
               Bitp_Tel(iTELLINA) = Evt%Tellina%Bitp(iTELLINA)
               Ea_Tel(iTELLINA) = Evt%Tellina%Ea(iTELLINA)
               Eb_Tel(iTELLINA) = Evt%Tellina%Eb(iTELLINA)
               Ta_Tel(iTELLINA) = Evt%Tellina%Ta(iTELLINA)
               Tb_Tel(iTELLINA) = Evt%Tellina%Tb(iTELLINA)
            END DO
         ELSE
            WRITE(*,*) 'ERROR TELLINA - NTel Out of bound : ', NTel
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block pizzetta
C-----------------------------------------------------------------------
      IF (PIZZAFLAG) THEN
         NPiz = 0.
         DO iPIZZETTA=1, 1000
            Add_Piz(iPIZZETTA) = 0.
            Ea_Piz(iPIZZETTA)  = 0.
            Eb_Piz(iPIZZETTA)  = 0.
            E_Piz(iPIZZETTA)   = 0.
            Z_Piz(iPIZZETTA)   = 0.
         END DO

         istat = GETPIZZETTA(Evt%Pizzetta)

         NPiz = Evt%Pizzetta%n
         IF (NPiz > 0 .OR. NPiz <= 1000) THEN
            DO iPIZZETTA=1, NPiz
               Add_Piz(iPIZZETTA) = Evt%Pizzetta%Add(iPIZZETTA)
               Ea_Piz(iPIZZETTA)  = Evt%Pizzetta%Ea(iPIZZETTA)
               Eb_Piz(iPIZZETTA)  = Evt%Pizzetta%Eb(iPIZZETTA)
               E_Piz(iPIZZETTA)   = Evt%Pizzetta%E_Rec(iPIZZETTA)
               Z_Piz(iPIZZETTA)   = Evt%Pizzetta%Z_Mod(iPIZZETTA)
            END DO
         ELSE
            WRITE(*,*) 'ERROR PIZZETTA - NPiz Out of bound : ', NPiz
         END IF
      END IF
C-----------------------------------------------------------------------
C Fill Block Torta
C-----------------------------------------------------------------------
C
C NOT IMPLEMENTED
C
C-----------------------------------------------------------------------
C Fill Block EvtTele
C-----------------------------------------------------------------------
      NTele = 0.
      DO iEVTTELE=1, 300
        Det_Trg(iEVTTELE) = 0.
        BitP(iEVTTELE) = 0.
        Sector(iEVTTELE) = 0.
        SerKind(iEVTTELE) = 0.
        Ea_Trg(iEVTTELE) = 0.
        Eb_Trg(iEVTTELE) = 0.
        Ta_Trg(iEVTTELE) = 0.
        Tb_Trg(iEVTTELE) = 0.
      END DO

      istat = GETTELESTRU(Evt%TELE)

      NTele = Evt%TELE%ntele
      IF (NTele > 0 .AND. NTele <= 300) THEN
        DO iEVTTELE=1, NTele
          Det_Trg(iEVTTELE) = Evt%TELE%Det(iEVTTELE)
          BitP(iEVTTELE) = Evt%TELE%Bitp(iEVTTELE)
          Sector(iEVTTELE) = Evt%TELE%Sector(iEVTTELE)
          SerKind(iEVTTELE) = Evt%TELE%Serkind(iEVTTELE)
          Ea_Trg(iEVTTELE) = Evt%TELE%Ea(iEVTTELE)
          Eb_Trg(iEVTTELE) = Evt%TELE%Eb(iEVTTELE)
          Ta_Trg(iEVTTELE) = Evt%TELE%Ta(iEVTTELE)
          Tb_Trg(iEVTTELE) = Evt%TELE%Tb(iEVTTELE)
        END DO
      ELSE
        WRITE(*,*) 'ERROR EVTTELE - NTele Out of bound : ', NTele
      END IF
C-----------------------------------------------------------------------
C Fill Block pizza
C-----------------------------------------------------------------------
      NPack = 0.
      DO iPIZZA=1, 300
        PakSect(iPIZZA) = 0.
        PakDet(iPIZZA) = 0.
        PakSerk(iPIZZA) = 0.
        Ea_Pack(iPIZZA) = 0.
        Eb_Pack(iPIZZA) = 0.
        E_Rec(iPIZZA) = 0.
        Z_mod(iPIZZA) = 0.
      END DO

      istat = PIZZA_RESET(Evt%PIZZA)
      istat = GETPIZZASTRU(Evt%PIZZA)

      NPack = Evt%PIZZA%npizza
      IF (NPack > 0 .AND. NPack <= 300) THEN
        DO iPIZZA=1, NPack
          PakSect(iPIZZA) = Evt%PIZZA%sector(iPIZZA)
          PakDet(iPIZZA) = Evt%PIZZA%det(iPIZZA)
          PakSerk(iPIZZA) = Evt%PIZZA%serkind(iPIZZA)
          Ea_Pack(iPIZZA) = Evt%PIZZA%Ea(iPIZZA)
          Eb_Pack(iPIZZA) = Evt%PIZZA%Eb(iPIZZA)
          E_Rec(iPIZZA) = Evt%PIZZA%E_rec(iPIZZA)
          Z_mod(iPIZZA) = Evt%PIZZA%Z_mod(iPIZZA)
        END DO
      ELSE
        WRITE(*,*) 'ERROR PIZZA - NPack Out of bound : ', NPack
      END IF
C-----------------------------------------------------------------------
C Fill Block evttime
C-----------------------------------------------------------------------
      istat = T0GLRD(T0Dc0,T0Hit0,T0Clu0,T0Step1,DelayCable,TBunch)
      istat = T0MCRD(TPhased_mc)
C-----------------------------------------------------------------------
C Fill Block evtclu
C-----------------------------------------------------------------------
      NClu = 0.
      NCluMc = 0.
      DO iEVTCLU=1, 100
        EneCl(iEVTCLU) = 0.
        TCl(iEVTCLU) = 0.
        XCl(iEVTCLU) = 0.
        YCl(iEVTCLU) = 0.
        ZCl(iEVTCLU) = 0.
        XaCl(iEVTCLU) = 0.
        YaCl(iEVTCLU) = 0.
        ZaCl(iEVTCLU) = 0.
        XRmCl(iEVTCLU) = 0.
        YRmsCl(iEVTCLU) = 0.
        ZrmsCl(iEVTCLU) = 0.
        TrmsCl(iEVTCLU) = 0.
        FlagCl(iEVTCLU) = 0.
        NPar(iEVTCLU) = 0.
        PNum1(iEVTCLU) = 0.
        Pid1(iEVTCLU) = 0.
        PNum2(iEVTCLU) = 0.
        Pid2(iEVTCLU) = 0.
        PNum3(iEVTCLU) = 0.
        Pid3(iEVTCLU) = 0.
      END DO

      istat = GETCLUSTRU(Evt%Clu)

      NClu = Evt%Clu%n 
      NCluMc = Evt%Clu%nmc
      IF (NClu > 0 .AND. NClu <= 100) THEN
        DO iEVTCLU=1, NClu
          EneCl(iEVTCLU) = Evt%Clu%E (iEVTCLU)
          TCl(iEVTCLU) = Evt%Clu%T (iEVTCLU)
          XCl(iEVTCLU) = Evt%Clu%X (iEVTCLU)
          YCl(iEVTCLU) = Evt%Clu%Y (iEVTCLU)
          ZCl(iEVTCLU) = Evt%Clu%Z (iEVTCLU)
          XaCl(iEVTCLU) = Evt%Clu%Xa(iEVTCLU)
          YaCl(iEVTCLU) = Evt%Clu%Ya(iEVTCLU)
          ZaCl(iEVTCLU) = Evt%Clu%Za(iEVTCLU)
          XRmCl(iEVTCLU) = Evt%Clu%Xrms(iEVTCLU)
          YRmsCl(iEVTCLU) = Evt%Clu%Yrms(iEVTCLU)
          ZrmsCl(iEVTCLU) = Evt%Clu%Zrms(iEVTCLU)
          TrmsCl(iEVTCLU) = Evt%Clu%Trms(iEVTCLU)
          FlagCl(iEVTCLU) = Evt%Clu%Flag(iEVTCLU)
        END DO
      ELSE
        WRITE(*,*) 'ERROR EVTCLU - NClu Out of bound : ', NClu
      END IF

      IF (NCluMc > 0 .AND. NCluMc <= 100) THEN
        DO iEVTCLU=1, NCluMc
          NPar(iEVTCLU) = Evt%Clu%Npart(iEVTCLU)
          PNum1(iEVTCLU) = Evt%Clu%part1(iEVTCLU)
          Pid1(iEVTCLU) = Evt%Clu%pid1(iEVTCLU)
          PNum2(iEVTCLU) = Evt%Clu%part2(iEVTCLU)
          Pid2(iEVTCLU) = Evt%Clu%pid2(iEVTCLU)
          PNum3(iEVTCLU) = Evt%Clu%part3(iEVTCLU)
          Pid3(iEVTCLU) = Evt%Clu%pid3(iEVTCLU) 
        END DO
      ELSE
        WRITE(*,*) 'ERROR EVTCLU - NCluMc Out of bound : ', NCluMc
      END IF
C-----------------------------------------------------------------------
C Fill Block preclu
C-----------------------------------------------------------------------
      NPClu = 0.
      DO iPRECLU=1, 100
        EPre(iPRECLU) = 0.
        TPre(iPRECLU) = 0.
        XPre(iPRECLU) = 0.
        YPre(iPRECLU) = 0.
        ZPre(iPRECLU) = 0.
        TAPre(iPRECLU) = 0.
        TBPre(iPRECLU) = 0.
        TARPre(iPRECLU) = 0.
        TBRPre(iPRECLU) = 0.
      END DO

      istat = GETPRECLUSTRU(Evt%PreClu)

      NPClu = Evt%PreClu%n 
      IF (NPClu > 0 .AND. NPClu <= 100) THEN
        DO iPRECLU=1, NPClu
          EPre(iPRECLU) = Evt%PreClu%E (iPRECLU)
          TPre(iPRECLU) = Evt%PreClu%T (iPRECLU)
          XPre(iPRECLU) = Evt%PreClu%X (iPRECLU)
          YPre(iPRECLU) = Evt%PreClu%Y (iPRECLU)
          ZPre(iPRECLU) = Evt%PreClu%Z (iPRECLU)
          TAPre(iPRECLU) = Evt%PreClu%TA(iPRECLU)
          TBPre(iPRECLU) = Evt%PreClu%TB(iPRECLU)
          TARPre(iPRECLU) = Evt%PreClu%TrmsA(iPRECLU)
          TBRPre(iPRECLU) = Evt%PreClu%TrmsB(iPRECLU)
        END DO
      ELSE
        WRITE(*,*) 'ERROR PRECLU - NPClu Out of bound : ', NPClu
      END IF
C-----------------------------------------------------------------------
C Fill Block cwrk
C-----------------------------------------------------------------------
      NCHit = 0.
      DO iCWRK=1, 300
        IClu(iCWRK) = 0.
        ICel(iCWRK) = 0.
        CAdd(iCWRK) = 0.
        CmcHit(iCWRK) = 0.
        Ckine(iCWRK) = 0.
        Ene(iCWRK) = 0.
        T(iCWRK) = 0.
        X(iCWRK) = 0.
        Y(iCWRK) = 0.
        Z(iCWRK) = 0.
      END DO

      istat = GETCWRKSTRU(Evt%Cwrk)

      NCHit = Evt%CWRK%n 
      IF (NCHit > 0 .AND. NCHit <= 300) THEN
        DO iCWRK=1, NCHit
          IClu(iCWRK) = Evt%CWRK%icl(iCWRK)
          ICel(iCWRK) = Evt%CWRK%cele(iCWRK)
          CAdd(iCWRK) = Evt%CWRK%add(iCWRK)
          CmcHit(iCWRK) = Evt%CWRK%nhit(iCWRK)
          Ckine(iCWRK) = Evt%CWRK%kine(iCWRK)
          Ene(iCWRK) = Evt%CWRK%E(iCWRK)
          T(iCWRK) = Evt%CWRK%T(iCWRK)
          X(iCWRK) = Evt%CWRK%X(iCWRK)
          Y(iCWRK) = Evt%CWRK%Y(iCWRK)
          Z(iCWRK) = Evt%CWRK%Z(iCWRK)
        END DO
      ELSE
        WRITE(*,*) 'ERROR CWRK - NCHit Out of bound : ', NCHit
      END IF
C-----------------------------------------------------------------------
C Fill Block cele
C-----------------------------------------------------------------------
      NCel = 0.
      NCelMc = 0.
      DO iCELE=1, 300
        ICl(iCELE) = 0.
        Det(iCELE) = 0.
        Wed(iCELE) = 0.
        Pla(iCELE) = 0.
        Col(iCELE) = 0.
        Ea(iCELE) = 0.
        Ta(iCELE) = 0.
        Eb(iCELE) = 0.
        Tb(iCELE) = 0.
        EMc(iCELE) = 0.
        TMc(iCELE) = 0.
        XMc(iCELE) = 0.
        YMc(iCELE) = 0.
        ZMc(iCELE) = 0.
        PTyp(iCELE) = 0.
        KNum(iCELE) = 0.
        NHit(iCELE) = 0.
      END DO

      istat = GETCELESTRU(Evt%Cele)

      NCel = Evt%Cele%n 
      NCelMc = Evt%Cele%nmc
      IF (NCel > 0 .AND. NCel <= 300) THEN
        DO iCELE=1, NCel
          ICl(iCELE) = Evt%Cele%icl(iCELE)
          Det(iCELE) = Evt%Cele%det(iCELE)
          Wed(iCELE) = Evt%Cele%wed(iCELE)
          Pla(iCELE) = Evt%Cele%pla(iCELE)
          Col(iCELE) = Evt%Cele%col(iCELE)
          Ea(iCELE) = Evt%Cele%Ea(iCELE)
          Ta(iCELE) = Evt%Cele%ta(iCELE)
          Eb(iCELE) = Evt%Cele%Eb(iCELE)
          Tb(iCELE) = Evt%Cele%tb(iCELE)
        END DO
      ELSE
        WRITE(*,*) 'ERROR CELE - NCel Out of bound : ', NCel
      END IF

      IF (NCelMc > 0 .AND. NCelMc <= 300) THEN
        DO iCELE=1, NCelMc
          EMc(iCELE) = Evt%Cele%Etrue(iCELE)
          TMc(iCELE) = Evt%Cele%Ttrue(iCELE)
          XMc(iCELE) = Evt%Cele%xtrue(iCELE)
          YMc(iCELE) = Evt%Cele%ytrue(iCELE)
          ZMc(iCELE) = Evt%Cele%ztrue(iCELE)
          PTyp(iCELE) = Evt%Cele%ptyp(iCELE)
          KNum(iCELE) = Evt%Cele%knum(iCELE)
          NHit(iCELE) = Evt%Cele%numpar(iCELE)
        END DO
      ELSE
        WRITE(*,*) 'ERROR CELE - NCelMc Out of bound : ', NCelMc
      END IF
C-----------------------------------------------------------------------
C Fill Block dtce
C-----------------------------------------------------------------------
      nDTCE = 0.
      nSmall = 0.
      DO iDTCE=1, 1500
        iLayerDTCE(iDTCE) = 0.
        iWireDTCE(iDTCE) = 0.
        tDTCE(iDTCE) = 0.
      END DO

      CALL GETDTCESTRU(Evt%DTCE)

      nDTCE = Evt%DTCE%nDTCE
      IF ( nDTCE < 0 .OR. nDTCE > 1500 ) THEN
        WRITE(*,*) 'ERROR DTCE - nDTCE Out of bound : ', nDTCE
      END IF
      nSmall = Evt%DTCE%nSmall
      IF ( nSmall < 0 .OR. nSmall > 1500 ) THEN
        WRITE(*,*) 'ERROR DTCE - nSmall Out of bound : ', nSmall
      END IF

      IF (nDTCE > 0 .AND. nDTCE <= 1500) THEN
        DO iDTCE=1, nDTCE
          iLayerDTCE(iDTCE) = Evt%DTCE%iLayerDTCE(iDTCE)
          IF ( iLayerDTCE(iDTCE) < 1 .OR. iLayerDTCE(iDTCE) > 58 ) THEN
            WRITE(*,*) 'ERROR DTCE - iLayerDTCE[2] Out of bound : ', iLayerDTCE(iDTCE)
          END IF
          iWireDTCE(iDTCE) = Evt%DTCE%iWireDTCE(iDTCE)
          IF ( iWireDTCE(iDTCE) < 1 .OR. iWireDTCE(iDTCE) > 378 ) THEN
            WRITE(*,*) 'ERROR DTCE - iWireDTCE[3] Out of bound : ', iWireDTCE(iDTCE)
          END IF
          tDTCE(iDTCE) = Evt%DTCE%tDTCE(iDTCE)
        END DO
      ELSE
        WRITE(*,*) 'ERROR DTCE - nDTCE Index not valid: ', nDTCE
      END IF
C-----------------------------------------------------------------------
C Fill Block dtce0
C-----------------------------------------------------------------------
      nDTCE0 = 0.
      DO iDTCE0=1, 1500
        iLayerDTCE0(iDTCE0) = 0.
        iWireDTCE0(iDTCE0) = 0.
        tDTCE0(iDTCE0) = 0.
      END DO

C     DTCEStru is initialized in raw2dtce.cin

      nDTCE0 = DTCEStru%NEle
      IF ( nDTCE0 < 0 .OR. nDTCE0 > 1500 ) THEN
        WRITE(*,*) 'ERROR DTCE0 - nDTCE0 Out of bound : ', nDTCE0
      END IF

      IF ( nDTCE0 > 0 .AND. nDTCE0 <= 1500 ) THEN
        DO iDTCE0=1, nDTCE0
          iLayerDTCE0(iDTCE0) = DTCEStru%Lay(iDTCE0)
          IF ( iLayerDTCE0(iDTCE0) < 1 .OR. iLayerDTCE0(iDTCE0) > 58 ) THEN
            WRITE(*,*) 'ERROR DTCE0 - iLayerDTCE0[1] Out of bound : ', iLayerDTCE0(iDTCE0)
          END IF
          iWireDTCE0(iDTCE0) = DTCEStru%Wir(iDTCE0)
          IF ( iWireDTCE0(iDTCE0) < 1 .OR. iWireDTCE0(iDTCE0) > 378 ) THEN
            WRITE(*,*) 'ERROR DTCE0 - iWireDTCE0[2] Out of bound : ', iWireDTCE0(iDTCE0)
          END IF
          tDTCE0(iDTCE0) = DTCEStru%Time(iDTCE0)
        END DO
      ELSE
        WRITE(*,*) 'ERROR DTCE0 - nDTCE0 Index not valid: ', nDTCE0
      END IF
C-----------------------------------------------------------------------
C Fill Block dchits
C-----------------------------------------------------------------------
      nDCHR = 0.
      nSmallDCm = 0.
      nSmallDCp = 0.
      nBigDCm = 0.
      nBigDCp = 0.
      nCellDC = 0.
      nSmallDC = 0.

C     Already filled Evt%DTCE and DTCEStru in previous blocks

      nDCHR = DTCEStru%nDCHR
      nSmallDCm = DTCEStru%nSmallDCm
      nSmallDCp = DTCEStru%nSmallDCp
      nBigDCm = DTCEStru%nBigDCm
      nBigDCp = DTCEStru%nBigDCp
      nCellDC = Evt%DTCE%nDTCE
      nSmallDC = Evt%DTCE%nSmall
C-----------------------------------------------------------------------
C Fill Block dhsp
C-----------------------------------------------------------------------
      nDHSP = 0.
      DO iDHSP=1, 500
        TrkDh(iDHSP) = 0.
        Layer(iDHSP) = 0.
        Wire(iDHSP) = 0.
        Time(iDHSP) = 0.
        DPar(iDHSP) = 0.
        Res(iDHSP) = 0.
        XDh(iDHSP) = 0.
        YDh(iDHSP) = 0.
        ZDh(iDHSP) = 0.
      END DO

      CALL GETDHRESTRU(Evt%DHRE) 

      nDHSP = Evt%DHSP%numDHSP
      IF ( nDHSP < 0 .OR. nDHSP > 1500 ) THEN
        WRITE(*,*) 'ERROR DHSP - nDHSP Out of bound : ', nDHSP
      END IF

      IF (nDHSP > 0 .AND. nDHSP <= 500) THEN
        DO iDHSP=1, nDHSP
          TrkDh(iDHSP) = Evt%DHSP%itrk(iDHSP)
          Layer(iDHSP) = Evt%Dhsp%layer(iDHSP)
          Wire(iDHSP) = Evt%Dhsp%wire(iDHSP)
          Time(iDHSP) = Evt%Dhsp%time(iDHSP)
          DPar(iDHSP) = Evt%Dhsp%drift(iDHSP)
          Res(iDHSP) = Evt%Dhsp%res(iDHSP)
          XDh(iDHSP) = Evt%Dhsp%x(iDHSP)
          YDh(iDHSP) = Evt%Dhsp%y(iDHSP)
          ZDh(iDHSP) = Evt%Dhsp%z(iDHSP)
        END DO
      ELSE
        WRITE(*,*) 'ERROR DHSP - nDHSP Index not valid: ', nDHSP
      END IF
C
C Fill Root
C
      call fillntu() 	
CC End of code
C============
      RETURN
      END
C
C==============================================================================
      SUBROUTINE SAMRE
C==============================================================================
C
$$IMPLICIT
C
C==============================================================================
C
      RETURN 
      END
C

C==============================================================================
      SUBROUTINE SAMHB
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'C$INC:ERLEVL.INC'
$$INCLUDE 'CALIBINC:ANERROR.INC'
$$include 'sample.inc'
C
C Local declarations
C
      INTEGER    Status, MinHisId, MaxHisId
C      INTEGER    NtuId ! Comment to avoid conflict with raw2dtce.cin
      LOGICAL    HisFlg
C
C==============================================================================
C
      RETURN 
      END
C
C==============================================================================
      SUBROUTINE SAMTK
C==============================================================================
C
C  Description:
C  ------------
C
C==============================================================================
C
$$IMPLICIT
C
$$INCLUDE 'A_C_LIBRARY:ANERROR.INC'
$$INCLUDE 'S_I$LIBRARY:NOARGINC.INC'
$$include 'sample_talk.inc'
C
C External functions
C
      INTEGER   UIDFFI, UIUSGP, UIACME, UIGTYE
C
C Local declarations
C
      INTEGER   Status, MENUF, MENUL, IGROUP
      CHARACTER Verb*40, Prompt*100
C
C==============================================================================
C
      Status=UIDFFI( 
     $     '$SAMPLE/sample.uid'
     $     ,IGROUP,MENUF,N$A,N$A,MENUL,N$A )
      Status = UIUSGP(IGROUP,N$A)
 10   Status = UIACME(MENUF,Verb,N$A) ! Display menu
C     
      if(verb.eq.'SHOW')then
	goto 10
      else if(verb.eq.'TRIG')then
      	write(Prompt,123)'TRIG'
	Status=UIGTYE(Prompt,TRIGFLAG)
	goto 10
      else if(verb.eq.'TELE')then
      	write(Prompt,123)'TELE'
	Status=UIGTYE(Prompt,TELEFLAG)
	goto 10
      else if(verb.eq.'C2TRG')then
      	write(Prompt,123)'C2TRG'
	Status=UIGTYE(Prompt,C2TRGFLAG)
	goto 10
      else if(verb.eq.'TELLINA')then
      	write(Prompt,123)'TELLINA'
	Status=UIGTYE(Prompt,TELLINAFLAG)
	goto 10
      else if(verb.eq.'PIZZA')then
      	write(Prompt,123)'PIZZA'
	Status=UIGTYE(Prompt,PIZZAFLAG)
	goto 10
      else if(verb.eq.'ECLS')then
      	write(Prompt,123)'ECLS'
	Status=UIGTYE(Prompt,ECLSFLAG)
	goto 10
      else if(verb.eq.'BPOS')then
      	write(Prompt,123)'BPOS'
	Status=UIGTYE(Prompt,BPOSFLAG)
	goto 10

      end if
C
123   FORMAT(1x,'Select ',a4,' Ntuple-block?')
C
      RETURN
      END
C     

C=============================================================================
      SUBROUTINE SAMFI
C===========================================================================
	write(*,*)'Run End routine'
      	call closetree() 

      RETURN
      END
C
C===========================================================================














